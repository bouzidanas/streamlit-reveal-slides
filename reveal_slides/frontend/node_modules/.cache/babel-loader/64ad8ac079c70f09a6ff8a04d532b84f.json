{"ast":null,"code":"import _slicedToArray from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\nexport var Schema = /*#__PURE__*/function (_Symbol$toStringTag) {\n  function Schema() {\n    var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var metadata = arguments.length > 1 ? arguments[1] : undefined;\n    var dictionaries = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, Schema);\n    this.fields = fields || [];\n    this.metadata = metadata || new Map();\n    if (!dictionaries) {\n      dictionaries = generateDictionaryMap(fields);\n    }\n    this.dictionaries = dictionaries;\n  }\n  /** @nocollapse */\n  _createClass(Schema, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Schema';\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Schema<{ \".concat(this.fields.map(function (f, i) {\n        return \"\".concat(i, \": \").concat(f);\n      }).join(', '), \" }>\");\n    }\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      return comparer.compareSchemas(this, other);\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      for (var _len = arguments.length, columnNames = new Array(_len), _key = 0; _key < _len; _key++) {\n        columnNames[_key] = arguments[_key];\n      }\n      var names = columnNames.reduce(function (xs, x) {\n        return (xs[x] = true) && xs;\n      }, Object.create(null));\n      return new Schema(this.fields.filter(function (f) {\n        return names[f.name];\n      }), this.metadata);\n    }\n  }, {\n    key: \"selectAt\",\n    value: function selectAt() {\n      var _this = this;\n      for (var _len2 = arguments.length, columnIndices = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        columnIndices[_key2] = arguments[_key2];\n      }\n      return new Schema(columnIndices.map(function (i) {\n        return _this.fields[i];\n      }).filter(Boolean), this.metadata);\n    }\n  }, {\n    key: \"assign\",\n    value: function assign() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      var other = args[0] instanceof Schema ? args[0] : new Schema(selectArgs(Field, args));\n      var curFields = _toConsumableArray(this.fields);\n      var metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n      var newFields = other.fields.filter(function (f2) {\n        var i = curFields.findIndex(function (f) {\n          return f.name === f2.name;\n        });\n        return ~i ? (curFields[i] = f2.clone({\n          metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n        })) && false : true;\n      });\n      var newDictionaries = generateDictionaryMap(newFields, new Map());\n      return new Schema([].concat(_toConsumableArray(curFields), _toConsumableArray(newFields)), metadata, new Map([].concat(_toConsumableArray(this.dictionaries), _toConsumableArray(newDictionaries))));\n    }\n  }], [{\n    key: \"from\",\n    value: function from() {\n      return Schema.new(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1]);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"new\",\n    value: function _new() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return new Schema(selectFieldArgs(args)[0]);\n    }\n  }]);\n  return Schema;\n}(Symbol.toStringTag);\nexport var Field = /*#__PURE__*/function (_Symbol$toStringTag2) {\n  function Field(name, type) {\n    var nullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var metadata = arguments.length > 3 ? arguments[3] : undefined;\n    _classCallCheck(this, Field);\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata || new Map();\n  }\n  /** @nocollapse */\n  _createClass(Field, [{\n    key: \"typeId\",\n    get: function get() {\n      return this.type.typeId;\n    }\n  }, {\n    key: _Symbol$toStringTag2,\n    get: function get() {\n      return 'Field';\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.name, \": \").concat(this.type);\n    }\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(other) {\n      return comparer.compareField(this, other);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var _args, _args2, _args2$, _args2$2, _args2$3, _args2$4, _args$, _args$$name, _args$$type, _args$$nullable, _args$$metadata;\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      var name = args[0],\n        type = args[1],\n        nullable = args[2],\n        metadata = args[3];\n      !args[0] || typeof args[0] !== 'object' ? (_args = args, _args2 = _slicedToArray(_args, 4), _args2$ = _args2[0], name = _args2$ === void 0 ? this.name : _args2$, _args2$2 = _args2[1], type = _args2$2 === void 0 ? this.type : _args2$2, _args2$3 = _args2[2], nullable = _args2$3 === void 0 ? this.nullable : _args2$3, _args2$4 = _args2[3], metadata = _args2$4 === void 0 ? this.metadata : _args2$4, _args) : (_args$ = args[0], _args$$name = _args$.name, name = _args$$name === void 0 ? this.name : _args$$name, _args$$type = _args$.type, type = _args$$type === void 0 ? this.type : _args$$type, _args$$nullable = _args$.nullable, nullable = _args$$nullable === void 0 ? this.nullable : _args$$nullable, _args$$metadata = _args$.metadata, metadata = _args$$metadata === void 0 ? this.metadata : _args$$metadata, _args$);\n      return Field.new(name, type, nullable, metadata);\n    }\n  }], [{\n    key: \"new\",\n    value: function _new() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      var name = args[0],\n        type = args[1],\n        nullable = args[2],\n        metadata = args[3];\n      if (args[0] && typeof args[0] === 'object') {\n        name = args[0].name;\n        type === undefined && (type = args[0].type);\n        nullable === undefined && (nullable = args[0].nullable);\n        metadata === undefined && (metadata = args[0].metadata);\n      }\n      return new Field(\"\".concat(name), type, nullable, metadata);\n    }\n  }]);\n  return Field;\n}(Symbol.toStringTag);\n/** @ignore */\nfunction mergeMaps(m1, m2) {\n  return new Map([].concat(_toConsumableArray(m1 || new Map()), _toConsumableArray(m2 || new Map())));\n}\n/** @ignore */\nfunction generateDictionaryMap(fields) {\n  var dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n  for (var i = -1, n = fields.length; ++i < n;) {\n    var field = fields[i];\n    var type = field.type;\n    if (DataType.isDictionary(type)) {\n      if (!dictionaries.has(type.id)) {\n        dictionaries.set(type.id, type.dictionary);\n      } else if (dictionaries.get(type.id) !== type.dictionary) {\n        throw new Error(\"Cannot create Schema containing two different dictionaries with the same Id\");\n      }\n    }\n    if (type.children && type.children.length > 0) {\n      generateDictionaryMap(type.children, dictionaries);\n    }\n  }\n  return dictionaries;\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nSchema.prototype.fields = null;\nSchema.prototype.metadata = null;\nSchema.prototype.dictionaries = null;\nField.prototype.type = null;\nField.prototype.name = null;\nField.prototype.nullable = null;\nField.prototype.metadata = null;","map":{"version":3,"names":["DataType","selectArgs","selectFieldArgs","instance","comparer","Schema","_Symbol$toStringTag","fields","arguments","length","undefined","metadata","dictionaries","_classCallCheck","Map","generateDictionaryMap","_createClass","key","get","value","toString","concat","map","f","i","join","compareTo","other","compareSchemas","select","_len","columnNames","Array","_key","names","reduce","xs","x","Object","create","filter","name","selectAt","_this","_len2","columnIndices","_key2","Boolean","assign","_len3","args","_key3","Field","curFields","_toConsumableArray","mergeMaps","newFields","f2","findIndex","clone","newDictionaries","from","new","_new","_len4","_key4","Symbol","toStringTag","_Symbol$toStringTag2","type","nullable","typeId","compareField","_args","_args2","_args2$","_args2$2","_args2$3","_args2$4","_args$","_args$$name","_args$$type","_args$$nullable","_args$$metadata","_len5","_key5","_slicedToArray","_len6","_key6","m1","m2","n","field","isDictionary","has","id","set","dictionary","Error","children","prototype"],"sources":["schema.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}