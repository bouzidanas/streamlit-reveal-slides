{"ast":null,"code":"import _classCallCheck from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS7624605610262437867 from './Schema';\nexport var org;\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        flatbuf.Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        var MessageHeader;\n        (function (MessageHeader) {\n          MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n          MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n          MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n          MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n          MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n          MessageHeader[MessageHeader[\"SparseTensor\"] = 5] = \"SparseTensor\";\n        })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        var FieldNode = /*#__PURE__*/function () {\n          function FieldNode() {\n            _classCallCheck(this, FieldNode);\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns FieldNode\n           */\n          _createClass(FieldNode, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * The number of value slots in the Arrow array at this level of a nested\n             * tree\n             *\n             * @returns flatbuffers.Long\n             */\n          }, {\n            key: \"length\",\n            value: function length() {\n              return this.bb.readInt64(this.bb_pos);\n            }\n            /**\n             * The number of observed nulls. Fields with null_count == 0 may choose not\n             * to write their physical validity bitmap out as a materialized buffer,\n             * instead setting the length of the bitmap buffer to 0.\n             *\n             * @returns flatbuffers.Long\n             */\n          }, {\n            key: \"nullCount\",\n            value: function nullCount() {\n              return this.bb.readInt64(this.bb_pos + 8);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long length\n             * @param flatbuffers.Long null_count\n             * @returns flatbuffers.Offset\n             */\n          }], [{\n            key: \"createFieldNode\",\n            value: function createFieldNode(builder, length, null_count) {\n              builder.prep(8, 16);\n              builder.writeInt64(null_count);\n              builder.writeInt64(length);\n              return builder.offset();\n            }\n          }]);\n          return FieldNode;\n        }();\n        flatbuf.FieldNode = FieldNode;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        var RecordBatch = /*#__PURE__*/function () {\n          function RecordBatch() {\n            _classCallCheck(this, RecordBatch);\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns RecordBatch\n           */\n          _createClass(RecordBatch, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param RecordBatch= obj\n             * @returns RecordBatch\n             */\n          }, {\n            key: \"length\",\n            value:\n            /**\n             * number of records / rows. The arrays in the batch should all have this\n             * length\n             *\n             * @returns flatbuffers.Long\n             */\n            function length() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n              return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n            }\n            /**\n             * Nodes correspond to the pre-ordered flattened logical schema\n             *\n             * @param number index\n             * @param org.apache.arrow.flatbuf.FieldNode= obj\n             * @returns org.apache.arrow.flatbuf.FieldNode\n             */\n          }, {\n            key: \"nodes\",\n            value: function nodes(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n              return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n          }, {\n            key: \"nodesLength\",\n            value: function nodesLength() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * Buffers correspond to the pre-ordered flattened buffer tree\n             *\n             * The number of buffers appended to this list depends on the schema. For\n             * example, most primitive arrays will have 2 buffers, 1 for the validity\n             * bitmap and 1 for the values. For struct arrays, there will only be a\n             * single buffer for the validity (nulls) bitmap\n             *\n             * @param number index\n             * @param org.apache.arrow.flatbuf.Buffer= obj\n             * @returns org.apache.arrow.flatbuf.Buffer\n             */\n          }, {\n            key: \"buffers\",\n            value: function buffers(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n              return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n          }, {\n            key: \"buffersLength\",\n            value: function buffersLength() {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n          }], [{\n            key: \"getRootAsRecordBatch\",\n            value: function getRootAsRecordBatch(bb, obj) {\n              return (obj || new RecordBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startRecordBatch\",\n            value: function startRecordBatch(builder) {\n              builder.startObject(3);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long length\n             */\n          }, {\n            key: \"addLength\",\n            value: function addLength(builder, length) {\n              builder.addFieldInt64(0, length, builder.createLong(0, 0));\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset nodesOffset\n             */\n          }, {\n            key: \"addNodes\",\n            value: function addNodes(builder, nodesOffset) {\n              builder.addFieldOffset(1, nodesOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n          }, {\n            key: \"startNodesVector\",\n            value: function startNodesVector(builder, numElems) {\n              builder.startVector(16, numElems, 8);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset buffersOffset\n             */\n          }, {\n            key: \"addBuffers\",\n            value: function addBuffers(builder, buffersOffset) {\n              builder.addFieldOffset(2, buffersOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n          }, {\n            key: \"startBuffersVector\",\n            value: function startBuffersVector(builder, numElems) {\n              builder.startVector(16, numElems, 8);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n          }, {\n            key: \"endRecordBatch\",\n            value: function endRecordBatch(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createRecordBatch\",\n            value: function createRecordBatch(builder, length, nodesOffset, buffersOffset) {\n              RecordBatch.startRecordBatch(builder);\n              RecordBatch.addLength(builder, length);\n              RecordBatch.addNodes(builder, nodesOffset);\n              RecordBatch.addBuffers(builder, buffersOffset);\n              return RecordBatch.endRecordBatch(builder);\n            }\n          }]);\n          return RecordBatch;\n        }();\n        flatbuf.RecordBatch = RecordBatch;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        var DictionaryBatch = /*#__PURE__*/function () {\n          function DictionaryBatch() {\n            _classCallCheck(this, DictionaryBatch);\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns DictionaryBatch\n           */\n          _createClass(DictionaryBatch, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param DictionaryBatch= obj\n             * @returns DictionaryBatch\n             */\n          }, {\n            key: \"id\",\n            value:\n            /**\n             * @returns flatbuffers.Long\n             */\n            function id() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n              return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n            }\n            /**\n             * @param org.apache.arrow.flatbuf.RecordBatch= obj\n             * @returns org.apache.arrow.flatbuf.RecordBatch|null\n             */\n          }, {\n            key: \"data\",\n            value: function data(obj) {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n              return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n            }\n            /**\n             * If isDelta is true the values in the dictionary are to be appended to a\n             * dictionary with the indicated id\n             *\n             * @returns boolean\n             */\n          }, {\n            key: \"isDelta\",\n            value: function isDelta() {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n              return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n          }], [{\n            key: \"getRootAsDictionaryBatch\",\n            value: function getRootAsDictionaryBatch(bb, obj) {\n              return (obj || new DictionaryBatch()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startDictionaryBatch\",\n            value: function startDictionaryBatch(builder) {\n              builder.startObject(3);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long id\n             */\n          }, {\n            key: \"addId\",\n            value: function addId(builder, id) {\n              builder.addFieldInt64(0, id, builder.createLong(0, 0));\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset dataOffset\n             */\n          }, {\n            key: \"addData\",\n            value: function addData(builder, dataOffset) {\n              builder.addFieldOffset(1, dataOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param boolean isDelta\n             */\n          }, {\n            key: \"addIsDelta\",\n            value: function addIsDelta(builder, isDelta) {\n              builder.addFieldInt8(2, +isDelta, +false);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n          }, {\n            key: \"endDictionaryBatch\",\n            value: function endDictionaryBatch(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n          }, {\n            key: \"createDictionaryBatch\",\n            value: function createDictionaryBatch(builder, id, dataOffset, isDelta) {\n              DictionaryBatch.startDictionaryBatch(builder);\n              DictionaryBatch.addId(builder, id);\n              DictionaryBatch.addData(builder, dataOffset);\n              DictionaryBatch.addIsDelta(builder, isDelta);\n              return DictionaryBatch.endDictionaryBatch(builder);\n            }\n          }]);\n          return DictionaryBatch;\n        }();\n        flatbuf.DictionaryBatch = DictionaryBatch;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n  var apache;\n  (function (apache) {\n    var arrow;\n    (function (arrow) {\n      var flatbuf;\n      (function (flatbuf) {\n        var Message = /*#__PURE__*/function () {\n          function Message() {\n            _classCallCheck(this, Message);\n            this.bb = null;\n            this.bb_pos = 0;\n          }\n          /**\n           * @param number i\n           * @param flatbuffers.ByteBuffer bb\n           * @returns Message\n           */\n          _createClass(Message, [{\n            key: \"__init\",\n            value: function __init(i, bb) {\n              this.bb_pos = i;\n              this.bb = bb;\n              return this;\n            }\n            /**\n             * @param flatbuffers.ByteBuffer bb\n             * @param Message= obj\n             * @returns Message\n             */\n          }, {\n            key: \"version\",\n            value:\n            /**\n             * @returns org.apache.arrow.flatbuf.MetadataVersion\n             */\n            function version() {\n              var offset = this.bb.__offset(this.bb_pos, 4);\n              return offset ? /**  */this.bb.readInt16(this.bb_pos + offset) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n            }\n            /**\n             * @returns org.apache.arrow.flatbuf.MessageHeader\n             */\n          }, {\n            key: \"headerType\",\n            value: function headerType() {\n              var offset = this.bb.__offset(this.bb_pos, 6);\n              return offset ? /**  */this.bb.readUint8(this.bb_pos + offset) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n            }\n            /**\n             * @param flatbuffers.Table obj\n             * @returns ?flatbuffers.Table\n             */\n          }, {\n            key: \"header\",\n            value: function header(obj) {\n              var offset = this.bb.__offset(this.bb_pos, 8);\n              return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n            }\n            /**\n             * @returns flatbuffers.Long\n             */\n          }, {\n            key: \"bodyLength\",\n            value: function bodyLength() {\n              var offset = this.bb.__offset(this.bb_pos, 10);\n              return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n            }\n            /**\n             * @param number index\n             * @param org.apache.arrow.flatbuf.KeyValue= obj\n             * @returns org.apache.arrow.flatbuf.KeyValue\n             */\n          }, {\n            key: \"customMetadata\",\n            value: function customMetadata(index, obj) {\n              var offset = this.bb.__offset(this.bb_pos, 12);\n              return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n            }\n            /**\n             * @returns number\n             */\n          }, {\n            key: \"customMetadataLength\",\n            value: function customMetadataLength() {\n              var offset = this.bb.__offset(this.bb_pos, 12);\n              return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             */\n          }], [{\n            key: \"getRootAsMessage\",\n            value: function getRootAsMessage(bb, obj) {\n              return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n            }\n          }, {\n            key: \"startMessage\",\n            value: function startMessage(builder) {\n              builder.startObject(5);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.MetadataVersion version\n             */\n          }, {\n            key: \"addVersion\",\n            value: function addVersion(builder, version) {\n              builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param org.apache.arrow.flatbuf.MessageHeader headerType\n             */\n          }, {\n            key: \"addHeaderType\",\n            value: function addHeaderType(builder, headerType) {\n              builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset headerOffset\n             */\n          }, {\n            key: \"addHeader\",\n            value: function addHeader(builder, headerOffset) {\n              builder.addFieldOffset(2, headerOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Long bodyLength\n             */\n          }, {\n            key: \"addBodyLength\",\n            value: function addBodyLength(builder, bodyLength) {\n              builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset customMetadataOffset\n             */\n          }, {\n            key: \"addCustomMetadata\",\n            value: function addCustomMetadata(builder, customMetadataOffset) {\n              builder.addFieldOffset(4, customMetadataOffset, 0);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param Array.<flatbuffers.Offset> data\n             * @returns flatbuffers.Offset\n             */\n          }, {\n            key: \"createCustomMetadataVector\",\n            value: function createCustomMetadataVector(builder, data) {\n              builder.startVector(4, data.length, 4);\n              for (var i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n              }\n              return builder.endVector();\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param number numElems\n             */\n          }, {\n            key: \"startCustomMetadataVector\",\n            value: function startCustomMetadataVector(builder, numElems) {\n              builder.startVector(4, numElems, 4);\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @returns flatbuffers.Offset\n             */\n          }, {\n            key: \"endMessage\",\n            value: function endMessage(builder) {\n              var offset = builder.endObject();\n              return offset;\n            }\n            /**\n             * @param flatbuffers.Builder builder\n             * @param flatbuffers.Offset offset\n             */\n          }, {\n            key: \"finishMessageBuffer\",\n            value: function finishMessageBuffer(builder, offset) {\n              builder.finish(offset);\n            }\n          }, {\n            key: \"createMessage\",\n            value: function createMessage(builder, version, headerType, headerOffset, bodyLength, customMetadataOffset) {\n              Message.startMessage(builder);\n              Message.addVersion(builder, version);\n              Message.addHeaderType(builder, headerType);\n              Message.addHeader(builder, headerOffset);\n              Message.addBodyLength(builder, bodyLength);\n              Message.addCustomMetadata(builder, customMetadataOffset);\n              return Message.endMessage(builder);\n            }\n          }]);\n          return Message;\n        }();\n        flatbuf.Message = Message;\n      })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n    })(arrow = apache.arrow || (apache.arrow = {}));\n  })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));","map":{"version":3,"names":["NS7624605610262437867","org","apache","arrow","flatbuf","Schema","MessageHeader","FieldNode","_classCallCheck","bb","bb_pos","_createClass","key","value","__init","i","length","readInt64","nullCount","createFieldNode","builder","null_count","prep","writeInt64","offset","RecordBatch","__offset","createLong","nodes","index","obj","__vector","nodesLength","__vector_len","buffers","Buffer","buffersLength","getRootAsRecordBatch","readInt32","position","startRecordBatch","startObject","addLength","addFieldInt64","addNodes","nodesOffset","addFieldOffset","startNodesVector","numElems","startVector","addBuffers","buffersOffset","startBuffersVector","endRecordBatch","endObject","createRecordBatch","DictionaryBatch","id","data","__indirect","isDelta","readInt8","getRootAsDictionaryBatch","startDictionaryBatch","addId","addData","dataOffset","addIsDelta","addFieldInt8","endDictionaryBatch","createDictionaryBatch","Message","version","readInt16","MetadataVersion","V1","headerType","readUint8","NONE","header","__union","bodyLength","customMetadata","KeyValue","customMetadataLength","getRootAsMessage","startMessage","addVersion","addFieldInt16","addHeaderType","addHeader","headerOffset","addBodyLength","addCustomMetadata","customMetadataOffset","createCustomMetadataVector","addOffset","endVector","startCustomMetadataVector","endMessage","finishMessageBuffer","finish","createMessage"],"sources":["fb/Message.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}