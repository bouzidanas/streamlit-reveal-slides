{"ast":null,"code":"var _jsxFileName = \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { useEffect } from \"react\";\nimport Reveal from 'reveal.js';\nimport RevealMarkdown from 'reveal.js/plugin/markdown/markdown';\nimport 'reveal.js/dist/reveal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst RevealSlides = _ref => {\n  _s();\n  let {\n    args,\n    width,\n    disabled,\n    theme\n  } = _ref;\n  console.log(args[\"content\"]);\n  console.log(args[\"allow_unsafe_html\"]);\n  useEffect(() => {\n    // code to run on component mount goes here\n    import('../node_modules/reveal.js/dist/theme/' + args[\"theme\"] + '.css');\n  }, [args[\"theme\"]]);\n  useEffect(() => {\n    // code to run after render goes here\n    if (args[\"allow_unsafe_html\"]) {\n      Reveal.initialize({\n        ...args[\"config\"]\n      });\n    } else {\n      const config = {\n        ...args[\"config\"]\n      };\n      if ('plugins' in config) {\n        config['plugins'].push(RevealMarkdown);\n      }\n      Reveal.initialize(config);\n    }\n  }, [args[\"config\"], args[\"allow_unsafe_html\"]]);\n\n  /**\n  * resizeObserver observes changes in elements its given to observe and is used here\n  * to communicate to streamlit the height of the component that has changed\n  * so that streamlit can adjust the iframe containing the component accordingly.\n  */\n  const resizeObserver = new ResizeObserver(entries => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    if (args[\"height\"] === \"auto\" || typeof args[\"height\"] !== \"number\") {\n      var _entries$0$contentBox;\n      Streamlit.setFrameHeight((_entries$0$contentBox = entries[0].contentBoxSize.blockSize) !== null && _entries$0$contentBox !== void 0 ? _entries$0$contentBox : entries[0].contentRect.height);\n    } else {\n      Streamlit.setFrameHeight(args[\"height\"]);\n    }\n  });\n  const observe = divElem => {\n    divElem ? resizeObserver.observe(divElem) : resizeObserver.disconnect();\n  };\n  if (args[\"allow_unsafe_html\"]) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: observe,\n      className: \"slides\",\n      dangerouslySetInnerHTML: {\n        __html: args[\"content\"]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: observe,\n      className: \"slides\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        \"data-markdown\": true,\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          \"data-template\": true,\n          children: args[\"content\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n_s(RevealSlides, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = RevealSlides;\nexport default _c2 = withStreamlitConnection(RevealSlides);\nvar _c, _c2;\n$RefreshReg$(_c, \"RevealSlides\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","useEffect","Reveal","RevealMarkdown","jsxDEV","_jsxDEV","RevealSlides","_ref","_s","args","width","disabled","theme","console","log","initialize","config","push","resizeObserver","ResizeObserver","entries","_entries$0$contentBox","setFrameHeight","contentBoxSize","blockSize","contentRect","height","observe","divElem","disconnect","ref","className","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","_c2","$RefreshReg$"],"sources":["/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx"],"sourcesContent":["import {\n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection,\n  Theme,\n} from \"streamlit-component-lib\"\nimport {useState, useEffect, useMemo } from \"react\"\n\n\nimport Reveal from 'reveal.js';\nimport RevealMarkdown from 'reveal.js/plugin/markdown/markdown';\n\nimport 'reveal.js/dist/reveal.css';\n\ninterface RevealSlidesProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst RevealSlides = ({ args, width, disabled, theme }: RevealSlidesProps) => {\n\n  console.log(args[\"content\"])\n  console.log(args[\"allow_unsafe_html\"])\n\n  useEffect(() => {\n    // code to run on component mount goes here\n    import('../node_modules/reveal.js/dist/theme/' + args[\"theme\"] + '.css')\n  }, [args[\"theme\"]]);\n\n  useEffect(() => {\n    // code to run after render goes here\n    if (args[\"allow_unsafe_html\"]) {\n      Reveal.initialize({...args[\"config\"]});\n    }\n    else {\n      const config = {...args[\"config\"]}\n      if ('plugins' in config){\n        config['plugins'].push(RevealMarkdown);\n      }\n      Reveal.initialize(config);\n    }\n  }, [args[\"config\"], args[\"allow_unsafe_html\"]]);\n\n    /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    if (args[\"height\"] === \"auto\" || typeof args[\"height\"] !== \"number\"){\n      Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n    }\n    else {\n      Streamlit.setFrameHeight(args[\"height\"]);\n    }\n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  if (args[\"allow_unsafe_html\"]) {\n    return (\n      <div ref={observe} className=\"slides\" dangerouslySetInnerHTML={{__html: args[\"content\"]}}>\n      </div>\n    )\n  }\n  else {\n    return (\n      <div ref={observe} className=\"slides\">\n        <section data-markdown>\n          <textarea data-template>\n            {args[\"content\"]}\n          </textarea>\n        </section>\n      </div>\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(RevealSlides)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}