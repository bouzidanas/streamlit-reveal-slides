{"ast":null,"code":"import _classCallCheck from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { vectorFromValuesWithType } from './index';\n/** @ignore */\nexport var Utf8Vector = /*#__PURE__*/function (_BaseVector) {\n  _inherits(Utf8Vector, _BaseVector);\n  var _super = _createSuper(Utf8Vector);\n  function Utf8Vector() {\n    _classCallCheck(this, Utf8Vector);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Utf8Vector, [{\n    key: \"asBinary\",\n    value: function asBinary() {\n      return Vector.new(this.data.clone(new Binary()));\n    }\n  }], [{\n    key: \"from\",\n    value: /** @nocollapse */\n    function from(input) {\n      return vectorFromValuesWithType(function () {\n        return new Utf8();\n      }, input);\n    }\n  }]);\n  return Utf8Vector;\n}(BaseVector);","map":{"version":3,"names":["Vector","BaseVector","Binary","Utf8","vectorFromValuesWithType","Utf8Vector","_BaseVector","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","asBinary","new","data","clone","from","input"],"sources":["vector/utf8.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, TNull> | VectorBuilderOptionsAsync<Utf8, TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAM,QAAQ,WAAW;AAElC,SAASC,UAAU,QAAQ,QAAQ;AACnC,SAASC,MAAM,EAAEC,IAAI,QAAQ,SAAS;AAEtC,SAASC,wBAAwB,QAAQ,SAAS;AAGlD;AACA,WAAaC,UAAW,0BAAAC,WAAA;EAAAC,SAAA,CAAAF,UAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,UAAA;EAAA,SAAAA,WAAA;IAAAK,eAAA,OAAAL,UAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,UAAA;IAAAS,GAAA;IAAAC,KAAA,EASb,SAAAC,SAAA,EAAQ;MACX,OAAOhB,MAAM,CAACiB,GAAG,CAAC,IAAI,CAACC,IAAI,CAACC,KAAK,CAAC,IAAIjB,MAAM,EAAE,CAAC,CAAC;IACpD;EAAC;IAAAY,GAAA;IAAAC,KAAA,EAND;IACO,SAAAK,KAAyBC,KAA4I;MACxK,OAAOjB,wBAAwB,CAAC;QAAA,OAAM,IAAID,IAAI,EAAE;MAAA,GAAEkB,KAAK,CAAC;IAC5D;EAAC;EAAA,OAAAhB,UAAA;AAAA,EAR2BJ,UAAgB"},"metadata":{},"sourceType":"module"}