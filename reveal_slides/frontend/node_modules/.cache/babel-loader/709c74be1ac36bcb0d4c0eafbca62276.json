{"ast":null,"code":"import speakerViewHTML from './speaker-view.html';\nimport { marked } from 'marked';\n\n/**\n * Handles opening of and synchronization with the reveal.js\n * notes window.\n *\n * Handshake process:\n * 1. This window posts 'connect' to notes window\n *    - Includes URL of presentation to show\n * 2. Notes window responds with 'connected' when it is available\n * 3. This window proceeds to send the current presentation state\n *    to the notes window\n */\nconst Plugin = () => {\n  let connectInterval;\n  let speakerWindow = null;\n  let deck;\n\n  /**\n   * Opens a new speaker view window.\n   */\n  function openSpeakerWindow() {\n    // If a window is already open, focus it\n    if (speakerWindow && !speakerWindow.closed) {\n      speakerWindow.focus();\n    } else {\n      speakerWindow = window.open('about:blank', 'reveal.js - Notes', 'width=1100,height=700');\n      speakerWindow.marked = marked;\n      speakerWindow.document.write(speakerViewHTML);\n      if (!speakerWindow) {\n        alert('Speaker view popup failed to open. Please make sure popups are allowed and reopen the speaker view.');\n        return;\n      }\n      connect();\n    }\n  }\n\n  /**\n   * Reconnect with an existing speaker view window.\n   */\n  function reconnectSpeakerWindow(reconnectWindow) {\n    if (speakerWindow && !speakerWindow.closed) {\n      speakerWindow.focus();\n    } else {\n      speakerWindow = reconnectWindow;\n      window.addEventListener('message', onPostMessage);\n      onConnected();\n    }\n  }\n\n  /**\n  \t* Connect to the notes window through a postmessage handshake.\n  \t* Using postmessage enables us to work in situations where the\n  \t* origins differ, such as a presentation being opened from the\n  \t* file system.\n  \t*/\n  function connect() {\n    const presentationURL = deck.getConfig().url;\n    const url = typeof presentationURL === 'string' ? presentationURL : window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search;\n\n    // Keep trying to connect until we get a 'connected' message back\n    connectInterval = setInterval(function () {\n      speakerWindow.postMessage(JSON.stringify({\n        namespace: 'reveal-notes',\n        type: 'connect',\n        state: deck.getState(),\n        url\n      }), '*');\n    }, 500);\n    window.addEventListener('message', onPostMessage);\n  }\n\n  /**\n   * Calls the specified Reveal.js method with the provided argument\n   * and then pushes the result to the notes frame.\n   */\n  function callRevealApi(methodName, methodArguments, callId) {\n    let result = deck[methodName].apply(deck, methodArguments);\n    speakerWindow.postMessage(JSON.stringify({\n      namespace: 'reveal-notes',\n      type: 'return',\n      result,\n      callId\n    }), '*');\n  }\n\n  /**\n   * Posts the current slide data to the notes window.\n   */\n  function post(event) {\n    let slideElement = deck.getCurrentSlide(),\n      notesElements = slideElement.querySelectorAll('aside.notes'),\n      fragmentElement = slideElement.querySelector('.current-fragment');\n    let messageData = {\n      namespace: 'reveal-notes',\n      type: 'state',\n      notes: '',\n      markdown: false,\n      whitespace: 'normal',\n      state: deck.getState()\n    };\n\n    // Look for notes defined in a slide attribute\n    if (slideElement.hasAttribute('data-notes')) {\n      messageData.notes = slideElement.getAttribute('data-notes');\n      messageData.whitespace = 'pre-wrap';\n    }\n\n    // Look for notes defined in a fragment\n    if (fragmentElement) {\n      let fragmentNotes = fragmentElement.querySelector('aside.notes');\n      if (fragmentNotes) {\n        messageData.notes = fragmentNotes.innerHTML;\n        messageData.markdown = typeof fragmentNotes.getAttribute('data-markdown') === 'string';\n\n        // Ignore other slide notes\n        notesElements = null;\n      } else if (fragmentElement.hasAttribute('data-notes')) {\n        messageData.notes = fragmentElement.getAttribute('data-notes');\n        messageData.whitespace = 'pre-wrap';\n\n        // In case there are slide notes\n        notesElements = null;\n      }\n    }\n\n    // Look for notes defined in an aside element\n    if (notesElements) {\n      messageData.notes = Array.from(notesElements).map(notesElement => notesElement.innerHTML).join('\\n');\n      messageData.markdown = notesElements[0] && typeof notesElements[0].getAttribute('data-markdown') === 'string';\n    }\n    speakerWindow.postMessage(JSON.stringify(messageData), '*');\n  }\n\n  /**\n   * Check if the given event is from the same origin as the\n   * current window.\n   */\n  function isSameOriginEvent(event) {\n    try {\n      return window.location.origin === event.source.location.origin;\n    } catch (error) {\n      return false;\n    }\n  }\n  function onPostMessage(event) {\n    // Only allow same-origin messages\n    // (added 12/5/22 as a XSS safeguard)\n    if (isSameOriginEvent(event)) {\n      let data = JSON.parse(event.data);\n      if (data && data.namespace === 'reveal-notes' && data.type === 'connected') {\n        clearInterval(connectInterval);\n        onConnected();\n      } else if (data && data.namespace === 'reveal-notes' && data.type === 'call') {\n        callRevealApi(data.methodName, data.arguments, data.callId);\n      }\n    }\n  }\n\n  /**\n   * Called once we have established a connection to the notes\n   * window.\n   */\n  function onConnected() {\n    // Monitor events that trigger a change in state\n    deck.on('slidechanged', post);\n    deck.on('fragmentshown', post);\n    deck.on('fragmenthidden', post);\n    deck.on('overviewhidden', post);\n    deck.on('overviewshown', post);\n    deck.on('paused', post);\n    deck.on('resumed', post);\n\n    // Post the initial state\n    post();\n  }\n  return {\n    id: 'notes',\n    init: function (reveal) {\n      deck = reveal;\n      if (!/receiver/i.test(window.location.search)) {\n        // If the there's a 'notes' query set, open directly\n        if (window.location.search.match(/(\\?|\\&)notes/gi) !== null) {\n          openSpeakerWindow();\n        } else {\n          // Keep listening for speaker view hearbeats. If we receive a\n          // heartbeat from an orphaned window, reconnect it. This ensures\n          // that we remain connected to the notes even if the presentation\n          // is reloaded.\n          window.addEventListener('message', event => {\n            if (!speakerWindow && typeof event.data === 'string') {\n              let data;\n              try {\n                data = JSON.parse(event.data);\n              } catch (error) {}\n              if (data && data.namespace === 'reveal-notes' && data.type === 'heartbeat') {\n                reconnectSpeakerWindow(event.source);\n              }\n            }\n          });\n        }\n\n        // Open the notes when the 's' key is hit\n        deck.addKeyBinding({\n          keyCode: 83,\n          key: 'S',\n          description: 'Speaker notes view'\n        }, function () {\n          openSpeakerWindow();\n        });\n      }\n    },\n    open: openSpeakerWindow\n  };\n};\n_c = Plugin;\nexport default Plugin;\nvar _c;\n$RefreshReg$(_c, \"Plugin\");","map":{"version":3,"names":["speakerViewHTML","marked","Plugin","connectInterval","speakerWindow","deck","openSpeakerWindow","closed","focus","window","open","document","write","alert","connect","reconnectSpeakerWindow","reconnectWindow","addEventListener","onPostMessage","onConnected","presentationURL","getConfig","url","location","protocol","host","pathname","search","setInterval","postMessage","JSON","stringify","namespace","type","state","getState","callRevealApi","methodName","methodArguments","callId","result","apply","post","event","slideElement","getCurrentSlide","notesElements","querySelectorAll","fragmentElement","querySelector","messageData","notes","markdown","whitespace","hasAttribute","getAttribute","fragmentNotes","innerHTML","Array","from","map","notesElement","join","isSameOriginEvent","origin","source","error","data","parse","clearInterval","arguments","on","id","init","reveal","test","match","addKeyBinding","keyCode","key","description","_c","$RefreshReg$"],"sources":["/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/src/plugin.js"],"sourcesContent":["import speakerViewHTML from './speaker-view.html'\n\nimport { marked } from 'marked';\n\n/**\n * Handles opening of and synchronization with the reveal.js\n * notes window.\n *\n * Handshake process:\n * 1. This window posts 'connect' to notes window\n *    - Includes URL of presentation to show\n * 2. Notes window responds with 'connected' when it is available\n * 3. This window proceeds to send the current presentation state\n *    to the notes window\n */\nconst Plugin = () => {\n\n\tlet connectInterval;\n\tlet speakerWindow = null;\n\tlet deck;\n\n\t/**\n\t * Opens a new speaker view window.\n\t */\n\tfunction openSpeakerWindow() {\n\n\t\t// If a window is already open, focus it\n\t\tif( speakerWindow && !speakerWindow.closed ) {\n\t\t\tspeakerWindow.focus();\n\t\t}\n\t\telse {\n\t\t\tspeakerWindow = window.open( 'about:blank', 'reveal.js - Notes', 'width=1100,height=700' );\n\t\t\tspeakerWindow.marked = marked;\n\t\t\tspeakerWindow.document.write( speakerViewHTML );\n\n\t\t\tif( !speakerWindow ) {\n\t\t\t\talert( 'Speaker view popup failed to open. Please make sure popups are allowed and reopen the speaker view.' );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconnect();\n\t\t}\n\n\t}\n\n\t/**\n\t * Reconnect with an existing speaker view window.\n\t */\n\tfunction reconnectSpeakerWindow( reconnectWindow ) {\n\n\t\tif( speakerWindow && !speakerWindow.closed ) {\n\t\t\tspeakerWindow.focus();\n\t\t}\n\t\telse {\n\t\t\tspeakerWindow = reconnectWindow;\n\t\t\twindow.addEventListener( 'message', onPostMessage );\n\t\t\tonConnected();\n\t\t}\n\n\t}\n\n\t/**\n\t\t* Connect to the notes window through a postmessage handshake.\n\t\t* Using postmessage enables us to work in situations where the\n\t\t* origins differ, such as a presentation being opened from the\n\t\t* file system.\n\t\t*/\n\tfunction connect() {\n\n\t\tconst presentationURL = deck.getConfig().url;\n\n\t\tconst url = typeof presentationURL === 'string' ? presentationURL :\n\t\t\t\t\t\t\t\twindow.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search;\n\n\t\t// Keep trying to connect until we get a 'connected' message back\n\t\tconnectInterval = setInterval( function() {\n\t\t\tspeakerWindow.postMessage( JSON.stringify( {\n\t\t\t\tnamespace: 'reveal-notes',\n\t\t\t\ttype: 'connect',\n\t\t\t\tstate: deck.getState(),\n\t\t\t\turl\n\t\t\t} ), '*' );\n\t\t}, 500 );\n\n\t\twindow.addEventListener( 'message', onPostMessage );\n\n\t}\n\n\t/**\n\t * Calls the specified Reveal.js method with the provided argument\n\t * and then pushes the result to the notes frame.\n\t */\n\tfunction callRevealApi( methodName, methodArguments, callId ) {\n\n\t\tlet result = deck[methodName].apply( deck, methodArguments );\n\t\tspeakerWindow.postMessage( JSON.stringify( {\n\t\t\tnamespace: 'reveal-notes',\n\t\t\ttype: 'return',\n\t\t\tresult,\n\t\t\tcallId\n\t\t} ), '*' );\n\n\t}\n\n\t/**\n\t * Posts the current slide data to the notes window.\n\t */\n\tfunction post( event ) {\n\n\t\tlet slideElement = deck.getCurrentSlide(),\n\t\t\tnotesElements = slideElement.querySelectorAll( 'aside.notes' ),\n\t\t\tfragmentElement = slideElement.querySelector( '.current-fragment' );\n\n\t\tlet messageData = {\n\t\t\tnamespace: 'reveal-notes',\n\t\t\ttype: 'state',\n\t\t\tnotes: '',\n\t\t\tmarkdown: false,\n\t\t\twhitespace: 'normal',\n\t\t\tstate: deck.getState()\n\t\t};\n\n\t\t// Look for notes defined in a slide attribute\n\t\tif( slideElement.hasAttribute( 'data-notes' ) ) {\n\t\t\tmessageData.notes = slideElement.getAttribute( 'data-notes' );\n\t\t\tmessageData.whitespace = 'pre-wrap';\n\t\t}\n\n\t\t// Look for notes defined in a fragment\n\t\tif( fragmentElement ) {\n\t\t\tlet fragmentNotes = fragmentElement.querySelector( 'aside.notes' );\n\t\t\tif( fragmentNotes ) {\n\t\t\t\tmessageData.notes = fragmentNotes.innerHTML;\n\t\t\t\tmessageData.markdown = typeof fragmentNotes.getAttribute( 'data-markdown' ) === 'string';\n\n\t\t\t\t// Ignore other slide notes\n\t\t\t\tnotesElements = null;\n\t\t\t}\n\t\t\telse if( fragmentElement.hasAttribute( 'data-notes' ) ) {\n\t\t\t\tmessageData.notes = fragmentElement.getAttribute( 'data-notes' );\n\t\t\t\tmessageData.whitespace = 'pre-wrap';\n\n\t\t\t\t// In case there are slide notes\n\t\t\t\tnotesElements = null;\n\t\t\t}\n\t\t}\n\n\t\t// Look for notes defined in an aside element\n\t\tif( notesElements ) {\n\t\t\tmessageData.notes = Array.from(notesElements).map( notesElement => notesElement.innerHTML ).join( '\\n' );\n\t\t\tmessageData.markdown = notesElements[0] && typeof notesElements[0].getAttribute( 'data-markdown' ) === 'string';\n\t\t}\n\n\t\tspeakerWindow.postMessage( JSON.stringify( messageData ), '*' );\n\n\t}\n\n\t/**\n\t * Check if the given event is from the same origin as the\n\t * current window.\n\t */\n\tfunction isSameOriginEvent( event ) {\n\n\t\ttry {\n\t\t\treturn window.location.origin === event.source.location.origin;\n\t\t}\n\t\tcatch ( error ) {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\tfunction onPostMessage( event ) {\n\n\t\t// Only allow same-origin messages\n\t\t// (added 12/5/22 as a XSS safeguard)\n\t\tif( isSameOriginEvent( event ) ) {\n\n\t\t\tlet data = JSON.parse( event.data );\n\t\t\tif( data && data.namespace === 'reveal-notes' && data.type === 'connected' ) {\n\t\t\t\tclearInterval( connectInterval );\n\t\t\t\tonConnected();\n\t\t\t}\n\t\t\telse if( data && data.namespace === 'reveal-notes' && data.type === 'call' ) {\n\t\t\t\tcallRevealApi( data.methodName, data.arguments, data.callId );\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Called once we have established a connection to the notes\n\t * window.\n\t */\n\tfunction onConnected() {\n\n\t\t// Monitor events that trigger a change in state\n\t\tdeck.on( 'slidechanged', post );\n\t\tdeck.on( 'fragmentshown', post );\n\t\tdeck.on( 'fragmenthidden', post );\n\t\tdeck.on( 'overviewhidden', post );\n\t\tdeck.on( 'overviewshown', post );\n\t\tdeck.on( 'paused', post );\n\t\tdeck.on( 'resumed', post );\n\n\t\t// Post the initial state\n\t\tpost();\n\n\t}\n\n\treturn {\n\t\tid: 'notes',\n\n\t\tinit: function( reveal ) {\n\n\t\t\tdeck = reveal;\n\n\t\t\tif( !/receiver/i.test( window.location.search ) ) {\n\n\t\t\t\t// If the there's a 'notes' query set, open directly\n\t\t\t\tif( window.location.search.match( /(\\?|\\&)notes/gi ) !== null ) {\n\t\t\t\t\topenSpeakerWindow();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Keep listening for speaker view hearbeats. If we receive a\n\t\t\t\t\t// heartbeat from an orphaned window, reconnect it. This ensures\n\t\t\t\t\t// that we remain connected to the notes even if the presentation\n\t\t\t\t\t// is reloaded.\n\t\t\t\t\twindow.addEventListener( 'message', event => {\n\n\t\t\t\t\t\tif( !speakerWindow && typeof event.data === 'string' ) {\n\t\t\t\t\t\t\tlet data;\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdata = JSON.parse( event.data );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch( error ) {}\n\n\t\t\t\t\t\t\tif( data && data.namespace === 'reveal-notes' && data.type === 'heartbeat' ) {\n\t\t\t\t\t\t\t\treconnectSpeakerWindow( event.source );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Open the notes when the 's' key is hit\n\t\t\t\tdeck.addKeyBinding({keyCode: 83, key: 'S', description: 'Speaker notes view'}, function() {\n\t\t\t\t\topenSpeakerWindow();\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t},\n\n\t\topen: openSpeakerWindow\n\t};\n\n};\n\nexport default Plugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}