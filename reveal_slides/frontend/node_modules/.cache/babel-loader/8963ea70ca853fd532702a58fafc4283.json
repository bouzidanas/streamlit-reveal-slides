{"ast":null,"code":"import _regeneratorRuntime from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(iterateBits);\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nexport function getBool(_data, _index, byte, bit) {\n  return (byte & 1 << bit) !== 0;\n}\n/** @ignore */\nexport function getBit(_data, _index, byte, bit) {\n  return (byte & 1 << bit) >> bit;\n}\n/** @ignore */\nexport function setBool(bytes, index, value) {\n  return value ? !!(bytes[index >> 3] |= 1 << index % 8) || true : !(bytes[index >> 3] &= ~(1 << index % 8)) && false;\n}\n/** @ignore */\nexport function truncateBitmap(offset, length, bitmap) {\n  var alignedSize = bitmap.byteLength + 7 & ~7;\n  if (offset > 0 || bitmap.byteLength < alignedSize) {\n    var bytes = new Uint8Array(alignedSize);\n    // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n    bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n    // Otherwise iterate each bit from the offset and return a new one\n    packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n    return bytes;\n  }\n  return bitmap;\n}\n/** @ignore */\nexport function packBools(values) {\n  var xs = [];\n  var i = 0,\n    bit = 0,\n    byte = 0;\n  var _iterator = _createForOfIteratorHelper(values),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var value = _step.value;\n      value && (byte |= 1 << bit);\n      if (++bit === 8) {\n        xs[i++] = byte;\n        byte = bit = 0;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (i === 0 || bit > 0) {\n    xs[i++] = byte;\n  }\n  var b = new Uint8Array(xs.length + 7 & ~7);\n  b.set(xs);\n  return b;\n}\n/** @ignore */\nexport function iterateBits(bytes, begin, length, context, get) {\n  var bit, byteIndex, index, remaining, byte;\n  return _regeneratorRuntime().wrap(function iterateBits$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        bit = begin % 8;\n        byteIndex = begin >> 3;\n        index = 0, remaining = length;\n      case 3:\n        if (!(remaining > 0)) {\n          _context.next = 11;\n          break;\n        }\n        byte = bytes[byteIndex++];\n      case 5:\n        _context.next = 7;\n        return get(context, index++, byte, bit);\n      case 7:\n        if (--remaining > 0 && ++bit < 8) {\n          _context.next = 5;\n          break;\n        }\n      case 8:\n        bit = 0;\n        _context.next = 3;\n        break;\n      case 11:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data, lhs, rhs) {\n  if (rhs - lhs <= 0) {\n    return 0;\n  }\n  // If the bit range is less than one byte, sum the 1 bits in the bit range\n  if (rhs - lhs < 8) {\n    var sum = 0;\n    var _iterator2 = _createForOfIteratorHelper(iterateBits(data, lhs, rhs - lhs, data, getBit)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var bit = _step2.value;\n        sum += bit;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return sum;\n  }\n  // Get the next lowest multiple of 8 from the right hand side\n  var rhsInside = rhs >> 3 << 3;\n  // Get the next highest multiple of 8 from the left hand side\n  var lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n  return (\n    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) +\n    // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n    popcnt_bit_range(data, rhsInside, rhs) +\n    // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n    popcnt_array(data, lhsInside >> 3, rhsInside - lhsInside >> 3)\n  );\n}\n/** @ignore */\nexport function popcnt_array(arr, byteOffset, byteLength) {\n  var cnt = 0,\n    pos = byteOffset | 0;\n  var view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n  var len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n  while (len - pos >= 4) {\n    cnt += popcnt_uint32(view.getUint32(pos));\n    pos += 4;\n  }\n  while (len - pos >= 2) {\n    cnt += popcnt_uint32(view.getUint16(pos));\n    pos += 2;\n  }\n  while (len - pos >= 1) {\n    cnt += popcnt_uint32(view.getUint8(pos));\n    pos += 1;\n  }\n  return cnt;\n}\n/** @ignore */\nexport function popcnt_uint32(uint32) {\n  var i = uint32 | 0;\n  i = i - (i >>> 1 & 0x55555555);\n  i = (i & 0x33333333) + (i >>> 2 & 0x33333333);\n  return (i + (i >>> 4) & 0x0F0F0F0F) * 0x01010101 >>> 24;\n}","map":{"version":3,"names":["iterateBits","getBool","_data","_index","byte","bit","getBit","setBool","bytes","index","value","truncateBitmap","offset","length","bitmap","alignedSize","byteLength","Uint8Array","set","subarray","packBools","values","xs","i","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","b","begin","context","get","byteIndex","remaining","_regeneratorRuntime","wrap","iterateBits$","_context","prev","next","stop","_marked","popcnt_bit_range","data","lhs","rhs","sum","_iterator2","_step2","rhsInside","lhsInside","popcnt_array","arr","byteOffset","cnt","pos","view","DataView","buffer","len","popcnt_uint32","getUint32","getUint16","getUint8","uint32"],"sources":["util/bit.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n"],"mappings":";;sDAkEiBA,WAAW;AAlE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAM,SAAUC,OAAOA,CAACC,KAAU,EAAEC,MAAc,EAAEC,IAAY,EAAEC,GAAW;EACzE,OAAO,CAACD,IAAI,GAAG,CAAC,IAAIC,GAAG,MAAM,CAAC;AAClC;AAEA;AACA,OAAM,SAAUC,MAAMA,CAACJ,KAAU,EAAEC,MAAc,EAAEC,IAAY,EAAEC,GAAW;EACxE,OAAO,CAACD,IAAI,GAAG,CAAC,IAAIC,GAAG,KAAKA,GAAc;AAC9C;AAEA;AACA,OAAM,SAAUE,OAAOA,CAACC,KAAiB,EAAEC,KAAa,EAAEC,KAAU;EAChE,OAAOA,KAAK,GACR,CAAC,EAAEF,KAAK,CAACC,KAAK,IAAI,CAAC,CAAC,IAAM,CAAC,IAAKA,KAAK,GAAG,CAAG,CAAC,IAAI,IAAI,GACpD,EAAED,KAAK,CAACC,KAAK,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,IAAKA,KAAK,GAAG,CAAE,CAAC,CAAC,IAAI,KAAK;AAC5D;AAEA;AACA,OAAM,SAAUE,cAAcA,CAACC,MAAc,EAAEC,MAAc,EAAEC,MAAkB;EAC7E,IAAMC,WAAW,GAAID,MAAM,CAACE,UAAU,GAAG,CAAC,GAAI,CAAC,CAAC;EAChD,IAAIJ,MAAM,GAAG,CAAC,IAAIE,MAAM,CAACE,UAAU,GAAGD,WAAW,EAAE;IAC/C,IAAMP,KAAK,GAAG,IAAIS,UAAU,CAACF,WAAW,CAAC;IACzC;IACAP,KAAK,CAACU,GAAG,CAACN,MAAM,GAAG,CAAC,KAAK,CAAC,GAAGE,MAAM,CAACK,QAAQ,CAACP,MAAM,IAAI,CAAC,CAAC;IACrD;IACAQ,SAAS,CAACpB,WAAW,CAACc,MAAM,EAAEF,MAAM,EAAEC,MAAM,EAAE,IAAI,EAAEZ,OAAO,CAAC,CAAC,CAACkB,QAAQ,CAAC,CAAC,EAAEJ,WAAW,CAAC,CAAC;IAC3F,OAAOP,KAAK;;EAEhB,OAAOM,MAAM;AACjB;AAEA;AACA,OAAM,SAAUM,SAASA,CAACC,MAAqB;EAC3C,IAAIC,EAAE,GAAa,EAAE;EACrB,IAAIC,CAAC,GAAG,CAAC;IAAElB,GAAG,GAAG,CAAC;IAAED,IAAI,GAAG,CAAC;EAAC,IAAAoB,SAAA,GAAAC,0BAAA,CACTJ,MAAM;IAAAK,KAAA;EAAA;IAA1B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA4B;MAAA,IAAjBnB,KAAK,GAAAgB,KAAA,CAAAhB,KAAA;MACZA,KAAK,KAAKN,IAAI,IAAI,CAAC,IAAIC,GAAG,CAAC;MAC3B,IAAI,EAAEA,GAAG,KAAK,CAAC,EAAE;QACbiB,EAAE,CAACC,CAAC,EAAE,CAAC,GAAGnB,IAAI;QACdA,IAAI,GAAGC,GAAG,GAAG,CAAC;;;EAErB,SAAAyB,GAAA;IAAAN,SAAA,CAAAO,CAAA,CAAAD,GAAA;EAAA;IAAAN,SAAA,CAAAQ,CAAA;EAAA;EACD,IAAIT,CAAC,KAAK,CAAC,IAAIlB,GAAG,GAAG,CAAC,EAAE;IAAEiB,EAAE,CAACC,CAAC,EAAE,CAAC,GAAGnB,IAAI;;EACxC,IAAI6B,CAAC,GAAG,IAAIhB,UAAU,CAAEK,EAAE,CAACT,MAAM,GAAG,CAAC,GAAI,CAAC,CAAC,CAAC;EAC5CoB,CAAC,CAACf,GAAG,CAACI,EAAE,CAAC;EACT,OAAOW,CAAC;AACZ;AAEA;AACA,OAAM,SAAWjC,WAAWA,CAAIQ,KAAiB,EAAE0B,KAAa,EAAErB,MAAc,EAAEsB,OAAY,EAC9DC,GAAkE;EAAA,IAAA/B,GAAA,EAAAgC,SAAA,EAAA5B,KAAA,EAAA6B,SAAA,EAAAlC,IAAA;EAAA,OAAAmC,mBAAA,GAAAC,IAAA,UAAAC,aAAAC,QAAA;IAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;MAAA;QAC1FvC,GAAG,GAAG6B,KAAK,GAAG,CAAC;QACfG,SAAS,GAAGH,KAAK,IAAI,CAAC;QACtBzB,KAAK,GAAG,CAAC,EAAE6B,SAAS,GAAGzB,MAAM;MAAA;QAAA,MAC1ByB,SAAS,GAAG,CAAC;UAAAI,QAAA,CAAAE,IAAA;UAAA;QAAA;QACZxC,IAAI,GAAGI,KAAK,CAAC6B,SAAS,EAAE,CAAC;MAAA;QAAAK,QAAA,CAAAE,IAAA;QAEzB,OAAMR,GAAG,CAACD,OAAO,EAAE1B,KAAK,EAAE,EAAEL,IAAI,EAAEC,GAAG,CAAC;MAAA;QAAA,IACjC,EAAEiC,SAAS,GAAG,CAAC,IAAI,EAAEjC,GAAG,GAAG,CAAC;UAAAqC,QAAA,CAAAE,IAAA;UAAA;QAAA;MAAA;QAJnBvC,GAAG,GAAG,CAAC;QAAAqC,QAAA,CAAAE,IAAA;QAAA;MAAA;MAAA;QAAA,OAAAF,QAAA,CAAAG,IAAA;IAAA;EAAA,GAAAC,OAAA;AAAA;AAQjC;;;;;;AAMA;AACA,OAAM,SAAUC,gBAAgBA,CAACC,IAAgB,EAAEC,GAAW,EAAEC,GAAW;EACvE,IAAIA,GAAG,GAAGD,GAAG,IAAI,CAAC,EAAE;IAAE,OAAO,CAAC;;EAC9B;EACA,IAAIC,GAAG,GAAGD,GAAG,GAAG,CAAC,EAAE;IACf,IAAIE,GAAG,GAAG,CAAC;IAAC,IAAAC,UAAA,GAAA3B,0BAAA,CACMzB,WAAW,CAACgD,IAAI,EAAEC,GAAG,EAAEC,GAAG,GAAGD,GAAG,EAAED,IAAI,EAAE1C,MAAM,CAAC;MAAA+C,MAAA;IAAA;MAAjE,KAAAD,UAAA,CAAAzB,CAAA,MAAA0B,MAAA,GAAAD,UAAA,CAAAxB,CAAA,IAAAC,IAAA,GAAmE;QAAA,IAAxDxB,GAAG,GAAAgD,MAAA,CAAA3C,KAAA;QACVyC,GAAG,IAAI9C,GAAG;;IACb,SAAAyB,GAAA;MAAAsB,UAAA,CAAArB,CAAA,CAAAD,GAAA;IAAA;MAAAsB,UAAA,CAAApB,CAAA;IAAA;IACD,OAAOmB,GAAG;;EAEd;EACA,IAAMG,SAAS,GAAGJ,GAAG,IAAI,CAAC,IAAI,CAAC;EAC/B;EACA,IAAMK,SAAS,GAAGN,GAAG,IAAIA,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG,GAAG,CAAC,CAAC;EACzD;IACI;IACAF,gBAAgB,CAACC,IAAI,EAAEC,GAAG,EAAEM,SAAS,CAAC;IACtC;IACAR,gBAAgB,CAACC,IAAI,EAAEM,SAAS,EAAEJ,GAAG,CAAC;IACtC;IACAM,YAAY,CAACR,IAAI,EAAEO,SAAS,IAAI,CAAC,EAAGD,SAAS,GAAGC,SAAS,IAAK,CAAC;EAAC;AAExE;AAEA;AACA,OAAM,SAAUC,YAAYA,CAACC,GAAoB,EAAEC,UAAmB,EAAE1C,UAAmB;EACvF,IAAI2C,GAAG,GAAG,CAAC;IAAEC,GAAG,GAAGF,UAAW,GAAG,CAAC;EAClC,IAAMG,IAAI,GAAG,IAAIC,QAAQ,CAACL,GAAG,CAACM,MAAM,EAAEN,GAAG,CAACC,UAAU,EAAED,GAAG,CAACzC,UAAU,CAAC;EACrE,IAAMgD,GAAG,GAAIhD,UAAU,KAAK,KAAK,CAAC,GAAGyC,GAAG,CAACzC,UAAU,GAAG4C,GAAG,GAAG5C,UAAU;EACtE,OAAOgD,GAAG,GAAGJ,GAAG,IAAI,CAAC,EAAE;IACnBD,GAAG,IAAIM,aAAa,CAACJ,IAAI,CAACK,SAAS,CAACN,GAAG,CAAC,CAAC;IACzCA,GAAG,IAAI,CAAC;;EAEZ,OAAOI,GAAG,GAAGJ,GAAG,IAAI,CAAC,EAAE;IACnBD,GAAG,IAAIM,aAAa,CAACJ,IAAI,CAACM,SAAS,CAACP,GAAG,CAAC,CAAC;IACzCA,GAAG,IAAI,CAAC;;EAEZ,OAAOI,GAAG,GAAGJ,GAAG,IAAI,CAAC,EAAE;IACnBD,GAAG,IAAIM,aAAa,CAACJ,IAAI,CAACO,QAAQ,CAACR,GAAG,CAAC,CAAC;IACxCA,GAAG,IAAI,CAAC;;EAEZ,OAAOD,GAAG;AACd;AAEA;AACA,OAAM,SAAUM,aAAaA,CAACI,MAAc;EACxC,IAAI9C,CAAC,GAAG8C,MAAM,GAAG,CAAC;EAClB9C,CAAC,GAAGA,CAAC,IAAKA,CAAC,KAAK,CAAC,GAAI,UAAU,CAAC;EAChCA,CAAC,GAAG,CAACA,CAAC,GAAG,UAAU,KAAMA,CAAC,KAAK,CAAC,GAAI,UAAU,CAAC;EAC/C,OAAQ,CAAEA,CAAC,IAAIA,CAAC,KAAK,CAAC,CAAC,GAAI,UAAU,IAAI,UAAU,KAAM,EAAE;AAC/D"},"metadata":{},"sourceType":"module"}