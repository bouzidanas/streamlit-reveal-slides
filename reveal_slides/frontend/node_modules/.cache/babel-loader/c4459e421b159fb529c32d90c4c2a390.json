{"ast":null,"code":"import _get from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\n/** @ignore */\nvar roundLengthUpToNearest64Bytes = function roundLengthUpToNearest64Bytes(len, BPE) {\n  return (len * BPE + 63 & ~63 || 64) / BPE;\n};\n/** @ignore */\nvar sliceOrExtendArray = function sliceOrExtendArray(arr) {\n  var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return arr.length >= len ? arr.subarray(0, len) : memcpy(new arr.constructor(len), arr, 0);\n};\n/** @ignore */\nexport var BufferBuilder = /*#__PURE__*/function () {\n  function BufferBuilder(buffer) {\n    var stride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    _classCallCheck(this, BufferBuilder);\n    this.buffer = buffer;\n    this.stride = stride;\n    this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n    this.ArrayType = buffer.constructor;\n    this._resize(this.length = buffer.length / stride | 0);\n  }\n  _createClass(BufferBuilder, [{\n    key: \"byteLength\",\n    get: function get() {\n      return this.length * this.stride * this.BYTES_PER_ELEMENT | 0;\n    }\n  }, {\n    key: \"reservedLength\",\n    get: function get() {\n      return this.buffer.length / this.stride;\n    }\n  }, {\n    key: \"reservedByteLength\",\n    get: function get() {\n      return this.buffer.byteLength;\n    }\n    // @ts-ignore\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      return this;\n    }\n  }, {\n    key: \"append\",\n    value: function append(value) {\n      return this.set(this.length, value);\n    }\n  }, {\n    key: \"reserve\",\n    value: function reserve(extra) {\n      if (extra > 0) {\n        this.length += extra;\n        var stride = this.stride;\n        var length = this.length * stride;\n        var reserved = this.buffer.length;\n        if (length >= reserved) {\n          this._resize(reserved === 0 ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT) : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;\n      length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n      var array = sliceOrExtendArray(this.buffer, length);\n      this.clear();\n      return array;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.length = 0;\n      this._resize(0);\n      return this;\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(newLength) {\n      return this.buffer = memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n  }]);\n  return BufferBuilder;\n}();\nBufferBuilder.prototype.offset = 0;\n/** @ignore */\nexport var DataBufferBuilder = /*#__PURE__*/function (_BufferBuilder) {\n  _inherits(DataBufferBuilder, _BufferBuilder);\n  var _super = _createSuper(DataBufferBuilder);\n  function DataBufferBuilder() {\n    _classCallCheck(this, DataBufferBuilder);\n    return _super.apply(this, arguments);\n  }\n  _createClass(DataBufferBuilder, [{\n    key: \"last\",\n    value: function last() {\n      return this.get(this.length - 1);\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this.buffer[index];\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.reserve(index - this.length + 1);\n      this.buffer[index * this.stride] = value;\n      return this;\n    }\n  }]);\n  return DataBufferBuilder;\n}(BufferBuilder);\n/** @ignore */\nexport var BitmapBufferBuilder = /*#__PURE__*/function (_DataBufferBuilder) {\n  _inherits(BitmapBufferBuilder, _DataBufferBuilder);\n  var _super2 = _createSuper(BitmapBufferBuilder);\n  function BitmapBufferBuilder() {\n    var _this;\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array(0);\n    _classCallCheck(this, BitmapBufferBuilder);\n    _this = _super2.call(this, data, 1 / 8);\n    _this.numValid = 0;\n    return _this;\n  }\n  _createClass(BitmapBufferBuilder, [{\n    key: \"numInvalid\",\n    get: function get() {\n      return this.length - this.numValid;\n    }\n  }, {\n    key: \"get\",\n    value: function get(idx) {\n      return this.buffer[idx >> 3] >> idx % 8 & 1;\n    }\n  }, {\n    key: \"set\",\n    value: function set(idx, val) {\n      var _this$reserve = this.reserve(idx - this.length + 1),\n        buffer = _this$reserve.buffer;\n      var byte = idx >> 3,\n        bit = idx % 8,\n        cur = buffer[byte] >> bit & 1;\n      // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n      // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n      val ? cur === 0 && (buffer[byte] |= 1 << bit, ++this.numValid) : cur === 1 && (buffer[byte] &= ~(1 << bit), --this.numValid);\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.numValid = 0;\n      return _get(_getPrototypeOf(BitmapBufferBuilder.prototype), \"clear\", this).call(this);\n    }\n  }]);\n  return BitmapBufferBuilder;\n}(DataBufferBuilder);\n/** @ignore */\nexport var OffsetsBufferBuilder = /*#__PURE__*/function (_DataBufferBuilder2) {\n  _inherits(OffsetsBufferBuilder, _DataBufferBuilder2);\n  var _super3 = _createSuper(OffsetsBufferBuilder);\n  function OffsetsBufferBuilder() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Int32Array(1);\n    _classCallCheck(this, OffsetsBufferBuilder);\n    return _super3.call(this, data, 1);\n  }\n  _createClass(OffsetsBufferBuilder, [{\n    key: \"append\",\n    value: function append(value) {\n      return this.set(this.length - 1, value);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      var offset = this.length - 1;\n      var buffer = this.reserve(index - offset + 1).buffer;\n      if (offset < index++) {\n        buffer.fill(buffer[offset], offset, index);\n      }\n      buffer[index] = buffer[index - 1] + value;\n      return this;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length - 1;\n      if (length > this.length) {\n        this.set(length - 1, 0);\n      }\n      return _get(_getPrototypeOf(OffsetsBufferBuilder.prototype), \"flush\", this).call(this, length + 1);\n    }\n  }]);\n  return OffsetsBufferBuilder;\n}(DataBufferBuilder);\n/** @ignore */\nexport var WideBufferBuilder = /*#__PURE__*/function (_BufferBuilder2) {\n  _inherits(WideBufferBuilder, _BufferBuilder2);\n  var _super4 = _createSuper(WideBufferBuilder);\n  function WideBufferBuilder() {\n    _classCallCheck(this, WideBufferBuilder);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(WideBufferBuilder, [{\n    key: \"ArrayType64\",\n    get: function get() {\n      return this._ArrayType64 || (this._ArrayType64 = this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.reserve(index - this.length + 1);\n      switch (typeof value) {\n        case 'bigint':\n          this.buffer64[index] = value;\n          break;\n        case 'number':\n          this.buffer[index * this.stride] = value;\n          break;\n        default:\n          this.buffer.set(value, index * this.stride);\n      }\n      return this;\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(newLength) {\n      var data = _get(_getPrototypeOf(WideBufferBuilder.prototype), \"_resize\", this).call(this, newLength);\n      var length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n      if (BigIntAvailable) {\n        this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n      }\n      return data;\n    }\n  }]);\n  return WideBufferBuilder;\n}(BufferBuilder);","map":{"version":3,"names":["memcpy","BigIntAvailable","BigInt64Array","BigUint64Array","roundLengthUpToNearest64Bytes","len","BPE","sliceOrExtendArray","arr","arguments","length","undefined","subarray","constructor","BufferBuilder","buffer","stride","_classCallCheck","BYTES_PER_ELEMENT","ArrayType","_resize","_createClass","key","get","byteLength","value","set","index","append","reserve","extra","reserved","flush","array","clear","newLength","prototype","offset","DataBufferBuilder","_BufferBuilder","_inherits","_super","_createSuper","apply","last","BitmapBufferBuilder","_DataBufferBuilder","_super2","_this","data","Uint8Array","call","numValid","idx","val","_this$reserve","byte","bit","cur","_get","_getPrototypeOf","OffsetsBufferBuilder","_DataBufferBuilder2","_super3","Int32Array","fill","WideBufferBuilder","_BufferBuilder2","_super4","_ArrayType64","buffer64","ArrayType64","byteOffset"],"sources":["builder/buffer.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}