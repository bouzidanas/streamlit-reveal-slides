{"ast":null,"code":"import _inherits from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nvar carryBit16 = 1 << 16;\n/** @ignore */\nfunction intAsHex(value) {\n  if (value < 0) {\n    value = 0xFFFFFFFF + value + 1;\n  }\n  return \"0x\".concat(value.toString(16));\n}\n/** @ignore */\nvar kInt32DecimalDigits = 8;\n/** @ignore */\nvar kPowersOfTen = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];\n/** @ignore */\nexport var BaseInt64 = /*#__PURE__*/function () {\n  function BaseInt64(buffer) {\n    _classCallCheck(this, BaseInt64);\n    this.buffer = buffer;\n  }\n  _createClass(BaseInt64, [{\n    key: \"high\",\n    value: function high() {\n      return this.buffer[1];\n    }\n  }, {\n    key: \"low\",\n    value: function low() {\n      return this.buffer[0];\n    }\n  }, {\n    key: \"_times\",\n    value: function _times(other) {\n      // Break the left and right numbers into 16 bit chunks\n      // so that we can multiply them without overflow.\n      var L = new Uint32Array([this.buffer[1] >>> 16, this.buffer[1] & 0xFFFF, this.buffer[0] >>> 16, this.buffer[0] & 0xFFFF]);\n      var R = new Uint32Array([other.buffer[1] >>> 16, other.buffer[1] & 0xFFFF, other.buffer[0] >>> 16, other.buffer[0] & 0xFFFF]);\n      var product = L[3] * R[3];\n      this.buffer[0] = product & 0xFFFF;\n      var sum = product >>> 16;\n      product = L[2] * R[3];\n      sum += product;\n      product = L[3] * R[2] >>> 0;\n      sum += product;\n      this.buffer[0] += sum << 16;\n      this.buffer[1] = sum >>> 0 < product ? carryBit16 : 0;\n      this.buffer[1] += sum >>> 16;\n      this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n      this.buffer[1] += L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0] << 16;\n      return this;\n    }\n  }, {\n    key: \"_plus\",\n    value: function _plus(other) {\n      var sum = this.buffer[0] + other.buffer[0] >>> 0;\n      this.buffer[1] += other.buffer[1];\n      if (sum < this.buffer[0] >>> 0) {\n        ++this.buffer[1];\n      }\n      this.buffer[0] = sum;\n    }\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(other) {\n      return this.buffer[1] < other.buffer[1] || this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0];\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n  }, {\n    key: \"greaterThan\",\n    value: function greaterThan(other) {\n      return other.lessThan(this);\n    }\n  }, {\n    key: \"hex\",\n    value: function hex() {\n      return \"\".concat(intAsHex(this.buffer[1]), \" \").concat(intAsHex(this.buffer[0]));\n    }\n  }]);\n  return BaseInt64;\n}();\n/** @ignore */\nexport var Uint64 = /*#__PURE__*/function (_BaseInt) {\n  _inherits(Uint64, _BaseInt);\n  var _super = _createSuper(Uint64);\n  function Uint64() {\n    _classCallCheck(this, Uint64);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Uint64, [{\n    key: \"times\",\n    value: function times(other) {\n      this._times(other);\n      return this;\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(other) {\n      this._plus(other);\n      return this;\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"from\",\n    value: function from(val) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n      return Uint64.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromNumber\",\n    value: function fromNumber(num) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n      // Always parse numbers as strings - pulling out high and low bits\n      // directly seems to lose precision sometimes\n      // For example:\n      //     > -4613034156400212000 >>> 0\n      //     721782784\n      // The correct lower 32-bits are 721782752\n      return Uint64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromString\",\n    value: function fromString(str) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n      var length = str.length;\n      var out = new Uint64(out_buffer);\n      for (var posn = 0; posn < length;) {\n        var group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n        var chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n        var multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n        out.times(multiple);\n        out.plus(chunk);\n        posn += group;\n      }\n      return out;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"convertArray\",\n    value: function convertArray(values) {\n      var data = new Uint32Array(values.length * 2);\n      for (var i = -1, n = values.length; ++i < n;) {\n        Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n      }\n      return data;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"multiply\",\n    value: function multiply(left, right) {\n      var rtrn = new Uint64(new Uint32Array(left.buffer));\n      return rtrn.times(right);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"add\",\n    value: function add(left, right) {\n      var rtrn = new Uint64(new Uint32Array(left.buffer));\n      return rtrn.plus(right);\n    }\n  }]);\n  return Uint64;\n}(BaseInt64);\n/** @ignore */\nexport var Int64 = /*#__PURE__*/function (_BaseInt2) {\n  _inherits(Int64, _BaseInt2);\n  var _super2 = _createSuper(Int64);\n  function Int64() {\n    _classCallCheck(this, Int64);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(Int64, [{\n    key: \"negate\",\n    value: function negate() {\n      this.buffer[0] = ~this.buffer[0] + 1;\n      this.buffer[1] = ~this.buffer[1];\n      if (this.buffer[0] == 0) {\n        ++this.buffer[1];\n      }\n      return this;\n    }\n  }, {\n    key: \"times\",\n    value: function times(other) {\n      this._times(other);\n      return this;\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(other) {\n      this._plus(other);\n      return this;\n    }\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(other) {\n      // force high bytes to be signed\n      var this_high = this.buffer[1] << 0;\n      var other_high = other.buffer[1] << 0;\n      return this_high < other_high || this_high === other_high && this.buffer[0] < other.buffer[0];\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"from\",\n    value: function from(val) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n      return Int64.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromNumber\",\n    value: function fromNumber(num) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n      // Always parse numbers as strings - pulling out high and low bits\n      // directly seems to lose precision sometimes\n      // For example:\n      //     > -4613034156400212000 >>> 0\n      //     721782784\n      // The correct lower 32-bits are 721782752\n      return Int64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromString\",\n    value: function fromString(str) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n      // TODO: Assert that out_buffer is 0 and length = 2\n      var negate = str.startsWith('-');\n      var length = str.length;\n      var out = new Int64(out_buffer);\n      for (var posn = negate ? 1 : 0; posn < length;) {\n        var group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n        var chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n        var multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n        out.times(multiple);\n        out.plus(chunk);\n        posn += group;\n      }\n      return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"convertArray\",\n    value: function convertArray(values) {\n      var data = new Uint32Array(values.length * 2);\n      for (var i = -1, n = values.length; ++i < n;) {\n        Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n      }\n      return data;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"multiply\",\n    value: function multiply(left, right) {\n      var rtrn = new Int64(new Uint32Array(left.buffer));\n      return rtrn.times(right);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"add\",\n    value: function add(left, right) {\n      var rtrn = new Int64(new Uint32Array(left.buffer));\n      return rtrn.plus(right);\n    }\n  }]);\n  return Int64;\n}(BaseInt64);\n/** @ignore */\nexport var Int128 = /*#__PURE__*/function () {\n  function Int128(buffer) {\n    _classCallCheck(this, Int128);\n    this.buffer = buffer;\n    // buffer[3] MSB (high)\n    // buffer[2]\n    // buffer[1]\n    // buffer[0] LSB (low)\n  }\n  _createClass(Int128, [{\n    key: \"high\",\n    value: function high() {\n      return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n  }, {\n    key: \"low\",\n    value: function low() {\n      return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      this.buffer[0] = ~this.buffer[0] + 1;\n      this.buffer[1] = ~this.buffer[1];\n      this.buffer[2] = ~this.buffer[2];\n      this.buffer[3] = ~this.buffer[3];\n      if (this.buffer[0] == 0) {\n        ++this.buffer[1];\n      }\n      if (this.buffer[1] == 0) {\n        ++this.buffer[2];\n      }\n      if (this.buffer[2] == 0) {\n        ++this.buffer[3];\n      }\n      return this;\n    }\n  }, {\n    key: \"times\",\n    value: function times(other) {\n      // Break the left and right numbers into 32 bit chunks\n      // so that we can multiply them without overflow.\n      var L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n      var L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n      var L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n      var L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n      var R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n      var R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n      var R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n      var R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n      var product = Uint64.multiply(L3, R3);\n      this.buffer[0] = product.low();\n      var sum = new Uint64(new Uint32Array([product.high(), 0]));\n      product = Uint64.multiply(L2, R3);\n      sum.plus(product);\n      product = Uint64.multiply(L3, R2);\n      sum.plus(product);\n      this.buffer[1] = sum.low();\n      this.buffer[3] = sum.lessThan(product) ? 1 : 0;\n      this.buffer[2] = sum.high();\n      var high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n      high.plus(Uint64.multiply(L1, R3)).plus(Uint64.multiply(L2, R2)).plus(Uint64.multiply(L3, R1));\n      this.buffer[3] += Uint64.multiply(L0, R3).plus(Uint64.multiply(L1, R2)).plus(Uint64.multiply(L2, R1)).plus(Uint64.multiply(L3, R0)).low();\n      return this;\n    }\n  }, {\n    key: \"plus\",\n    value: function plus(other) {\n      var sums = new Uint32Array(4);\n      sums[3] = this.buffer[3] + other.buffer[3] >>> 0;\n      sums[2] = this.buffer[2] + other.buffer[2] >>> 0;\n      sums[1] = this.buffer[1] + other.buffer[1] >>> 0;\n      sums[0] = this.buffer[0] + other.buffer[0] >>> 0;\n      if (sums[0] < this.buffer[0] >>> 0) {\n        ++sums[1];\n      }\n      if (sums[1] < this.buffer[1] >>> 0) {\n        ++sums[2];\n      }\n      if (sums[2] < this.buffer[2] >>> 0) {\n        ++sums[3];\n      }\n      this.buffer[3] = sums[3];\n      this.buffer[2] = sums[2];\n      this.buffer[1] = sums[1];\n      this.buffer[0] = sums[0];\n      return this;\n    }\n  }, {\n    key: \"hex\",\n    value: function hex() {\n      return \"\".concat(intAsHex(this.buffer[3]), \" \").concat(intAsHex(this.buffer[2]), \" \").concat(intAsHex(this.buffer[1]), \" \").concat(intAsHex(this.buffer[0]));\n    }\n    /** @nocollapse */\n  }], [{\n    key: \"multiply\",\n    value: function multiply(left, right) {\n      var rtrn = new Int128(new Uint32Array(left.buffer));\n      return rtrn.times(right);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"add\",\n    value: function add(left, right) {\n      var rtrn = new Int128(new Uint32Array(left.buffer));\n      return rtrn.plus(right);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"from\",\n    value: function from(val) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);\n      return Int128.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromNumber\",\n    value: function fromNumber(num) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);\n      // Always parse numbers as strings - pulling out high and low bits\n      // directly seems to lose precision sometimes\n      // For example:\n      //     > -4613034156400212000 >>> 0\n      //     721782784\n      // The correct lower 32-bits are 721782752\n      return Int128.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"fromString\",\n    value: function fromString(str) {\n      var out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);\n      // TODO: Assert that out_buffer is 0 and length = 4\n      var negate = str.startsWith('-');\n      var length = str.length;\n      var out = new Int128(out_buffer);\n      for (var posn = negate ? 1 : 0; posn < length;) {\n        var group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n        var chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n        var multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n        out.times(multiple);\n        out.plus(chunk);\n        posn += group;\n      }\n      return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n  }, {\n    key: \"convertArray\",\n    value: function convertArray(values) {\n      // TODO: Distinguish between string and number at compile-time\n      var data = new Uint32Array(values.length * 4);\n      for (var i = -1, n = values.length; ++i < n;) {\n        Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n      }\n      return data;\n    }\n  }]);\n  return Int128;\n}();","map":{"version":3,"names":["carryBit16","intAsHex","value","concat","toString","kInt32DecimalDigits","kPowersOfTen","BaseInt64","buffer","_classCallCheck","_createClass","key","high","low","_times","other","L","Uint32Array","R","product","sum","_plus","lessThan","equals","greaterThan","hex","Uint64","_BaseInt","_inherits","_super","_createSuper","apply","arguments","times","plus","from","val","out_buffer","length","undefined","fromString","fromNumber","num","str","out","posn","group","chunk","parseInt","substr","multiple","convertArray","values","data","i","n","byteOffset","multiply","left","right","rtrn","add","Int64","_BaseInt2","_super2","negate","this_high","other_high","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","sums"],"sources":["util/int.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}