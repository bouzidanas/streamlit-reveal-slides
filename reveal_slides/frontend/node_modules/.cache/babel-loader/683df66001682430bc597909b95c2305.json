{"ast":null,"code":"import _classCallCheck from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\n/** @ignore */\nexport var VectorLoader = /*#__PURE__*/function (_Visitor) {\n  _inherits(VectorLoader, _Visitor);\n  var _super = _createSuper(VectorLoader);\n  function VectorLoader(bytes, nodes, buffers, dictionaries) {\n    var _this;\n    _classCallCheck(this, VectorLoader);\n    _this = _super.call(this);\n    _this.nodesIndex = -1;\n    _this.buffersIndex = -1;\n    _this.bytes = bytes;\n    _this.nodes = nodes;\n    _this.buffers = buffers;\n    _this.dictionaries = dictionaries;\n    return _this;\n  }\n  _createClass(VectorLoader, [{\n    key: \"visit\",\n    value: function visit(node) {\n      return _get(_getPrototypeOf(VectorLoader.prototype), \"visit\", this).call(this, node instanceof Field ? node.type : node);\n    }\n  }, {\n    key: \"visitNull\",\n    value: function visitNull(type) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref.length;\n      return Data.Null(type, 0, length);\n    }\n  }, {\n    key: \"visitBool\",\n    value: function visitBool(type) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref2.length,\n        nullCount = _ref2.nullCount;\n      return Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitInt\",\n    value: function visitInt(type) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref3.length,\n        nullCount = _ref3.nullCount;\n      return Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitFloat\",\n    value: function visitFloat(type) {\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref4.length,\n        nullCount = _ref4.nullCount;\n      return Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitUtf8\",\n    value: function visitUtf8(type) {\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref5.length,\n        nullCount = _ref5.nullCount;\n      return Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(type) {\n      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref6.length,\n        nullCount = _ref6.nullCount;\n      return Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));\n    }\n  }, {\n    key: \"visitFixedSizeBinary\",\n    value: function visitFixedSizeBinary(type) {\n      var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref7.length,\n        nullCount = _ref7.nullCount;\n      return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitDate\",\n    value: function visitDate(type) {\n      var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref8.length,\n        nullCount = _ref8.nullCount;\n      return Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitTimestamp\",\n    value: function visitTimestamp(type) {\n      var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref9.length,\n        nullCount = _ref9.nullCount;\n      return Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitTime\",\n    value: function visitTime(type) {\n      var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref10.length,\n        nullCount = _ref10.nullCount;\n      return Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitDecimal\",\n    value: function visitDecimal(type) {\n      var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref11.length,\n        nullCount = _ref11.nullCount;\n      return Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitList\",\n    value: function visitList(type) {\n      var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref12.length,\n        nullCount = _ref12.nullCount;\n      return Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n    }\n  }, {\n    key: \"visitStruct\",\n    value: function visitStruct(type) {\n      var _ref13 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref13.length,\n        nullCount = _ref13.nullCount;\n      return Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));\n    }\n  }, {\n    key: \"visitUnion\",\n    value: function visitUnion(type) {\n      return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type);\n    }\n  }, {\n    key: \"visitDenseUnion\",\n    value: function visitDenseUnion(type) {\n      var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref14.length,\n        nullCount = _ref14.nullCount;\n      return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children));\n    }\n  }, {\n    key: \"visitSparseUnion\",\n    value: function visitSparseUnion(type) {\n      var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref15.length,\n        nullCount = _ref15.nullCount;\n      return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));\n    }\n  }, {\n    key: \"visitDictionary\",\n    value: function visitDictionary(type) {\n      var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref16.length,\n        nullCount = _ref16.nullCount;\n      return Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));\n    }\n  }, {\n    key: \"visitInterval\",\n    value: function visitInterval(type) {\n      var _ref17 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref17.length,\n        nullCount = _ref17.nullCount;\n      return Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));\n    }\n  }, {\n    key: \"visitFixedSizeList\",\n    value: function visitFixedSizeList(type) {\n      var _ref18 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref18.length,\n        nullCount = _ref18.nullCount;\n      return Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));\n    }\n  }, {\n    key: \"visitMap\",\n    value: function visitMap(type) {\n      var _ref19 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextFieldNode(),\n        length = _ref19.length,\n        nullCount = _ref19.nullCount;\n      return Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));\n    }\n  }, {\n    key: \"nextFieldNode\",\n    value: function nextFieldNode() {\n      return this.nodes[++this.nodesIndex];\n    }\n  }, {\n    key: \"nextBufferRange\",\n    value: function nextBufferRange() {\n      return this.buffers[++this.buffersIndex];\n    }\n  }, {\n    key: \"readNullBitmap\",\n    value: function readNullBitmap(type, nullCount) {\n      var buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange();\n      return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n  }, {\n    key: \"readOffsets\",\n    value: function readOffsets(type, buffer) {\n      return this.readData(type, buffer);\n    }\n  }, {\n    key: \"readTypeIds\",\n    value: function readTypeIds(type, buffer) {\n      return this.readData(type, buffer);\n    }\n  }, {\n    key: \"readData\",\n    value: function readData(_type) {\n      var _ref20 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),\n        length = _ref20.length,\n        offset = _ref20.offset;\n      return this.bytes.subarray(offset, offset + length);\n    }\n  }, {\n    key: \"readDictionary\",\n    value: function readDictionary(type) {\n      return this.dictionaries.get(type.id);\n    }\n  }]);\n  return VectorLoader;\n}(Visitor);\n/** @ignore */\nexport var JSONVectorLoader = /*#__PURE__*/function (_VectorLoader) {\n  _inherits(JSONVectorLoader, _VectorLoader);\n  var _super2 = _createSuper(JSONVectorLoader);\n  function JSONVectorLoader(sources, nodes, buffers, dictionaries) {\n    var _this2;\n    _classCallCheck(this, JSONVectorLoader);\n    _this2 = _super2.call(this, new Uint8Array(0), nodes, buffers, dictionaries);\n    _this2.sources = sources;\n    return _this2;\n  }\n  _createClass(JSONVectorLoader, [{\n    key: \"readNullBitmap\",\n    value: function readNullBitmap(_type, nullCount) {\n      var _ref21 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.nextBufferRange(),\n        offset = _ref21.offset;\n      return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n  }, {\n    key: \"readOffsets\",\n    value: function readOffsets(_type) {\n      var _ref22 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),\n        offset = _ref22.offset;\n      return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n  }, {\n    key: \"readTypeIds\",\n    value: function readTypeIds(type) {\n      var _ref23 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),\n        offset = _ref23.offset;\n      return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n  }, {\n    key: \"readData\",\n    value: function readData(type) {\n      var _ref24 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nextBufferRange(),\n        offset = _ref24.offset;\n      var sources = this.sources;\n      if (DataType.isTimestamp(type)) {\n        return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n      } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n        return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n      } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n        return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n      } else if (DataType.isDecimal(type)) {\n        return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));\n      } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n        return binaryDataFromJSON(sources[offset]);\n      } else if (DataType.isBool(type)) {\n        return packBools(sources[offset]);\n      } else if (DataType.isUtf8(type)) {\n        return encodeUtf8(sources[offset].join(''));\n      }\n      return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map(function (x) {\n        return +x;\n      })));\n    }\n  }]);\n  return JSONVectorLoader;\n}(VectorLoader);\n/** @ignore */\nfunction binaryDataFromJSON(values) {\n  // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n  // There are definitely more efficient ways to do this... but it gets the\n  // job done.\n  var joined = values.join('');\n  var data = new Uint8Array(joined.length / 2);\n  for (var i = 0; i < joined.length; i += 2) {\n    data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n  }\n  return data;\n}","map":{"version":3,"names":["Data","Field","DataType","Visitor","packBools","encodeUtf8","Int64","Int128","UnionMode","DateUnit","toArrayBufferView","VectorLoader","_Visitor","_inherits","_super","_createSuper","bytes","nodes","buffers","dictionaries","_this","_classCallCheck","call","nodesIndex","buffersIndex","_createClass","key","value","visit","node","_get","_getPrototypeOf","prototype","type","visitNull","_ref","arguments","length","undefined","nextFieldNode","Null","visitBool","_ref2","nullCount","Bool","readNullBitmap","readData","visitInt","_ref3","Int","visitFloat","_ref4","Float","visitUtf8","_ref5","Utf8","readOffsets","visitBinary","_ref6","Binary","visitFixedSizeBinary","_ref7","FixedSizeBinary","visitDate","_ref8","Date","visitTimestamp","_ref9","Timestamp","visitTime","_ref10","Time","visitDecimal","_ref11","Decimal","visitList","_ref12","List","children","visitStruct","_ref13","Struct","visitMany","visitUnion","mode","Sparse","visitSparseUnion","visitDenseUnion","_ref14","Union","readTypeIds","_ref15","visitDictionary","_ref16","Dictionary","indices","readDictionary","visitInterval","_ref17","Interval","visitFixedSizeList","_ref18","FixedSizeList","visitMap","_ref19","Map","nextBufferRange","buffer","Uint8Array","_type","_ref20","offset","subarray","get","id","JSONVectorLoader","_VectorLoader","_super2","sources","_this2","_ref21","_ref22","Int32Array","_ref23","ArrayType","_ref24","isTimestamp","convertArray","isInt","isTime","bitWidth","isDate","unit","MILLISECOND","isDecimal","isBinary","isFixedSizeBinary","binaryDataFromJSON","isBool","isUtf8","join","map","x","values","joined","data","i","parseInt","substr"],"sources":["visitor/vectorloader.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}