{"ast":null,"code":"import _createClass from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { uint16ToFloat64 } from '../util/math';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\n/** @ignore */\nexport var GetVisitor = /*#__PURE__*/function (_Visitor) {\n  _inherits(GetVisitor, _Visitor);\n  var _super = _createSuper(GetVisitor);\n  function GetVisitor() {\n    _classCallCheck(this, GetVisitor);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(GetVisitor);\n}(Visitor);\n/** @ignore */\nvar epochDaysToMs = function epochDaysToMs(data, index) {\n  return 86400000 * data[index];\n};\n/** @ignore */\nvar epochMillisecondsLongToMs = function epochMillisecondsLongToMs(data, index) {\n  return 4294967296 * data[index + 1] + (data[index] >>> 0);\n};\n/** @ignore */\nvar epochMicrosecondsLongToMs = function epochMicrosecondsLongToMs(data, index) {\n  return 4294967296 * (data[index + 1] / 1000) + (data[index] >>> 0) / 1000;\n};\n/** @ignore */\nvar epochNanosecondsLongToMs = function epochNanosecondsLongToMs(data, index) {\n  return 4294967296 * (data[index + 1] / 1000000) + (data[index] >>> 0) / 1000000;\n};\n/** @ignore */\nvar epochMillisecondsToDate = function epochMillisecondsToDate(epochMs) {\n  return new Date(epochMs);\n};\n/** @ignore */\nvar epochDaysToDate = function epochDaysToDate(data, index) {\n  return epochMillisecondsToDate(epochDaysToMs(data, index));\n};\n/** @ignore */\nvar epochMillisecondsLongToDate = function epochMillisecondsLongToDate(data, index) {\n  return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n};\n/** @ignore */\nvar getNull = function getNull(_vector, _index) {\n  return null;\n};\n/** @ignore */\nvar getVariableWidthBytes = function getVariableWidthBytes(values, valueOffsets, index) {\n  var x = valueOffsets[index],\n    y = valueOffsets[index + 1];\n  return x != null && y != null ? values.subarray(x, y) : null;\n};\n/** @ignore */\nvar getBool = function getBool(_ref, index) {\n  var offset = _ref.offset,\n    values = _ref.values;\n  var idx = offset + index;\n  var byte = values[idx >> 3];\n  return (byte & 1 << idx % 8) !== 0;\n};\n/** @ignore */\nvar getDateDay = function getDateDay(_ref2, index) {\n  var values = _ref2.values;\n  return epochDaysToDate(values, index);\n};\n/** @ignore */\nvar getDateMillisecond = function getDateMillisecond(_ref3, index) {\n  var values = _ref3.values;\n  return epochMillisecondsLongToDate(values, index * 2);\n};\n/** @ignore */\nvar getNumeric = function getNumeric(_ref4, index) {\n  var stride = _ref4.stride,\n    values = _ref4.values;\n  return values[stride * index];\n};\n/** @ignore */\nvar getFloat16 = function getFloat16(_ref5, index) {\n  var stride = _ref5.stride,\n    values = _ref5.values;\n  return uint16ToFloat64(values[stride * index]);\n};\n/** @ignore */\nvar getBigInts = function getBigInts(_ref6, index) {\n  var stride = _ref6.stride,\n    values = _ref6.values,\n    type = _ref6.type;\n  return BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n};\n/** @ignore */\nvar getFixedSizeBinary = function getFixedSizeBinary(_ref7, index) {\n  var stride = _ref7.stride,\n    values = _ref7.values;\n  return values.subarray(stride * index, stride * (index + 1));\n};\n/** @ignore */\nvar getBinary = function getBinary(_ref8, index) {\n  var values = _ref8.values,\n    valueOffsets = _ref8.valueOffsets;\n  return getVariableWidthBytes(values, valueOffsets, index);\n};\n/** @ignore */\nvar getUtf8 = function getUtf8(_ref9, index) {\n  var values = _ref9.values,\n    valueOffsets = _ref9.valueOffsets;\n  var bytes = getVariableWidthBytes(values, valueOffsets, index);\n  return bytes !== null ? decodeUtf8(bytes) : null;\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getInt = function getInt(vector, index) {\n  return vector.type.bitWidth < 64 ? getNumeric(vector, index) : getBigInts(vector, index);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getFloat = function getFloat(vector, index) {\n  return vector.type.precision !== Precision.HALF ? getNumeric(vector, index) : getFloat16(vector, index);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getDate = function getDate(vector, index) {\n  return vector.type.unit === DateUnit.DAY ? getDateDay(vector, index) : getDateMillisecond(vector, index);\n};\n/** @ignore */\nvar getTimestampSecond = function getTimestampSecond(_ref10, index) {\n  var values = _ref10.values;\n  return 1000 * epochMillisecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nvar getTimestampMillisecond = function getTimestampMillisecond(_ref11, index) {\n  var values = _ref11.values;\n  return epochMillisecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nvar getTimestampMicrosecond = function getTimestampMicrosecond(_ref12, index) {\n  var values = _ref12.values;\n  return epochMicrosecondsLongToMs(values, index * 2);\n};\n/** @ignore */\nvar getTimestampNanosecond = function getTimestampNanosecond(_ref13, index) {\n  var values = _ref13.values;\n  return epochNanosecondsLongToMs(values, index * 2);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getTimestamp = function getTimestamp(vector, index) {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimestampSecond(vector, index);\n    case TimeUnit.MILLISECOND:\n      return getTimestampMillisecond(vector, index);\n    case TimeUnit.MICROSECOND:\n      return getTimestampMicrosecond(vector, index);\n    case TimeUnit.NANOSECOND:\n      return getTimestampNanosecond(vector, index);\n  }\n};\n/** @ignore */\nvar getTimeSecond = function getTimeSecond(_ref14, index) {\n  var values = _ref14.values,\n    stride = _ref14.stride;\n  return values[stride * index];\n};\n/** @ignore */\nvar getTimeMillisecond = function getTimeMillisecond(_ref15, index) {\n  var values = _ref15.values,\n    stride = _ref15.stride;\n  return values[stride * index];\n};\n/** @ignore */\nvar getTimeMicrosecond = function getTimeMicrosecond(_ref16, index) {\n  var values = _ref16.values;\n  return BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n};\n/** @ignore */\nvar getTimeNanosecond = function getTimeNanosecond(_ref17, index) {\n  var values = _ref17.values;\n  return BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getTime = function getTime(vector, index) {\n  switch (vector.type.unit) {\n    case TimeUnit.SECOND:\n      return getTimeSecond(vector, index);\n    case TimeUnit.MILLISECOND:\n      return getTimeMillisecond(vector, index);\n    case TimeUnit.MICROSECOND:\n      return getTimeMicrosecond(vector, index);\n    case TimeUnit.NANOSECOND:\n      return getTimeNanosecond(vector, index);\n  }\n};\n/** @ignore */\nvar getDecimal = function getDecimal(_ref18, index) {\n  var values = _ref18.values;\n  return BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n};\n/** @ignore */\nvar getList = function getList(vector, index) {\n  var child = vector.getChildAt(0),\n    valueOffsets = vector.valueOffsets,\n    stride = vector.stride;\n  return child.slice(valueOffsets[index * stride], valueOffsets[index * stride + 1]);\n};\n/** @ignore */\nvar getMap = function getMap(vector, index) {\n  return vector.bind(index);\n};\n/** @ignore */\nvar getStruct = function getStruct(vector, index) {\n  return vector.bind(index);\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getUnion = function getUnion(vector, index) {\n  return vector.type.mode === UnionMode.Dense ? getDenseUnion(vector, index) : getSparseUnion(vector, index);\n};\n/** @ignore */\nvar getDenseUnion = function getDenseUnion(vector, index) {\n  var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  var child = vector.getChildAt(childIndex);\n  return child ? child.get(vector.valueOffsets[index]) : null;\n};\n/** @ignore */\nvar getSparseUnion = function getSparseUnion(vector, index) {\n  var childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n  var child = vector.getChildAt(childIndex);\n  return child ? child.get(index) : null;\n};\n/** @ignore */\nvar getDictionary = function getDictionary(vector, index) {\n  return vector.getValue(vector.getKey(index));\n};\n/* istanbul ignore next */\n/** @ignore */\nvar getInterval = function getInterval(vector, index) {\n  return vector.type.unit === IntervalUnit.DAY_TIME ? getIntervalDayTime(vector, index) : getIntervalYearMonth(vector, index);\n};\n/** @ignore */\nvar getIntervalDayTime = function getIntervalDayTime(_ref19, index) {\n  var values = _ref19.values;\n  return values.subarray(2 * index, 2 * (index + 1));\n};\n/** @ignore */\nvar getIntervalYearMonth = function getIntervalYearMonth(_ref20, index) {\n  var values = _ref20.values;\n  var interval = values[index];\n  var int32s = new Int32Array(2);\n  int32s[0] = interval / 12 | 0; /* years */\n  int32s[1] = interval % 12 | 0; /* months */\n  return int32s;\n};\n/** @ignore */\nvar getFixedSizeList = function getFixedSizeList(vector, index) {\n  var child = vector.getChildAt(0),\n    stride = vector.stride;\n  return child.slice(index * stride, (index + 1) * stride);\n};\nGetVisitor.prototype.visitNull = getNull;\nGetVisitor.prototype.visitBool = getBool;\nGetVisitor.prototype.visitInt = getInt;\nGetVisitor.prototype.visitInt8 = getNumeric;\nGetVisitor.prototype.visitInt16 = getNumeric;\nGetVisitor.prototype.visitInt32 = getNumeric;\nGetVisitor.prototype.visitInt64 = getBigInts;\nGetVisitor.prototype.visitUint8 = getNumeric;\nGetVisitor.prototype.visitUint16 = getNumeric;\nGetVisitor.prototype.visitUint32 = getNumeric;\nGetVisitor.prototype.visitUint64 = getBigInts;\nGetVisitor.prototype.visitFloat = getFloat;\nGetVisitor.prototype.visitFloat16 = getFloat16;\nGetVisitor.prototype.visitFloat32 = getNumeric;\nGetVisitor.prototype.visitFloat64 = getNumeric;\nGetVisitor.prototype.visitUtf8 = getUtf8;\nGetVisitor.prototype.visitBinary = getBinary;\nGetVisitor.prototype.visitFixedSizeBinary = getFixedSizeBinary;\nGetVisitor.prototype.visitDate = getDate;\nGetVisitor.prototype.visitDateDay = getDateDay;\nGetVisitor.prototype.visitDateMillisecond = getDateMillisecond;\nGetVisitor.prototype.visitTimestamp = getTimestamp;\nGetVisitor.prototype.visitTimestampSecond = getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond = getTimestampNanosecond;\nGetVisitor.prototype.visitTime = getTime;\nGetVisitor.prototype.visitTimeSecond = getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond = getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond = getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond = getTimeNanosecond;\nGetVisitor.prototype.visitDecimal = getDecimal;\nGetVisitor.prototype.visitList = getList;\nGetVisitor.prototype.visitStruct = getStruct;\nGetVisitor.prototype.visitUnion = getUnion;\nGetVisitor.prototype.visitDenseUnion = getDenseUnion;\nGetVisitor.prototype.visitSparseUnion = getSparseUnion;\nGetVisitor.prototype.visitDictionary = getDictionary;\nGetVisitor.prototype.visitInterval = getInterval;\nGetVisitor.prototype.visitIntervalDayTime = getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth = getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList = getFixedSizeList;\nGetVisitor.prototype.visitMap = getMap;\n/** @ignore */\nexport var instance = new GetVisitor();","map":{"version":3,"names":["BN","Visitor","decodeUtf8","uint16ToFloat64","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","GetVisitor","_Visitor","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","epochDaysToMs","data","index","epochMillisecondsLongToMs","epochMicrosecondsLongToMs","epochNanosecondsLongToMs","epochMillisecondsToDate","epochMs","Date","epochDaysToDate","epochMillisecondsLongToDate","getNull","_vector","_index","getVariableWidthBytes","values","valueOffsets","x","y","subarray","getBool","_ref","offset","idx","byte","getDateDay","_ref2","getDateMillisecond","_ref3","getNumeric","_ref4","stride","getFloat16","_ref5","getBigInts","_ref6","type","new","isSigned","getFixedSizeBinary","_ref7","getBinary","_ref8","getUtf8","_ref9","bytes","getInt","vector","bitWidth","getFloat","precision","HALF","getDate","unit","DAY","getTimestampSecond","_ref10","getTimestampMillisecond","_ref11","getTimestampMicrosecond","_ref12","getTimestampNanosecond","_ref13","getTimestamp","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","getTimeSecond","_ref14","getTimeMillisecond","_ref15","getTimeMicrosecond","_ref16","signed","getTimeNanosecond","_ref17","getTime","getDecimal","_ref18","decimal","getList","child","getChildAt","slice","getMap","bind","getStruct","getUnion","mode","Dense","getDenseUnion","getSparseUnion","childIndex","typeIdToChildIndex","typeIds","get","getDictionary","getValue","getKey","getInterval","DAY_TIME","getIntervalDayTime","getIntervalYearMonth","_ref19","_ref20","interval","int32s","Int32Array","getFixedSizeList","prototype","visitNull","visitBool","visitInt","visitInt8","visitInt16","visitInt32","visitInt64","visitUint8","visitUint16","visitUint32","visitUint64","visitFloat","visitFloat16","visitFloat32","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitDateDay","visitDateMillisecond","visitTimestamp","visitTimestampSecond","visitTimestampMillisecond","visitTimestampMicrosecond","visitTimestampNanosecond","visitTime","visitTimeSecond","visitTimeMillisecond","visitTimeMicrosecond","visitTimeNanosecond","visitDecimal","visitList","visitStruct","visitUnion","visitDenseUnion","visitSparseUnion","visitDictionary","visitInterval","visitIntervalDayTime","visitIntervalYearMonth","visitFixedSizeList","visitMap","instance"],"sources":["visitor/get.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}