{"ast":null,"code":"import _regeneratorRuntime from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _get from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _slicedToArray from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _asyncIterator from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { ReadableInterop } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\nexport var RecordBatchWriter = /*#__PURE__*/function (_ReadableInterop, _Symbol$asyncIterator) {\n  _inherits(RecordBatchWriter, _ReadableInterop);\n  var _super = _createSuper(RecordBatchWriter);\n  function RecordBatchWriter(options) {\n    var _this;\n    _classCallCheck(this, RecordBatchWriter);\n    _this = _super.call(this);\n    _this._position = 0;\n    _this._started = false;\n    // @ts-ignore\n    _this._sink = new AsyncByteQueue();\n    _this._schema = null;\n    _this._dictionaryBlocks = [];\n    _this._recordBatchBlocks = [];\n    _this._dictionaryDeltaOffsets = new Map();\n    isObject(options) || (options = {\n      autoDestroy: true,\n      writeLegacyIpcFormat: false\n    });\n    _this._autoDestroy = typeof options.autoDestroy === 'boolean' ? options.autoDestroy : true;\n    _this._writeLegacyIpcFormat = typeof options.writeLegacyIpcFormat === 'boolean' ? options.writeLegacyIpcFormat : false;\n    return _this;\n  }\n  /** @nocollapse */\n  // @ts-ignore\n  _createClass(RecordBatchWriter, [{\n    key: \"toString\",\n    value: function toString() {\n      var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this._sink.toString(sync);\n    }\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      var sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this._sink.toUint8Array(sync);\n    }\n  }, {\n    key: \"writeAll\",\n    value: function writeAll(input) {\n      var _this2 = this;\n      if (isPromise(input)) {\n        return input.then(function (x) {\n          return _this2.writeAll(x);\n        });\n      } else if (isAsyncIterable(input)) {\n        return writeAllAsync(this, input);\n      }\n      return _writeAll(this, input);\n    }\n  }, {\n    key: \"closed\",\n    get: function get() {\n      return this._sink.closed;\n    }\n  }, {\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      return this._sink[Symbol.asyncIterator]();\n    }\n  }, {\n    key: \"toDOMStream\",\n    value: function toDOMStream(options) {\n      return this._sink.toDOMStream(options);\n    }\n  }, {\n    key: \"toNodeStream\",\n    value: function toNodeStream(options) {\n      return this._sink.toNodeStream(options);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.reset()._sink.close();\n    }\n  }, {\n    key: \"abort\",\n    value: function abort(reason) {\n      return this.reset()._sink.abort(reason);\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n      return this;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var sink = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._sink;\n      var schema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      if (sink === this._sink || sink instanceof AsyncByteQueue) {\n        this._sink = sink;\n      } else {\n        this._sink = new AsyncByteQueue();\n        if (sink && isWritableDOMStream(sink)) {\n          this.toDOMStream({\n            type: 'bytes'\n          }).pipeTo(sink);\n        } else if (sink && isWritableNodeStream(sink)) {\n          this.toNodeStream({\n            objectMode: false\n          }).pipe(sink);\n        }\n      }\n      if (this._started && this._schema) {\n        this._writeFooter(this._schema);\n      }\n      this._started = false;\n      this._dictionaryBlocks = [];\n      this._recordBatchBlocks = [];\n      this._dictionaryDeltaOffsets = new Map();\n      if (!schema || !schema.compareTo(this._schema)) {\n        if (schema === null) {\n          this._position = 0;\n          this._schema = null;\n        } else {\n          this._started = true;\n          this._schema = schema;\n          this._writeSchema(schema);\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"write\",\n    value: function write(payload) {\n      var schema = null;\n      if (!this._sink) {\n        throw new Error(\"RecordBatchWriter is closed\");\n      } else if (payload === null || payload === undefined) {\n        return this.finish() && undefined;\n      } else if (payload instanceof Table && !(schema = payload.schema)) {\n        return this.finish() && undefined;\n      } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n        return this.finish() && undefined;\n      }\n      if (schema && !schema.compareTo(this._schema)) {\n        if (this._started && this._autoDestroy) {\n          return this.close();\n        }\n        this.reset(this._sink, schema);\n      }\n      if (payload instanceof RecordBatch) {\n        if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n          this._writeRecordBatch(payload);\n        }\n      } else if (payload instanceof Table) {\n        this.writeAll(payload.chunks);\n      } else if (isIterable(payload)) {\n        this.writeAll(payload);\n      }\n    }\n  }, {\n    key: \"_writeMessage\",\n    value: function _writeMessage(message) {\n      var alignment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n      var a = alignment - 1;\n      var buffer = Message.encode(message);\n      var flatbufferSize = buffer.byteLength;\n      var prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n      var alignedSize = flatbufferSize + prefixSize + a & ~a;\n      var nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n      if (message.headerType === MessageHeader.RecordBatch) {\n        this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n      } else if (message.headerType === MessageHeader.DictionaryBatch) {\n        this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n      }\n      // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n      if (!this._writeLegacyIpcFormat) {\n        this._write(Int32Array.of(-1));\n      }\n      // Write the flatbuffer size prefix including padding\n      this._write(Int32Array.of(alignedSize - prefixSize));\n      // Write the flatbuffer\n      if (flatbufferSize > 0) {\n        this._write(buffer);\n      }\n      // Write any padding\n      return this._writePadding(nPaddingBytes);\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(chunk) {\n      if (this._started) {\n        var buffer = toUint8Array(chunk);\n        if (buffer && buffer.byteLength > 0) {\n          this._sink.write(buffer);\n          this._position += buffer.byteLength;\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"_writeSchema\",\n    value: function _writeSchema(schema) {\n      return this._writeMessage(Message.from(schema));\n    }\n    // @ts-ignore\n  }, {\n    key: \"_writeFooter\",\n    value: function _writeFooter(schema) {\n      // eos bytes\n      return this._writeLegacyIpcFormat ? this._write(Int32Array.of(0)) : this._write(Int32Array.of(-1, 0));\n    }\n  }, {\n    key: \"_writeMagic\",\n    value: function _writeMagic() {\n      return this._write(MAGIC);\n    }\n  }, {\n    key: \"_writePadding\",\n    value: function _writePadding(nBytes) {\n      return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n  }, {\n    key: \"_writeRecordBatch\",\n    value: function _writeRecordBatch(batch) {\n      var _VectorAssembler$asse = VectorAssembler.assemble(batch),\n        byteLength = _VectorAssembler$asse.byteLength,\n        nodes = _VectorAssembler$asse.nodes,\n        bufferRegions = _VectorAssembler$asse.bufferRegions,\n        buffers = _VectorAssembler$asse.buffers;\n      var recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n      var message = Message.from(recordBatch, byteLength);\n      return this._writeDictionaries(batch)._writeMessage(message)._writeBodyBuffers(buffers);\n    }\n  }, {\n    key: \"_writeDictionaryBatch\",\n    value: function _writeDictionaryBatch(dictionary, id) {\n      var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n      var _VectorAssembler$asse2 = VectorAssembler.assemble(dictionary),\n        byteLength = _VectorAssembler$asse2.byteLength,\n        nodes = _VectorAssembler$asse2.nodes,\n        bufferRegions = _VectorAssembler$asse2.bufferRegions,\n        buffers = _VectorAssembler$asse2.buffers;\n      var recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n      var dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n      var message = Message.from(dictionaryBatch, byteLength);\n      return this._writeMessage(message)._writeBodyBuffers(buffers);\n    }\n  }, {\n    key: \"_writeBodyBuffers\",\n    value: function _writeBodyBuffers(buffers) {\n      var buffer;\n      var size, padding;\n      for (var i = -1, n = buffers.length; ++i < n;) {\n        if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n          this._write(buffer);\n          if ((padding = (size + 7 & ~7) - size) > 0) {\n            this._writePadding(padding);\n          }\n        }\n      }\n      return this;\n    }\n  }, {\n    key: \"_writeDictionaries\",\n    value: function _writeDictionaries(batch) {\n      var _iterator2 = _createForOfIteratorHelper(batch.dictionaries),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            id = _step2$value[0],\n            dictionary = _step2$value[1];\n          var offset = this._dictionaryDeltaOffsets.get(id) || 0;\n          if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n            var chunks = 'chunks' in dictionary ? dictionary.chunks : [dictionary];\n            var _iterator3 = _createForOfIteratorHelper(chunks),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var chunk = _step3.value;\n                this._writeDictionaryBatch(chunk, id, offset > 0);\n                offset += chunk.length;\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return this;\n    }\n  }], [{\n    key: \"throughNode\",\n    value: function throughNode(options) {\n      throw new Error(\"\\\"throughNode\\\" not available in this environment\");\n    }\n    /** @nocollapse */\n  }, {\n    key: \"throughDOM\",\n    value: function throughDOM(\n    // @ts-ignore\n    writableStrategy,\n    // @ts-ignore\n    readableStrategy) {\n      throw new Error(\"\\\"throughDOM\\\" not available in this environment\");\n    }\n  }]);\n  return RecordBatchWriter;\n}(ReadableInterop, Symbol.asyncIterator);\n/** @ignore */\nexport var RecordBatchStreamWriter = /*#__PURE__*/function (_RecordBatchWriter) {\n  _inherits(RecordBatchStreamWriter, _RecordBatchWriter);\n  var _super2 = _createSuper(RecordBatchStreamWriter);\n  function RecordBatchStreamWriter() {\n    _classCallCheck(this, RecordBatchStreamWriter);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(RecordBatchStreamWriter, null, [{\n    key: \"writeAll\",\n    value: /** @nocollapse */\n    function writeAll(input, options) {\n      var writer = new RecordBatchStreamWriter(options);\n      if (isPromise(input)) {\n        return input.then(function (x) {\n          return writer.writeAll(x);\n        });\n      } else if (isAsyncIterable(input)) {\n        return writeAllAsync(writer, input);\n      }\n      return _writeAll(writer, input);\n    }\n  }]);\n  return RecordBatchStreamWriter;\n}(RecordBatchWriter);\n/** @ignore */\nexport var RecordBatchFileWriter = /*#__PURE__*/function (_RecordBatchWriter2) {\n  _inherits(RecordBatchFileWriter, _RecordBatchWriter2);\n  var _super3 = _createSuper(RecordBatchFileWriter);\n  function RecordBatchFileWriter() {\n    var _this3;\n    _classCallCheck(this, RecordBatchFileWriter);\n    _this3 = _super3.call(this);\n    _this3._autoDestroy = true;\n    return _this3;\n  }\n  /** @nocollapse */\n  _createClass(RecordBatchFileWriter, [{\n    key: \"_writeSchema\",\n    value:\n    // @ts-ignore\n    function _writeSchema(schema) {\n      return this._writeMagic()._writePadding(2);\n    }\n  }, {\n    key: \"_writeFooter\",\n    value: function _writeFooter(schema) {\n      var buffer = Footer.encode(new Footer(schema, MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));\n      return _get(_getPrototypeOf(RecordBatchFileWriter.prototype), \"_writeFooter\", this).call(this, schema) // EOS bytes for sequential readers\n      ._write(buffer) // Write the flatbuffer\n      ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n      ._writeMagic(); // then the magic suffix\n    }\n  }], [{\n    key: \"writeAll\",\n    value: function writeAll(input) {\n      var writer = new RecordBatchFileWriter();\n      if (isPromise(input)) {\n        return input.then(function (x) {\n          return writer.writeAll(x);\n        });\n      } else if (isAsyncIterable(input)) {\n        return writeAllAsync(writer, input);\n      }\n      return _writeAll(writer, input);\n    }\n  }]);\n  return RecordBatchFileWriter;\n}(RecordBatchWriter);\n/** @ignore */\nexport var RecordBatchJSONWriter = /*#__PURE__*/function (_RecordBatchWriter3) {\n  _inherits(RecordBatchJSONWriter, _RecordBatchWriter3);\n  var _super4 = _createSuper(RecordBatchJSONWriter);\n  function RecordBatchJSONWriter() {\n    var _this4;\n    _classCallCheck(this, RecordBatchJSONWriter);\n    _this4 = _super4.call(this);\n    _this4._autoDestroy = true;\n    _this4._recordBatches = [];\n    _this4._dictionaries = [];\n    return _this4;\n  }\n  /** @nocollapse */\n  _createClass(RecordBatchJSONWriter, [{\n    key: \"_writeMessage\",\n    value: function _writeMessage() {\n      return this;\n    }\n    // @ts-ignore\n  }, {\n    key: \"_writeFooter\",\n    value: function _writeFooter(schema) {\n      return this;\n    }\n  }, {\n    key: \"_writeSchema\",\n    value: function _writeSchema(schema) {\n      return this._write(\"{\\n  \\\"schema\\\": \".concat(JSON.stringify({\n        fields: schema.fields.map(fieldToJSON)\n      }, null, 2)));\n    }\n  }, {\n    key: \"_writeDictionaries\",\n    value: function _writeDictionaries(batch) {\n      if (batch.dictionaries.size > 0) {\n        this._dictionaries.push(batch);\n      }\n      return this;\n    }\n  }, {\n    key: \"_writeDictionaryBatch\",\n    value: function _writeDictionaryBatch(dictionary, id) {\n      var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n      this._write(this._dictionaryBlocks.length === 0 ? \"    \" : \",\\n    \");\n      this._write(\"\".concat(dictionaryBatchToJSON(dictionary, id, isDelta)));\n      this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n      return this;\n    }\n  }, {\n    key: \"_writeRecordBatch\",\n    value: function _writeRecordBatch(batch) {\n      this._writeDictionaries(batch);\n      this._recordBatches.push(batch);\n      return this;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._dictionaries.length > 0) {\n        this._write(\",\\n  \\\"dictionaries\\\": [\\n\");\n        var _iterator4 = _createForOfIteratorHelper(this._dictionaries),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var batch = _step4.value;\n            _get(_getPrototypeOf(RecordBatchJSONWriter.prototype), \"_writeDictionaries\", this).call(this, batch);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        this._write(\"\\n  ]\");\n      }\n      if (this._recordBatches.length > 0) {\n        for (var i = -1, n = this._recordBatches.length; ++i < n;) {\n          this._write(i === 0 ? \",\\n  \\\"batches\\\": [\\n    \" : \",\\n    \");\n          this._write(\"\".concat(recordBatchToJSON(this._recordBatches[i])));\n          this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n        }\n        this._write(\"\\n  ]\");\n      }\n      if (this._schema) {\n        this._write(\"\\n}\");\n      }\n      this._dictionaries = [];\n      this._recordBatches = [];\n      return _get(_getPrototypeOf(RecordBatchJSONWriter.prototype), \"close\", this).call(this);\n    }\n  }], [{\n    key: \"writeAll\",\n    value: function writeAll(input) {\n      return new RecordBatchJSONWriter().writeAll(input);\n    }\n  }]);\n  return RecordBatchJSONWriter;\n}(RecordBatchWriter);\n/** @ignore */\nfunction _writeAll(writer, input) {\n  var chunks = input;\n  if (input instanceof Table) {\n    chunks = input.chunks;\n    writer.reset(undefined, input.schema);\n  }\n  var _iterator5 = _createForOfIteratorHelper(chunks),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var batch = _step5.value;\n      writer.write(batch);\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return writer.finish();\n}\n/** @ignore */\nfunction writeAllAsync(_x, _x2) {\n  return _writeAllAsync.apply(this, arguments);\n}\n/** @ignore */\nfunction _writeAllAsync() {\n  _writeAllAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(writer, batches) {\n    var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, batch;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 2;\n          _iterator = _asyncIterator(batches);\n        case 4:\n          _context.next = 6;\n          return _iterator.next();\n        case 6:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 12;\n            break;\n          }\n          batch = _step.value;\n          writer.write(batch);\n        case 9:\n          _iteratorAbruptCompletion = false;\n          _context.next = 4;\n          break;\n        case 12:\n          _context.next = 18;\n          break;\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](2);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n        case 18:\n          _context.prev = 18;\n          _context.prev = 19;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 23;\n            break;\n          }\n          _context.next = 23;\n          return _iterator.return();\n        case 23:\n          _context.prev = 23;\n          if (!_didIteratorError) {\n            _context.next = 26;\n            break;\n          }\n          throw _iteratorError;\n        case 26:\n          return _context.finish(23);\n        case 27:\n          return _context.finish(18);\n        case 28:\n          return _context.abrupt(\"return\", writer.finish());\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[2, 14, 18, 28], [19,, 23, 27]]);\n  }));\n  return _writeAllAsync.apply(this, arguments);\n}\nfunction fieldToJSON(_ref) {\n  var name = _ref.name,\n    type = _ref.type,\n    nullable = _ref.nullable;\n  var assembler = new JSONTypeAssembler();\n  return {\n    'name': name,\n    'nullable': nullable,\n    'type': assembler.visit(type),\n    'children': (type.children || []).map(fieldToJSON),\n    'dictionary': !DataType.isDictionary(type) ? undefined : {\n      'id': type.id,\n      'isOrdered': type.isOrdered,\n      'indexType': assembler.visit(type.indices)\n    }\n  };\n}\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary, id) {\n  var isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var field = new Field(\"\".concat(id), dictionary.type, dictionary.nullCount > 0);\n  var columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n  return JSON.stringify({\n    'id': id,\n    'isDelta': isDelta,\n    'data': {\n      'count': dictionary.length,\n      'columns': columns\n    }\n  }, null, 2);\n}\n/** @ignore */\nfunction recordBatchToJSON(records) {\n  return JSON.stringify({\n    'count': records.length,\n    'columns': JSONVectorAssembler.assemble(records)\n  }, null, 2);\n}","map":{"version":3,"names":["Table","MAGIC","Column","DataType","Field","Message","metadata","FileBlock","Footer","MessageHeader","MetadataVersion","AsyncByteQueue","VectorAssembler","JSONTypeAssembler","JSONVectorAssembler","toUint8Array","RecordBatch","_InternalEmptyPlaceholderRecordBatch","ReadableInterop","isPromise","isAsyncIterable","isWritableDOMStream","isWritableNodeStream","isIterable","isObject","RecordBatchWriter","_ReadableInterop","_Symbol$asyncIterator","_inherits","_super","_createSuper","options","_this","_classCallCheck","call","_position","_started","_sink","_schema","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","Map","autoDestroy","writeLegacyIpcFormat","_autoDestroy","_writeLegacyIpcFormat","_createClass","key","value","toString","sync","arguments","length","undefined","writeAll","input","_this2","then","x","writeAllAsync","get","closed","Symbol","asyncIterator","toDOMStream","toNodeStream","close","reset","abort","reason","finish","sink","schema","type","pipeTo","objectMode","pipe","_writeFooter","compareTo","_writeSchema","write","payload","Error","_writeRecordBatch","chunks","_writeMessage","message","alignment","a","buffer","encode","flatbufferSize","byteLength","prefixSize","alignedSize","nPaddingBytes","headerType","push","bodyLength","DictionaryBatch","_write","Int32Array","of","_writePadding","chunk","from","_writeMagic","nBytes","Uint8Array","batch","_VectorAssembler$asse","assemble","nodes","bufferRegions","buffers","recordBatch","_writeDictionaries","_writeBodyBuffers","_writeDictionaryBatch","dictionary","id","isDelta","set","_VectorAssembler$asse2","dictionaryBatch","size","padding","i","n","_iterator2","_createForOfIteratorHelper","dictionaries","_step2","s","done","_step2$value","_slicedToArray","offset","slice","_iterator3","_step3","err","e","f","throughNode","throughDOM","writableStrategy","readableStrategy","RecordBatchStreamWriter","_RecordBatchWriter","_super2","apply","writer","RecordBatchFileWriter","_RecordBatchWriter2","_super3","_this3","V4","_get","_getPrototypeOf","prototype","RecordBatchJSONWriter","_RecordBatchWriter3","_super4","_this4","_recordBatches","_dictionaries","concat","JSON","stringify","fields","map","fieldToJSON","dictionaryBatchToJSON","_iterator4","_step4","recordBatchToJSON","_iterator5","_step5","_x","_x2","_writeAllAsync","_asyncToGenerator","_regeneratorRuntime","mark","_callee","batches","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","wrap","_callee$","_context","prev","next","_asyncIterator","sent","t0","return","abrupt","stop","_ref","name","nullable","assembler","visit","children","isDictionary","isOrdered","indices","field","nullCount","columns","records"],"sources":["ipc/writer.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}