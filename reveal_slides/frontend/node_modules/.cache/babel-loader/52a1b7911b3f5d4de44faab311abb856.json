{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from './buffer';\nimport { TextDecoder as TextDecoderPolyfill, TextEncoder as TextEncoderPolyfill } from 'text-encoding-utf-8';\n/** @ignore @suppress {missingRequire} */\nvar _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nvar useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n/** @ignore */\nexport var decodeUtf8 = function (TextDecoder) {\n  if (useNativeEncoders || !_Buffer) {\n    var decoder = new TextDecoder('utf-8');\n    return function (buffer) {\n      return decoder.decode(buffer);\n    };\n  }\n  return function (input) {\n    var _toUint8Array = toUint8Array(input),\n      buffer = _toUint8Array.buffer,\n      byteOffset = _toUint8Array.byteOffset,\n      length = _toUint8Array.length;\n    return _Buffer.from(buffer, byteOffset, length).toString();\n  };\n}(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n/** @ignore */\nexport var encodeUtf8 = function (TextEncoder) {\n  if (useNativeEncoders || !_Buffer) {\n    var encoder = new TextEncoder();\n    return function (value) {\n      return encoder.encode(value);\n    };\n  }\n  return function () {\n    var input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return toUint8Array(_Buffer.from(input, 'utf8'));\n  };\n}(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);","map":{"version":3,"names":["toUint8Array","TextDecoder","TextDecoderPolyfill","TextEncoder","TextEncoderPolyfill","_Buffer","Buffer","useNativeEncoders","decodeUtf8","decoder","buffer","decode","input","_toUint8Array","byteOffset","length","from","toString","encodeUtf8","encoder","value","encode","arguments","undefined"],"sources":["util/utf8.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,YAAY,QAAQ,UAAU;AACvC,SACIC,WAAW,IAAIC,mBAAmB,EAClCC,WAAW,IAAIC,mBAAmB,QAC/B,qBAAqB;AAE5B;AACA,IAAMC,OAAO,GAAG,OAAOC,MAAM,KAAK,UAAU,GAAGA,MAAM,GAAG,IAAI;AAC5D;AACA,IAAMC,iBAAiB,GAAG,OAAON,WAAW,KAAK,UAAU,IAAI,OAAOE,WAAW,KAAK,UAAU;AAEhG;AACA,OAAO,IAAMK,UAAU,GAAI,UAACP,WAAW,EAAI;EACvC,IAAIM,iBAAiB,IAAI,CAACF,OAAO,EAAE;IAC/B,IAAMI,OAAO,GAAG,IAAIR,WAAW,CAAC,OAAO,CAAC;IACxC,OAAO,UAACS,MAAsC;MAAA,OAAKD,OAAO,CAACE,MAAM,CAACD,MAAM,CAAC;IAAA;;EAE7E,OAAO,UAACE,KAAwC,EAAI;IAChD,IAAAC,aAAA,GAAuCb,YAAY,CAACY,KAAK,CAAC;MAAlDF,MAAM,GAAAG,aAAA,CAANH,MAAM;MAAEI,UAAU,GAAAD,aAAA,CAAVC,UAAU;MAAEC,MAAM,GAAAF,aAAA,CAANE,MAAM;IAClC,OAAOV,OAAO,CAACW,IAAI,CAACN,MAAM,EAAEI,UAAU,EAAEC,MAAM,CAAC,CAACE,QAAQ,EAAE;EAC9D,CAAC;AACL,CAAC,CAAE,OAAOhB,WAAW,KAAK,WAAW,GAAGA,WAAW,GAAGC,mBAAmB,CAAC;AAE1E;AACA,OAAO,IAAMgB,UAAU,GAAI,UAACf,WAAW,EAAI;EACvC,IAAII,iBAAiB,IAAI,CAACF,OAAO,EAAE;IAC/B,IAAMc,OAAO,GAAG,IAAIhB,WAAW,EAAE;IACjC,OAAO,UAACiB,KAAc;MAAA,OAAKD,OAAO,CAACE,MAAM,CAACD,KAAK,CAAC;IAAA;;EAEpD,OAAO;IAAA,IAACR,KAAK,GAAAU,SAAA,CAAAP,MAAA,QAAAO,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;IAAA,OAAKtB,YAAY,CAACK,OAAO,CAACW,IAAI,CAACJ,KAAK,EAAE,MAAM,CAAC,CAAC;EAAA;AACpE,CAAC,CAAE,OAAOT,WAAW,KAAK,WAAW,GAAGA,WAAW,GAAGC,mBAAmB,CAAC"},"metadata":{},"sourceType":"module"}