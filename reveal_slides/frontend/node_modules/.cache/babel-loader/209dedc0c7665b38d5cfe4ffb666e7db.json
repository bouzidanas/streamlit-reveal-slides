{"ast":null,"code":"import _regeneratorRuntime from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { clampRange } from '../util/vector';\nimport { DataType } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { AbstractVector, Vector } from '../vector';\n/** @ignore */\nexport var Chunked = /*#__PURE__*/function (_AbstractVector, _Symbol$iterator) {\n  _inherits(Chunked, _AbstractVector);\n  var _super = _createSuper(Chunked);\n  function Chunked(type) {\n    var _this;\n    var chunks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var offsets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : calculateOffsets(chunks);\n    _classCallCheck(this, Chunked);\n    _this = _super.call(this);\n    _this._nullCount = -1;\n    _this._type = type;\n    _this._chunks = chunks;\n    _this._chunkOffsets = offsets;\n    _this._length = offsets[offsets.length - 1];\n    _this._numChildren = (_this._type.children || []).length;\n    return _this;\n  }\n  /** @nocollapse */\n  _createClass(Chunked, [{\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n  }, {\n    key: \"chunks\",\n    get: function get() {\n      return this._chunks;\n    }\n  }, {\n    key: \"typeId\",\n    get: function get() {\n      return this._type.typeId;\n    }\n  }, {\n    key: \"VectorName\",\n    get: function get() {\n      return \"Chunked<\".concat(this._type, \">\");\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._chunks[0] ? this._chunks[0].data : null;\n    }\n  }, {\n    key: \"ArrayType\",\n    get: function get() {\n      return this._type.ArrayType;\n    }\n  }, {\n    key: \"numChildren\",\n    get: function get() {\n      return this._numChildren;\n    }\n  }, {\n    key: \"stride\",\n    get: function get() {\n      return this._chunks[0] ? this._chunks[0].stride : 1;\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      return this._chunks.reduce(function (byteLength, chunk) {\n        return byteLength + chunk.byteLength;\n      }, 0);\n    }\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      var nullCount = this._nullCount;\n      if (nullCount < 0) {\n        this._nullCount = nullCount = this._chunks.reduce(function (x, _ref) {\n          var nullCount = _ref.nullCount;\n          return x + nullCount;\n        }, 0);\n      }\n      return nullCount;\n    }\n  }, {\n    key: \"indices\",\n    get: function get() {\n      if (DataType.isDictionary(this._type)) {\n        if (!this._indices) {\n          var _chunks2 = this._chunks;\n          this._indices = _chunks2.length === 1 ? _chunks2[0].indices : Chunked.concat.apply(Chunked, _toConsumableArray(_chunks2.map(function (x) {\n            return x.indices;\n          })));\n        }\n        return this._indices;\n      }\n      return null;\n    }\n  }, {\n    key: \"dictionary\",\n    get: function get() {\n      if (DataType.isDictionary(this._type)) {\n        return this._chunks[this._chunks.length - 1].data.dictionary;\n      }\n      return null;\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      var _iterator, _step, chunk;\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _iterator = _createForOfIteratorHelper(this._chunks);\n            _context.prev = 1;\n            _iterator.s();\n          case 3:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 8;\n              break;\n            }\n            chunk = _step.value;\n            return _context.delegateYield(chunk, \"t0\", 6);\n          case 6:\n            _context.next = 3;\n            break;\n          case 8:\n            _context.next = 13;\n            break;\n          case 10:\n            _context.prev = 10;\n            _context.t1 = _context[\"catch\"](1);\n            _iterator.e(_context.t1);\n          case 13:\n            _context.prev = 13;\n            _iterator.f();\n            return _context.finish(13);\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }, value, this, [[1, 10, 13, 16]]);\n    })\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n      return new Chunked(this._type, chunks);\n    }\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n        others[_key] = arguments[_key];\n      }\n      return this.clone(Chunked.flatten.apply(Chunked, [this].concat(others)));\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(begin, end) {\n      return clampRange(this, begin, end, this._sliceInternal);\n    }\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      if (index < 0 || index >= this._numChildren) {\n        return null;\n      }\n      var columns = this._children || (this._children = []);\n      var child, field, chunks;\n      if (child = columns[index]) {\n        return child;\n      }\n      if (field = (this._type.children || [])[index]) {\n        chunks = this._chunks.map(function (vector) {\n          return vector.getChildAt(index);\n        }).filter(function (vec) {\n          return vec != null;\n        });\n        if (chunks.length > 0) {\n          return columns[index] = new Chunked(field.type, chunks);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"search\",\n    value: function search(index, then) {\n      var idx = index;\n      // binary search to find the child vector and value indices\n      var offsets = this._chunkOffsets,\n        rhs = offsets.length - 1;\n      // return early if out of bounds, or if there's just one child\n      if (idx < 0) {\n        return null;\n      }\n      if (idx >= offsets[rhs]) {\n        return null;\n      }\n      if (rhs <= 1) {\n        return then ? then(this, 0, idx) : [0, idx];\n      }\n      var lhs = 0,\n        pos = 0,\n        mid = 0;\n      do {\n        if (lhs + 1 === rhs) {\n          return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n        }\n        mid = lhs + (rhs - lhs) / 2 | 0;\n        idx >= offsets[mid] ? lhs = mid : rhs = mid;\n      } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n      return null;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(index) {\n      return !!this.search(index, this.isValidInternal);\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this.search(index, this.getInternal);\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.search(index, function (_ref2, i, j) {\n        var chunks = _ref2.chunks;\n        return chunks[i].set(j, value);\n      });\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(element, offset) {\n      var _this2 = this;\n      if (offset && typeof offset === 'number') {\n        return this.search(offset, function (self, i, j) {\n          return _this2.indexOfInternal(self, i, j, element);\n        });\n      }\n      return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var chunks = this.chunks;\n      var n = chunks.length;\n      var ArrayType = this._type.ArrayType;\n      if (n <= 0) {\n        return new ArrayType(0);\n      }\n      if (n <= 1) {\n        return chunks[0].toArray();\n      }\n      var len = 0,\n        src = new Array(n);\n      for (var i = -1; ++i < n;) {\n        len += (src[i] = chunks[i].toArray()).length;\n      }\n      if (ArrayType !== src[0].constructor) {\n        ArrayType = src[0].constructor;\n      }\n      var dst = new ArrayType(len);\n      var set = ArrayType === Array ? arraySet : typedSet;\n      for (var _i = -1, idx = 0; ++_i < n;) {\n        idx = set(src[_i], dst, idx);\n      }\n      return dst;\n    }\n  }, {\n    key: \"getInternal\",\n    value: function getInternal(_ref3, i, j) {\n      var _chunks = _ref3._chunks;\n      return _chunks[i].get(j);\n    }\n  }, {\n    key: \"isValidInternal\",\n    value: function isValidInternal(_ref4, i, j) {\n      var _chunks = _ref4._chunks;\n      return _chunks[i].isValid(j);\n    }\n  }, {\n    key: \"indexOfInternal\",\n    value: function indexOfInternal(_ref5, chunkIndex, fromIndex, element) {\n      var _chunks = _ref5._chunks;\n      var i = chunkIndex - 1,\n        n = _chunks.length;\n      var start = fromIndex,\n        offset = 0,\n        found = -1;\n      while (++i < n) {\n        if (~(found = _chunks[i].indexOf(element, start))) {\n          return offset + found;\n        }\n        start = 0;\n        offset += _chunks[i].length;\n      }\n      return -1;\n    }\n  }, {\n    key: \"_sliceInternal\",\n    value: function _sliceInternal(self, begin, end) {\n      var slices = [];\n      var chunks = self.chunks,\n        chunkOffsets = self._chunkOffsets;\n      for (var i = -1, n = chunks.length; ++i < n;) {\n        var chunk = chunks[i];\n        var chunkLength = chunk.length;\n        var chunkOffset = chunkOffsets[i];\n        // If the child is to the right of the slice boundary, we can stop\n        if (chunkOffset >= end) {\n          break;\n        }\n        // If the child is to the left of of the slice boundary, exclude\n        if (begin >= chunkOffset + chunkLength) {\n          continue;\n        }\n        // If the child is between both left and right boundaries, include w/o slicing\n        if (chunkOffset >= begin && chunkOffset + chunkLength <= end) {\n          slices.push(chunk);\n          continue;\n        }\n        // If the child overlaps one of the slice boundaries, include that slice\n        var from = Math.max(0, begin - chunkOffset);\n        var to = Math.min(end - chunkOffset, chunkLength);\n        slices.push(chunk.slice(from, to));\n      }\n      return self.clone(slices);\n    }\n  }], [{\n    key: \"flatten\",\n    value: function flatten() {\n      for (var _len2 = arguments.length, vectors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        vectors[_key2] = arguments[_key2];\n      }\n      return selectChunkArgs(Vector, vectors);\n    }\n    /** @nocollapse */\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      var chunks = Chunked.flatten.apply(Chunked, arguments);\n      return new Chunked(chunks[0].type, chunks);\n    }\n  }]);\n  return Chunked;\n}(AbstractVector, Symbol.iterator);\n/** @ignore */\nfunction calculateOffsets(vectors) {\n  var offsets = new Uint32Array((vectors || []).length + 1);\n  var offset = offsets[0] = 0,\n    length = offsets.length;\n  for (var index = 0; ++index < length;) {\n    offsets[index] = offset += vectors[index - 1].length;\n  }\n  return offsets;\n}\n/** @ignore */\nvar typedSet = function typedSet(src, dst, offset) {\n  dst.set(src, offset);\n  return offset + src.length;\n};\n/** @ignore */\nvar arraySet = function arraySet(src, dst, offset) {\n  var idx = offset;\n  for (var i = -1, n = src.length; ++i < n;) {\n    dst[idx++] = src[i];\n  }\n  return idx;\n};","map":{"version":3,"names":["clampRange","DataType","selectChunkArgs","AbstractVector","Vector","Chunked","_AbstractVector","_Symbol$iterator","_inherits","_super","_createSuper","type","_this","chunks","arguments","length","undefined","offsets","calculateOffsets","_classCallCheck","call","_nullCount","_type","_chunks","_chunkOffsets","_length","_numChildren","children","_createClass","key","get","typeId","concat","data","ArrayType","stride","reduce","byteLength","chunk","nullCount","x","_ref","isDictionary","_indices","indices","apply","_toConsumableArray","map","dictionary","value","_regeneratorRuntime","mark","_iterator","_step","wrap","value$","_context","prev","next","_createForOfIteratorHelper","s","n","done","delegateYield","t1","e","f","finish","stop","clone","_len","others","Array","_key","flatten","slice","begin","end","_sliceInternal","getChildAt","index","columns","_children","child","field","vector","filter","vec","search","then","idx","rhs","lhs","pos","mid","isValid","isValidInternal","getInternal","set","_ref2","i","j","indexOf","element","offset","_this2","self","indexOfInternal","Math","max","toArray","len","src","constructor","dst","arraySet","typedSet","_ref3","_ref4","_ref5","chunkIndex","fromIndex","start","found","slices","chunkOffsets","chunkLength","chunkOffset","push","from","to","min","_len2","vectors","_key2","Symbol","iterator","Uint32Array"],"sources":["vector/chunked.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}