{"ast":null,"code":"import _classCallCheck from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { vectorFromValuesWithType } from './index';\nimport { Float16, Float32, Float64 } from '../type';\n/** @ignore */\nexport var FloatVector = /*#__PURE__*/function (_BaseVector) {\n  _inherits(FloatVector, _BaseVector);\n  var _super = _createSuper(FloatVector);\n  function FloatVector() {\n    _classCallCheck(this, FloatVector);\n    return _super.apply(this, arguments);\n  }\n  _createClass(FloatVector, null, [{\n    key: \"from\",\n    value: /** @nocollapse */\n    function from(input) {\n      var ArrowType = vectorTypeToDataType(this);\n      if (input instanceof ArrayBuffer || ArrayBuffer.isView(input)) {\n        var InputType = arrayTypeToDataType(input.constructor) || ArrowType;\n        // Special case, infer the Arrow DataType from the input if calling the base\n        // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n        if (ArrowType === null) {\n          ArrowType = InputType;\n        }\n        // If the DataType inferred from the Vector constructor matches the\n        // DataType inferred from the input arguments, return zero-copy view\n        if (ArrowType && ArrowType === InputType) {\n          var type = new ArrowType();\n          var length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n          // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n          // let the Float16Builder handle casting the input values to Uint16s.\n          if (!convertTo16Bit(ArrowType, input.constructor)) {\n            return Vector.new(Data.Float(type, 0, length, 0, null, input));\n          }\n        }\n      }\n      if (ArrowType) {\n        // If the DataType inferred from the Vector constructor is different than\n        // the DataType inferred from the input TypedArray, or if input isn't a\n        // TypedArray, use the Builders to construct the result Vector\n        return vectorFromValuesWithType(function () {\n          return new ArrowType();\n        }, input);\n      }\n      if (input instanceof DataView || input instanceof ArrayBuffer) {\n        throw new TypeError(\"Cannot infer float type from instance of \".concat(input.constructor.name));\n      }\n      throw new TypeError('Unrecognized FloatVector input');\n    }\n  }]);\n  return FloatVector;\n}(BaseVector);\n/** @ignore */\nexport var Float16Vector = /*#__PURE__*/function (_FloatVector) {\n  _inherits(Float16Vector, _FloatVector);\n  var _super2 = _createSuper(Float16Vector);\n  function Float16Vector() {\n    _classCallCheck(this, Float16Vector);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(Float16Vector, [{\n    key: \"toFloat32Array\",\n    value:\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    function toFloat32Array() {\n      return new Float32Array(this);\n    }\n  }, {\n    key: \"toFloat64Array\",\n    value: function toFloat64Array() {\n      return new Float64Array(this);\n    }\n  }]);\n  return Float16Vector;\n}(FloatVector);\n/** @ignore */\nexport var Float32Vector = /*#__PURE__*/function (_FloatVector2) {\n  _inherits(Float32Vector, _FloatVector2);\n  var _super3 = _createSuper(Float32Vector);\n  function Float32Vector() {\n    _classCallCheck(this, Float32Vector);\n    return _super3.apply(this, arguments);\n  }\n  return _createClass(Float32Vector);\n}(FloatVector);\n/** @ignore */\nexport var Float64Vector = /*#__PURE__*/function (_FloatVector3) {\n  _inherits(Float64Vector, _FloatVector3);\n  var _super4 = _createSuper(Float64Vector);\n  function Float64Vector() {\n    _classCallCheck(this, Float64Vector);\n    return _super4.apply(this, arguments);\n  }\n  return _createClass(Float64Vector);\n}(FloatVector);\nvar convertTo16Bit = function convertTo16Bit(typeCtor, dataCtor) {\n  return typeCtor === Float16 && dataCtor !== Uint16Array;\n};\n/** @ignore */\nvar arrayTypeToDataType = function arrayTypeToDataType(ctor) {\n  switch (ctor) {\n    case Uint16Array:\n      return Float16;\n    case Float32Array:\n      return Float32;\n    case Float64Array:\n      return Float64;\n    default:\n      return null;\n  }\n};\n/** @ignore */\nvar vectorTypeToDataType = function vectorTypeToDataType(ctor) {\n  switch (ctor) {\n    case Float16Vector:\n      return Float16;\n    case Float32Vector:\n      return Float32;\n    case Float64Vector:\n      return Float64;\n    default:\n      return null;\n  }\n};","map":{"version":3,"names":["Data","Vector","BaseVector","vectorFromValuesWithType","Float16","Float32","Float64","FloatVector","_BaseVector","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","from","input","ArrowType","vectorTypeToDataType","ArrayBuffer","isView","InputType","arrayTypeToDataType","constructor","type","length","byteLength","ArrayType","BYTES_PER_ELEMENT","convertTo16Bit","new","Float","DataView","TypeError","concat","name","Float16Vector","_FloatVector","_super2","toFloat32Array","Float32Array","toFloat64Array","Float64Array","Float32Vector","_FloatVector2","_super3","Float64Vector","_FloatVector3","_super4","typeCtor","dataCtor","Uint16Array","ctor"],"sources":["vector/float.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\n\n/** @ignore */\ntype FloatVectorConstructors =\n    typeof FloatVector   |\n    typeof Float16Vector |\n    typeof Float32Vector |\n    typeof Float64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Float, TNull = any> =\n    FloatArray                          |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\n\n    // Not zero-copy\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\n\n        let ArrowType = vectorTypeToDataType(this);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\n                }\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\n    switch (ctor) {\n        case Uint16Array:    return Float16;\n        case Float32Array:   return Float32;\n        case Float64Array:   return Float64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\n    switch (ctor) {\n        case Float16Vector: return Float16;\n        case Float32Vector: return Float32;\n        case Float64Vector: return Float64;\n        default: return null;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}