{"ast":null,"code":"import { createGlobalStyle as _createGlobalStyle } from \"styled-components\";\nvar _jsxFileName = \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { useEffect, useMemo, useRef } from \"react\";\nimport Reveal from 'reveal.js';\nimport RevealMarkdown from 'reveal.js/plugin/markdown/markdown';\nimport RevealHighlight from 'reveal.js/plugin/highlight/highlight';\nimport RevealMath from 'reveal.js/plugin/math/math';\nimport RevealSearch from 'reveal.js/plugin/search/search';\nimport RevealNotes from 'reveal.js/plugin/notes/notes';\nimport RevealZoom from 'reveal.js/plugin/zoom/zoom';\nimport RevealSymbolPerSlideProgress from \"reveal.js-symbol-per-slide-progress\";\nimport 'reveal.js/dist/reveal.css';\nimport 'reveal.js/plugin/highlight/monokai.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GlobalCSS = _createGlobalStyle([\"\", \"\"], props => props.inject);\n_c = GlobalCSS;\nconst includedPlugins = {\n  \"markdown\": RevealMarkdown,\n  \"highlight\": RevealHighlight,\n  \"katex\": RevealMath.KaTeX,\n  \"mathjax2\": RevealMath.MathJax2,\n  \"mathjax3\": RevealMath.MathJax3,\n  \"search\": RevealSearch,\n  \"notes\": RevealNotes,\n  \"zoom\": RevealZoom\n};\n// const simpleCommands = {\"left\": Reveal.left, \"right\": () => {Reveal.right()}, \"up\": Reveal.up, \"down\": Reveal.down, \"prev\": Reveal.prev, \"next\": Reveal.next, \"prevFragment\": Reveal.prevFragment, \"nextFragment\": Reveal.nextFragment, \"togglePause\": Reveal.togglePause, \"toggleAutoSlide\": Reveal.toggleAutoSlide, \"toggleHelp\": Reveal.toggleHelp, \"toggleOverview\": Reveal.toggleOverview, \"shuffle\": Reveal.shuffle}\n// const commandsWithArgs = {slide: Reveal.slide, togglePause: Reveal.togglePause, toggleAutoSlide: Reveal.toggleAutoSlide, toggleHelp: Reveal.toggleHelp, toggleOverview: Reveal.toggleOverview}\n\nconst defaultConfig = {\n  // The \"normal\" size of the presentation, aspect ratio will be preserved\n  // when the presentation is scaled to fit different resolutions\n  width: 900,\n  height: 860,\n  // Factor of the display size that should remain empty around the content\n  margin: 0.05,\n  // Bounds for smallest/largest possible scale to apply to content\n  minScale: 0.1,\n  maxScale: 3.0,\n  // Help the user learn the controls by providing hints, for example by\n  // bouncing the down arrow when they first encounter a vertical slide\n  controlsTutorial: true,\n  // Determines where controls appear, \"edges\" or \"bottom-right\"\n  controlsLayout: 'edges'\n};\n\n// This new component allows us to set the innerHTML of a div in a way \n// that allows code to be executed. THIS IS NOT SAFE. This is a workaround\n// for something that isnt allowed for a reason. The user of the `reveal_slides`\n// component is responsable for ensuring that the html (and js) they pass in is safe.\nconst DangerousDiv = _ref => {\n  _s();\n  let {\n    html,\n    innerRef,\n    ...rest\n  } = _ref;\n  const divRef = useRef(null);\n  useEffect(function () {\n    if (!html) return;\n    const newInnerHtml = document.createRange().createContextualFragment(html); // Create a 'tiny' document and parse the html string\n    console.log(divRef);\n    divRef.current.innerHTML = ''; // Clear the container\n    divRef.current.appendChild(newInnerHtml); // Append the new content\n  }, [html]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: element => {\n      // This function passes the ref to the this div wrapper component\n      // AND passes it to the innerRef prop which is used by the parent\n      // of the wrapper component. This special handling allows for innerRef \n      // to be a function or a ref object.\n      divRef.current = element;\n      if (typeof innerRef === 'function') {\n        innerRef(element);\n      } else {\n        innerRef.current = element;\n      }\n    },\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\n_s(DangerousDiv, \"yu+j3H3uMpPkc7UDcPsbvSQj1vE=\");\n_c2 = DangerousDiv;\nconst RevealSlides = _ref2 => {\n  _s2();\n  let {\n    args,\n    disabled\n  } = _ref2;\n  let configStr = JSON.stringify(args[\"config\"]);\n  let initStateStr = JSON.stringify(args[\"initial_state\"]);\n  // const commandStr = JSON.stringify(args[\"commands\"])\n\n  const setupConfig = configString => {\n    const config = {\n      ...defaultConfig,\n      ...JSON.parse(configStr)\n    };\n    // code to run after render goes here\n    if (args[\"allow_unsafe_html\"]) {\n      if ('plugins' in config) {\n        var arr = config['plugins'];\n        arr.forEach(function (moduleName, index) {\n          if (moduleName in includedPlugins) {\n            arr[index] = includedPlugins[moduleName];\n          } else {\n            arr[index] = null;\n          }\n        });\n        config['plugins'] = arr.filter(x => !!x);\n      }\n    } else {\n      if ('plugins' in config) {\n        arr = config['plugins'];\n        arr.forEach(function (moduleName, index) {\n          if (moduleName in includedPlugins) {\n            arr[index] = includedPlugins[moduleName];\n          } else {\n            arr[index] = null;\n          }\n        });\n        config['plugins'] = arr.filter(x => !!x);\n        if (!config['plugins'].includes(RevealMarkdown)) {\n          config['plugins'].push(RevealMarkdown);\n        }\n      } else {\n        config['plugins'] = [RevealMarkdown];\n      }\n    }\n    return config;\n  };\n  useMemo(() => {\n    // code to run on component mount goes here\n\n    // To do: remove or disable previously imported css. When the list of\n    // css imports exceed about 25, the page no longer updates.\n\n    import('../node_modules/reveal.js/dist/theme/' + args.theme + '.css').then(css => {\n      try {\n        Reveal.layout();\n      } catch (e) {\n        console.warn(\"Reveal.layout() call failed.\");\n      }\n    }).catch(err => {\n      console.warn(\"Failed CSS import: \", err);\n    });\n  }, [args.theme]);\n  useEffect(() => {\n    const config = setupConfig(configStr);\n    try {\n      Reveal.destroy();\n    } catch (e) {}\n    Reveal.initialize(config).then(() => {\n      // reveal.js is ready\n\n      // For some yet to be determined reason, the highlight plugin is not initialized.\n      // Setting highlight config option highlightOnLoad to true (before passing to initialize function)\n      // does not work\n      // To Do: make sure the highlight plugin only changes the HTML involving the code once instead of many times.\n      // Possible solution is to make a change to the plugin init function.\n      let highlighter = Reveal.getPlugin('highlight');\n      if (highlighter) {\n        highlighter.init(Reveal);\n      }\n      const initState = JSON.parse(initStateStr);\n      if (Object.keys(initState).length !== 0) {\n        Reveal.setState(initState);\n      }\n\n      // const RevealSymbolPerSlideProgress = lazy(() => import('reveal.js-symbol-per-slide-progress'));\n      RevealSymbolPerSlideProgress.init();\n      if (!args['display_only']) {\n        // Send slide position indecies back to Streamlit on initialization and on slide change\n        const currState = Reveal.getState();\n        Streamlit.setComponentValue(currState);\n        Reveal.on('slidechanged', event => {\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue({\n            indexh: event.indexh,\n            indexv: event.indexv,\n            indexf: tempState.indexf,\n            paused: tempState.paused,\n            overview: tempState.overview\n          });\n        });\n        Reveal.on('fragmentshown', event => {\n          // event.fragment = the fragment DOM element\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue(tempState);\n        });\n        Reveal.on('fragmenthidden', event => {\n          // event.fragment = the fragment DOM element\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue(tempState);\n        });\n        Reveal.on('overviewshown', event => {\n          // event.overview = the overview DOM element\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue(tempState);\n        });\n        Reveal.on('overviewhidden', event => {\n          // event.overview = the overview DOM element\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue(tempState);\n        });\n        Reveal.on('paused', event => {\n          // event.fragment = the fragment DOM element\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue(tempState);\n        });\n        Reveal.on('resumed', event => {\n          // event.fragment = the fragment DOM element\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue(tempState);\n        });\n      }\n    });\n    return () => {\n      // code to run on component unmount goes here\n      Reveal.destroy();\n    };\n  }, []);\n\n  // Reconfigure reveal.js if config changes\n  useEffect(() => {\n    const existingPlugins = Reveal.getPlugins();\n    const config = setupConfig(configStr);\n\n    // Add and register plugins that are not already loaded\n    let existingPluginsList = Object.values(existingPlugins).map(plugin => plugin.id);\n    if ('plugins' in args[\"config\"]) {\n      const plugins = args[\"config\"][\"plugins\"];\n      plugins.forEach(plugin => {\n        if (plugin && existingPluginsList.indexOf(plugin) === -1) {\n          Reveal.registerPlugin(includedPlugins[plugin]);\n        }\n      });\n\n      //// Remove plugins that are no longer in the list (does not work yet..some signs there is a bug in Reveal.Plugin)\n      // Object.values(existingPlugins as {[id: string]: Reveal.Plugin;}).forEach((plugin: any) => {\n      //   if (plugin.id && plugin.id !=='markdown' && plugins.indexOf(plugin.id) === -1){\n      //     console.log(\"destroy plugin: \" + plugin.id);\n      //     if( typeof plugin.destroy === 'function' ) {\n      //       plugin.destroy();\n      //     }\n      //   }\n      // });\n    }\n    // Reconfigure reveal.js\n    Reveal.configure(config);\n  }, [configStr, args[\"allow_unsafe_html\"]]);\n  useEffect(() => {\n    const initState = JSON.parse(initStateStr);\n    if (Reveal.isReady() && Object.keys(initState).length !== 0) {\n      Reveal.setState(initState);\n    }\n  }, [initStateStr]);\n  useEffect(() => {\n    if (Reveal.isReady()) {\n      if (disabled) {\n        Reveal.togglePause(true);\n        let viewport = Reveal.getViewportElement();\n        if (viewport) {\n          viewport.style.pointerEvents = \"none\";\n        }\n      } else {\n        Reveal.togglePause(false);\n        let viewport = Reveal.getViewportElement();\n        if (viewport) {\n          viewport.style.pointerEvents = \"auto\";\n        }\n      }\n    }\n  }, [disabled]);\n\n  //To do: add support for commands (i.e. control slides from Streamlit)\n  //-----------------\n  //\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver(entries => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    if (args[\"height\"] === \"auto\" || typeof args[\"height\"] !== \"number\") {\n      var _entries$0$contentBox;\n      Streamlit.setFrameHeight((_entries$0$contentBox = entries[0].contentBoxSize.blockSize) !== null && _entries$0$contentBox !== void 0 ? _entries$0$contentBox : entries[0].contentRect.height);\n      if (Reveal.isReady()) {\n        Reveal.layout();\n      }\n    } else {\n      Streamlit.setFrameHeight(args[\"height\"]);\n      if (Reveal.isReady()) {\n        Reveal.layout();\n      }\n    }\n  });\n  const observe = divElem => {\n    divElem ? resizeObserver.observe(divElem) : resizeObserver.disconnect();\n  };\n  if (args[\"allow_unsafe_html\"]) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(GlobalCSS, {\n        inject: args.css\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DangerousDiv, {\n        innerRef: observe,\n        className: \"slides\",\n        html: args[\"content\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(GlobalCSS, {\n        inject: args.css\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: observe,\n        className: \"slides\",\n        children: /*#__PURE__*/_jsxDEV(\"section\", {\n          \"data-markdown\": \"\",\n          ...args[\"markdown_props\"],\n          children: /*#__PURE__*/_jsxDEV(\"script\", {\n            type: \"text/template\",\n            children: args[\"content\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n};\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n_s2(RevealSlides, \"diGy1jCBRKgc6zsNznpcQsy8VGI=\");\n_c3 = RevealSlides;\nexport default _c4 = withStreamlitConnection(RevealSlides);\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"GlobalCSS\");\n$RefreshReg$(_c2, \"DangerousDiv\");\n$RefreshReg$(_c3, \"RevealSlides\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","useEffect","useMemo","useRef","Reveal","RevealMarkdown","RevealHighlight","RevealMath","RevealSearch","RevealNotes","RevealZoom","RevealSymbolPerSlideProgress","jsxDEV","_jsxDEV","Fragment","_Fragment","GlobalCSS","createGlobalStyle","props","inject","_c","includedPlugins","KaTeX","MathJax2","MathJax3","defaultConfig","width","height","margin","minScale","maxScale","controlsTutorial","controlsLayout","DangerousDiv","_ref","_s","html","innerRef","rest","divRef","newInnerHtml","document","createRange","createContextualFragment","console","log","current","innerHTML","appendChild","ref","element","fileName","_jsxFileName","lineNumber","columnNumber","_c2","RevealSlides","_ref2","_s2","args","disabled","configStr","JSON","stringify","initStateStr","setupConfig","configString","config","parse","arr","forEach","moduleName","index","filter","x","includes","push","theme","then","css","layout","e","warn","catch","err","destroy","initialize","highlighter","getPlugin","init","initState","Object","keys","length","setState","currState","getState","setComponentValue","on","event","tempState","indexh","indexv","indexf","paused","overview","existingPlugins","getPlugins","existingPluginsList","values","map","plugin","id","plugins","indexOf","registerPlugin","configure","isReady","togglePause","viewport","getViewportElement","style","pointerEvents","resizeObserver","ResizeObserver","entries","_entries$0$contentBox","setFrameHeight","contentBoxSize","blockSize","contentRect","observe","divElem","disconnect","children","className","type","_c3","_c4","$RefreshReg$"],"sources":["/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx"],"sourcesContent":["import {\n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection,\n  Theme,\n} from \"streamlit-component-lib\"\nimport { MutableRefObject, useEffect, useMemo, useRef, lazy } from \"react\"\nimport { createGlobalStyle } from \"styled-components/macro\"\n\nimport Reveal from 'reveal.js';\nimport RevealMarkdown from 'reveal.js/plugin/markdown/markdown';\nimport RevealHighlight from 'reveal.js/plugin/highlight/highlight';\nimport RevealMath from 'reveal.js/plugin/math/math';\nimport RevealSearch from 'reveal.js/plugin/search/search';\nimport RevealNotes from 'reveal.js/plugin/notes/notes';\nimport RevealZoom from 'reveal.js/plugin/zoom/zoom';\n\nimport RevealSymbolPerSlideProgress from \"reveal.js-symbol-per-slide-progress\";\n\nimport 'reveal.js/dist/reveal.css';\nimport 'reveal.js/plugin/highlight/monokai.css';\n\ninterface RevealSlidesProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\ninterface DangerousDivProps extends React.HTMLAttributes<HTMLDivElement> {\n  html: string;\n  innerRef: React.Ref<HTMLDivElement>;\n}\n\nconst GlobalCSS = createGlobalStyle<{ inject: string}>`\n  ${props => props.inject}\n`\n\nconst includedPlugins = {\"markdown\": RevealMarkdown, \"highlight\": RevealHighlight, \"katex\": RevealMath.KaTeX, \"mathjax2\": RevealMath.MathJax2, \"mathjax3\": RevealMath.MathJax3, \"search\": RevealSearch, \"notes\": RevealNotes, \"zoom\": RevealZoom}\n// const simpleCommands = {\"left\": Reveal.left, \"right\": () => {Reveal.right()}, \"up\": Reveal.up, \"down\": Reveal.down, \"prev\": Reveal.prev, \"next\": Reveal.next, \"prevFragment\": Reveal.prevFragment, \"nextFragment\": Reveal.nextFragment, \"togglePause\": Reveal.togglePause, \"toggleAutoSlide\": Reveal.toggleAutoSlide, \"toggleHelp\": Reveal.toggleHelp, \"toggleOverview\": Reveal.toggleOverview, \"shuffle\": Reveal.shuffle}\n// const commandsWithArgs = {slide: Reveal.slide, togglePause: Reveal.togglePause, toggleAutoSlide: Reveal.toggleAutoSlide, toggleHelp: Reveal.toggleHelp, toggleOverview: Reveal.toggleOverview}\n\nconst defaultConfig = {\n  // The \"normal\" size of the presentation, aspect ratio will be preserved\n\t// when the presentation is scaled to fit different resolutions\n\twidth: 900,\n\theight: 860,\n\t\n\t// Factor of the display size that should remain empty around the content\n\tmargin: 0.05,\n\n\t// Bounds for smallest/largest possible scale to apply to content\n\tminScale: 0.1,\n\tmaxScale: 3.0,\n\n\t// Help the user learn the controls by providing hints, for example by\n\t// bouncing the down arrow when they first encounter a vertical slide\n\tcontrolsTutorial: true,\n\n\t// Determines where controls appear, \"edges\" or \"bottom-right\"\n\tcontrolsLayout: 'edges',\n}\n\n// This new component allows us to set the innerHTML of a div in a way \n// that allows code to be executed. THIS IS NOT SAFE. This is a workaround\n// for something that isnt allowed for a reason. The user of the `reveal_slides`\n// component is responsable for ensuring that the html (and js) they pass in is safe.\nconst DangerousDiv = ({html, innerRef, ...rest}: DangerousDivProps) => {\n\n  const divRef = useRef<HTMLDivElement>(null);\n\n  useEffect(function () {\n    if (!html) return;\n\n    const newInnerHtml = document.createRange().createContextualFragment(html); // Create a 'tiny' document and parse the html string\n    console.log(divRef);\n    divRef.current!.innerHTML = ''; // Clear the container\n    divRef.current!.appendChild(newInnerHtml); // Append the new content\n  }, [html]);\n\n  return (\n    <div \n      ref={(element) => {\n        // This function passes the ref to the this div wrapper component\n        // AND passes it to the innerRef prop which is used by the parent\n        // of the wrapper component. This special handling allows for innerRef \n        // to be a function or a ref object.\n        (divRef as MutableRefObject<HTMLDivElement>).current = element as HTMLDivElement\n        if (typeof innerRef === 'function') {\n          innerRef(element)\n        }\n        else {\n          (innerRef as MutableRefObject<HTMLDivElement>).current = element as HTMLDivElement\n        }\n      }} \n      {...rest} />\n  )\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst RevealSlides = ({ args, disabled }: RevealSlidesProps) => {   \n\n  let configStr = JSON.stringify(args[\"config\"])\n  let initStateStr = JSON.stringify(args[\"initial_state\"])\n  // const commandStr = JSON.stringify(args[\"commands\"])\n\n  const setupConfig = (configString: string) : object => {\n    const config = {...defaultConfig, ...JSON.parse(configStr)}\n    // code to run after render goes here\n    if (args[\"allow_unsafe_html\"]) {\n      if ('plugins' in config){\n        var arr = config['plugins'];\n        arr.forEach(function(moduleName: string, index: number) {\n          if (moduleName in includedPlugins){\n            arr[index] = (includedPlugins as any)[moduleName];\n          }\n          else {\n            arr[index] = null;\n          }\n        });\n        config['plugins'] = arr.filter((x:any) => !!x) as any[];\n      }\n    }\n    else {\n      if ('plugins' in config){\n        arr = config['plugins'];\n        arr.forEach(function(moduleName: string, index: number) {\n          if (moduleName in includedPlugins){\n            arr[index] = (includedPlugins as any)[moduleName];\n          }\n          else {\n            arr[index] = null;\n          }\n        });\n        config['plugins'] = arr.filter((x:any) => !!x) as any[];\n        if(!config['plugins'].includes(RevealMarkdown)){\n          config['plugins'].push(RevealMarkdown);\n        }\n      }\n      else {\n        config['plugins'] = [RevealMarkdown];\n      }\n    }\n    return config;\n  }\n\n  useMemo(()=>{\n    // code to run on component mount goes here\n\n    // To do: remove or disable previously imported css. When the list of\n    // css imports exceed about 25, the page no longer updates.\n    \n    import('../node_modules/reveal.js/dist/theme/' + args.theme + '.css').then((css) => {\n      try{\n        Reveal.layout();\n      }\n      catch (e){\n        console.warn(\"Reveal.layout() call failed.\")\n      }\n    }).catch((err) => {\n      console.warn(\"Failed CSS import: \", err);\n    });\n\n  }, [args.theme]);\n\n  useEffect(() => {\n    const config = setupConfig(configStr)\n    \n    try {\n      Reveal.destroy();\n    }\n    catch (e) {\n    }\n    Reveal.initialize(config).then(() => {\n      // reveal.js is ready\n      \n      // For some yet to be determined reason, the highlight plugin is not initialized.\n      // Setting highlight config option highlightOnLoad to true (before passing to initialize function)\n      // does not work\n      // To Do: make sure the highlight plugin only changes the HTML involving the code once instead of many times.\n      // Possible solution is to make a change to the plugin init function.\n      let highlighter = Reveal.getPlugin('highlight') as any;\n      if (highlighter){\n        highlighter.init(Reveal);\n      }\n      \n      const initState = JSON.parse(initStateStr);\n      if(Object.keys(initState).length !== 0){\n        Reveal.setState(initState);\n      }\n\n      // const RevealSymbolPerSlideProgress = lazy(() => import('reveal.js-symbol-per-slide-progress'));\n      RevealSymbolPerSlideProgress.init();\n\n      if(!args['display_only']){\n        // Send slide position indecies back to Streamlit on initialization and on slide change\n        const currState = Reveal.getState();\n        Streamlit.setComponentValue(currState);\n        Reveal.on( 'slidechanged', event => {\n\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue({indexh: (event as any).indexh, indexv: (event as any).indexv, indexf: tempState.indexf, paused: tempState.paused, overview: tempState.overview});\n        });\n        \n        Reveal.on( 'fragmentshown', event => {\n          // event.fragment = the fragment DOM element\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue(tempState);\n        } );\n        Reveal.on( 'fragmenthidden', event => {\n          // event.fragment = the fragment DOM element\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue(tempState);\n        } );\n        Reveal.on( 'overviewshown', event => {\n          // event.overview = the overview DOM element\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue(tempState);\n        } );\n        Reveal.on( 'overviewhidden', event => {\n          // event.overview = the overview DOM element\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue(tempState);\n        } );\n        Reveal.on( 'paused', event => {\n          // event.fragment = the fragment DOM element\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue(tempState);\n        } );\n        Reveal.on( 'resumed', event => {\n          // event.fragment = the fragment DOM element\n          const tempState = Reveal.getState();\n          Streamlit.setComponentValue(tempState);\n        } );\n      }\n\n    });\n\n    return () => {\n      // code to run on component unmount goes here\n      Reveal.destroy();  \n    }\n  }, []);\n\n  // Reconfigure reveal.js if config changes\n  useEffect(() => {\n    const existingPlugins = Reveal.getPlugins();\n    const config = setupConfig(configStr)\n\n    // Add and register plugins that are not already loaded\n    let existingPluginsList : string[] = Object.values(existingPlugins).map((plugin: any) => plugin.id);\n    if('plugins' in args[\"config\"]){\n      const plugins = args[\"config\"][\"plugins\"];\n      (plugins as string[]).forEach((plugin: string) => {\n        if (plugin && existingPluginsList.indexOf(plugin) === -1){\n          Reveal.registerPlugin((includedPlugins as any)[plugin]);\n        }\n      });\n\n      //// Remove plugins that are no longer in the list (does not work yet..some signs there is a bug in Reveal.Plugin)\n      // Object.values(existingPlugins as {[id: string]: Reveal.Plugin;}).forEach((plugin: any) => {\n      //   if (plugin.id && plugin.id !=='markdown' && plugins.indexOf(plugin.id) === -1){\n      //     console.log(\"destroy plugin: \" + plugin.id);\n      //     if( typeof plugin.destroy === 'function' ) {\n      //       plugin.destroy();\n      //     }\n      //   }\n      // });\n    }\n    // Reconfigure reveal.js\n    Reveal.configure(config);\n  }, [configStr, args[\"allow_unsafe_html\"]]);\n\n  useEffect(() => {\n    const initState = JSON.parse(initStateStr);\n    if (Reveal.isReady() && Object.keys(initState).length !== 0){\n      Reveal.setState(initState);\n    }\n  }, [initStateStr]);\n\n  useEffect(() => {\n    if (Reveal.isReady()){\n      if (disabled){\n        Reveal.togglePause(true);\n        let viewport = Reveal.getViewportElement();\n        if (viewport){\n          viewport.style.pointerEvents = \"none\";\n        }\n      }\n      else {  \n        Reveal.togglePause(false);\n        let viewport = Reveal.getViewportElement();\n        if (viewport){\n          viewport.style.pointerEvents = \"auto\";\n        }\n      }\n    }\n  }, [disabled]);\n\n  //To do: add support for commands (i.e. control slides from Streamlit)\n  //-----------------\n  //\n\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    if (args[\"height\"] === \"auto\" || typeof args[\"height\"] !== \"number\"){\n      Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n      if (Reveal.isReady()){\n        Reveal.layout();\n      }\n    }\n    else {\n      Streamlit.setFrameHeight(args[\"height\"]);\n      if (Reveal.isReady()){\n        Reveal.layout();\n      }\n    }\n    \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  if (args[\"allow_unsafe_html\"]) {\n    return (\n      <>\n        <GlobalCSS inject={args.css}/>\n        <DangerousDiv innerRef={observe} className=\"slides\" html={args[\"content\"]} />\n      </>\n    )\n  }\n  else {\n    return (\n      <>\n        <GlobalCSS inject={args.css}/>\n        <div ref={observe} className=\"slides\">\n          <section data-markdown={\"\"} {...args[\"markdown_props\"]}>\n            <script type={\"text/template\"}>\n              {args[\"content\"]}\n            </script>\n          </section>\n        </div>\n      </>\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(RevealSlides)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}