{"ast":null,"code":"import _classCallCheck from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { vectorFromValuesWithType } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array as _toBigInt64Array, toBigUint64Array as _toBigUint64Array } from '../util/buffer';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\n/** @ignore */\nexport var IntVector = /*#__PURE__*/function (_BaseVector) {\n  _inherits(IntVector, _BaseVector);\n  var _super = _createSuper(IntVector);\n  function IntVector() {\n    _classCallCheck(this, IntVector);\n    return _super.apply(this, arguments);\n  }\n  _createClass(IntVector, null, [{\n    key: \"from\",\n    value: /** @nocollapse */\n    function from() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      var input = args[0],\n        _args$ = args[1],\n        is64bit = _args$ === void 0 ? false : _args$;\n      var ArrowType = vectorTypeToDataType(this, is64bit);\n      if (input instanceof ArrayBuffer || ArrayBuffer.isView(input)) {\n        var InputType = arrayTypeToDataType(input.constructor, is64bit) || ArrowType;\n        // Special case, infer the Arrow DataType from the input if calling the base\n        // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n        if (ArrowType === null) {\n          ArrowType = InputType;\n        }\n        // If the DataType inferred from the Vector constructor matches the\n        // DataType inferred from the input arguments, return zero-copy view\n        if (ArrowType && ArrowType === InputType) {\n          var type = new ArrowType();\n          var length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n          // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n          if (convert32To64Bit(ArrowType, input.constructor)) {\n            length *= 0.5;\n          }\n          return Vector.new(Data.Int(type, 0, length, 0, null, input));\n        }\n      }\n      if (ArrowType) {\n        // If the DataType inferred from the Vector constructor is different than\n        // the DataType inferred from the input TypedArray, or if input isn't a\n        // TypedArray, use the Builders to construct the result Vector\n        return vectorFromValuesWithType(function () {\n          return new ArrowType();\n        }, input);\n      }\n      if (input instanceof DataView || input instanceof ArrayBuffer) {\n        throw new TypeError(\"Cannot infer integer type from instance of \".concat(input.constructor.name));\n      }\n      throw new TypeError('Unrecognized IntVector input');\n    }\n  }]);\n  return IntVector;\n}(BaseVector);\n/** @ignore */\nexport var Int8Vector = /*#__PURE__*/function (_IntVector) {\n  _inherits(Int8Vector, _IntVector);\n  var _super2 = _createSuper(Int8Vector);\n  function Int8Vector() {\n    _classCallCheck(this, Int8Vector);\n    return _super2.apply(this, arguments);\n  }\n  return _createClass(Int8Vector);\n}(IntVector);\n/** @ignore */\nexport var Int16Vector = /*#__PURE__*/function (_IntVector2) {\n  _inherits(Int16Vector, _IntVector2);\n  var _super3 = _createSuper(Int16Vector);\n  function Int16Vector() {\n    _classCallCheck(this, Int16Vector);\n    return _super3.apply(this, arguments);\n  }\n  return _createClass(Int16Vector);\n}(IntVector);\n/** @ignore */\nexport var Int32Vector = /*#__PURE__*/function (_IntVector3) {\n  _inherits(Int32Vector, _IntVector3);\n  var _super4 = _createSuper(Int32Vector);\n  function Int32Vector() {\n    _classCallCheck(this, Int32Vector);\n    return _super4.apply(this, arguments);\n  }\n  return _createClass(Int32Vector);\n}(IntVector);\n/** @ignore */\nexport var Int64Vector = /*#__PURE__*/function (_IntVector4) {\n  _inherits(Int64Vector, _IntVector4);\n  var _super5 = _createSuper(Int64Vector);\n  function Int64Vector() {\n    _classCallCheck(this, Int64Vector);\n    return _super5.apply(this, arguments);\n  }\n  _createClass(Int64Vector, [{\n    key: \"toBigInt64Array\",\n    value: function toBigInt64Array() {\n      return _toBigInt64Array(this.values);\n    }\n  }, {\n    key: \"values64\",\n    get: function get() {\n      return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n  }]);\n  return Int64Vector;\n}(IntVector);\n/** @ignore */\nexport var Uint8Vector = /*#__PURE__*/function (_IntVector5) {\n  _inherits(Uint8Vector, _IntVector5);\n  var _super6 = _createSuper(Uint8Vector);\n  function Uint8Vector() {\n    _classCallCheck(this, Uint8Vector);\n    return _super6.apply(this, arguments);\n  }\n  return _createClass(Uint8Vector);\n}(IntVector);\n/** @ignore */\nexport var Uint16Vector = /*#__PURE__*/function (_IntVector6) {\n  _inherits(Uint16Vector, _IntVector6);\n  var _super7 = _createSuper(Uint16Vector);\n  function Uint16Vector() {\n    _classCallCheck(this, Uint16Vector);\n    return _super7.apply(this, arguments);\n  }\n  return _createClass(Uint16Vector);\n}(IntVector);\n/** @ignore */\nexport var Uint32Vector = /*#__PURE__*/function (_IntVector7) {\n  _inherits(Uint32Vector, _IntVector7);\n  var _super8 = _createSuper(Uint32Vector);\n  function Uint32Vector() {\n    _classCallCheck(this, Uint32Vector);\n    return _super8.apply(this, arguments);\n  }\n  return _createClass(Uint32Vector);\n}(IntVector);\n/** @ignore */\nexport var Uint64Vector = /*#__PURE__*/function (_IntVector8) {\n  _inherits(Uint64Vector, _IntVector8);\n  var _super9 = _createSuper(Uint64Vector);\n  function Uint64Vector() {\n    _classCallCheck(this, Uint64Vector);\n    return _super9.apply(this, arguments);\n  }\n  _createClass(Uint64Vector, [{\n    key: \"toBigUint64Array\",\n    value: function toBigUint64Array() {\n      return _toBigUint64Array(this.values);\n    }\n  }, {\n    key: \"values64\",\n    get: function get() {\n      return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n  }]);\n  return Uint64Vector;\n}(IntVector);\nvar convert32To64Bit = function convert32To64Bit(typeCtor, dataCtor) {\n  return (typeCtor === Int64 || typeCtor === Uint64) && (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n/** @ignore */\nvar arrayTypeToDataType = function arrayTypeToDataType(ctor, is64bit) {\n  switch (ctor) {\n    case Int8Array:\n      return Int8;\n    case Int16Array:\n      return Int16;\n    case Int32Array:\n      return is64bit ? Int64 : Int32;\n    case BigInt64Array:\n      return Int64;\n    case Uint8Array:\n      return Uint8;\n    case Uint16Array:\n      return Uint16;\n    case Uint32Array:\n      return is64bit ? Uint64 : Uint32;\n    case BigUint64Array:\n      return Uint64;\n    default:\n      return null;\n  }\n};\n/** @ignore */\nvar vectorTypeToDataType = function vectorTypeToDataType(ctor, is64bit) {\n  switch (ctor) {\n    case Int8Vector:\n      return Int8;\n    case Int16Vector:\n      return Int16;\n    case Int32Vector:\n      return is64bit ? Int64 : Int32;\n    case Int64Vector:\n      return Int64;\n    case Uint8Vector:\n      return Uint8;\n    case Uint16Vector:\n      return Uint16;\n    case Uint32Vector:\n      return is64bit ? Uint64 : Uint32;\n    case Uint64Vector:\n      return Uint64;\n    default:\n      return null;\n  }\n};","map":{"version":3,"names":["Data","Vector","BaseVector","vectorFromValuesWithType","BigInt64Array","BigUint64Array","toBigInt64Array","toBigUint64Array","Uint8","Uint16","Uint32","Uint64","Int8","Int16","Int32","Int64","IntVector","_BaseVector","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","from","_len","length","args","Array","_key","input","_args$","is64bit","ArrowType","vectorTypeToDataType","ArrayBuffer","isView","InputType","arrayTypeToDataType","constructor","type","byteLength","ArrayType","BYTES_PER_ELEMENT","convert32To64Bit","new","Int","DataView","TypeError","concat","name","Int8Vector","_IntVector","_super2","Int16Vector","_IntVector2","_super3","Int32Vector","_IntVector3","_super4","Int64Vector","_IntVector4","_super5","values","get","_values64","Uint8Vector","_IntVector5","_super6","Uint16Vector","_IntVector6","_super7","Uint32Vector","_IntVector7","_super8","Uint64Vector","_IntVector8","_super9","typeCtor","dataCtor","Int32Array","Uint32Array","ctor","Int8Array","Int16Array","Uint8Array","Uint16Array"],"sources":["vector/int.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}