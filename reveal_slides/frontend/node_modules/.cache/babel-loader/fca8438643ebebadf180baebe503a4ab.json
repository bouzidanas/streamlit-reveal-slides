{"ast":null,"code":"var _jsxFileName = \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx\";\nimport { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport Reveal from 'reveal.js';\nimport Markdown from 'reveal.js/plugin/markdown/markdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass RevealSlides extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      content: this.props.args[\"content\"],\n      allowHTML: this.props.args[\"unsafe_allow_html\"],\n      config: {}\n    };\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reveal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slides\",\n          style: {\n            height: \"500px\"\n          },\n          children: this.state.allowHTML ? this.state.content : /*#__PURE__*/_jsxDEV(\"section\", {\n            \"data-markdown\": true,\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              \"data-template\": true,\n              children: this.state.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }, this);\n    };\n    this.componentDidMount = () => {\n      let deck = new Reveal({\n        plugins: [Markdown]\n      });\n      deck.initialize({\n        embedded: true\n      });\n    };\n    this.componentDidUpdate = () => {};\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default _c = withStreamlitConnection(RevealSlides);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["StreamlitComponentBase","withStreamlitConnection","React","Reveal","Markdown","jsxDEV","_jsxDEV","RevealSlides","constructor","arguments","state","content","props","args","allowHTML","config","render","className","children","style","height","fileName","_jsxFileName","lineNumber","columnNumber","componentDidMount","deck","plugins","initialize","embedded","componentDidUpdate","_c","$RefreshReg$"],"sources":["/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx"],"sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport Reveal from 'reveal.js';\nimport Markdown from 'reveal.js/plugin/markdown/markdown';\nimport { config } from '../../../../streamlit-code-editor/code_editor/frontend/src/streamlit-ace-build/ace';\n\ninterface State {\n  content: string\n  allowHTML: boolean\n  config: object\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass RevealSlides extends StreamlitComponentBase<State> {\n  public state = { content: this.props.args[\"content\"], allowHTML: this.props.args[\"unsafe_allow_html\"], config: {} }\n\n  public render = (): ReactNode => {\n\n    return (\n      <div className=\"reveal\">\n        <div className=\"slides\" style={{height: \"500px\"}}>\n          {this.state.allowHTML? this.state.content:\n            <section data-markdown>\n              <textarea data-template>\n                {this.state.content}\n              </textarea>\n            </section>}\n        </div>\n      </div>\n    )\n  }\n\n  public componentDidMount = (): void => {\n    let deck = new Reveal({\n      plugins: [ Markdown ]\n    })\n    deck.initialize({\n      embedded: true,\n    });\n  }\n\n  public componentDidUpdate = (): void => {}\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(RevealSlides)\n"],"mappings":";AAAA,SAEEA,sBAAsB,EACtBC,uBAAuB,QAClB,yBAAyB;AAChC,OAAOC,KAAK,MAAqB,OAAO;AAExC,OAAOC,MAAM,MAAM,WAAW;AAC9B,OAAOC,QAAQ,MAAM,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS1D;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAASP,sBAAsB,CAAQ;EAAAQ,YAAA;IAAA,SAAAC,SAAA;IAAA,KAChDC,KAAK,GAAG;MAAEC,OAAO,EAAE,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,SAAS,CAAC;MAAEC,SAAS,EAAE,IAAI,CAACF,KAAK,CAACC,IAAI,CAAC,mBAAmB,CAAC;MAAEE,MAAM,EAAE,CAAC;IAAE,CAAC;IAAA,KAE5GC,MAAM,GAAG,MAAiB;MAE/B,oBACEV,OAAA;QAAKW,SAAS,EAAC,QAAQ;QAAAC,QAAA,eACrBZ,OAAA;UAAKW,SAAS,EAAC,QAAQ;UAACE,KAAK,EAAE;YAACC,MAAM,EAAE;UAAO,CAAE;UAAAF,QAAA,EAC9C,IAAI,CAACR,KAAK,CAACI,SAAS,GAAE,IAAI,CAACJ,KAAK,CAACC,OAAO,gBACvCL,OAAA;YAAS,qBAAa;YAAAY,QAAA,eACpBZ,OAAA;cAAU,qBAAa;cAAAY,QAAA,EACpB,IAAI,CAACR,KAAK,CAACC;YAAO;cAAAU,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACX;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAEV,CAAC;IAAA,KAEMC,iBAAiB,GAAG,MAAY;MACrC,IAAIC,IAAI,GAAG,IAAIvB,MAAM,CAAC;QACpBwB,OAAO,EAAE,CAAEvB,QAAQ;MACrB,CAAC,CAAC;MACFsB,IAAI,CAACE,UAAU,CAAC;QACdC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC;IAAA,KAEMC,kBAAkB,GAAG,MAAY,CAAC,CAAC;EAAA;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAAC,EAAA,GAAe9B,uBAAuB,CAACM,YAAY,CAAC;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}