{"ast":null,"code":"import _toConsumableArray from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _inherits from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ITERATOR_DONE } from '../io/interfaces';\n/** @ignore */\nvar invalidMessageType = function invalidMessageType(type) {\n  return \"Expected \".concat(MessageHeader[type], \" Message in stream, but was null or length 0.\");\n};\n/** @ignore */\nvar nullMessage = function nullMessage(type) {\n  return \"Header pointer of flatbuffer-encoded \".concat(MessageHeader[type], \" Message is null or length 0.\");\n};\n/** @ignore */\nvar invalidMessageMetadata = function invalidMessageMetadata(expected, actual) {\n  return \"Expected to read \".concat(expected, \" metadata bytes, but only read \").concat(actual, \".\");\n};\n/** @ignore */\nvar invalidMessageBodyLength = function invalidMessageBodyLength(expected, actual) {\n  return \"Expected to read \".concat(expected, \" bytes for message body, but only read \").concat(actual, \".\");\n};\n/** @ignore */\nexport var MessageReader = /*#__PURE__*/function (_Symbol$iterator) {\n  function MessageReader(source) {\n    _classCallCheck(this, MessageReader);\n    this.source = source instanceof ByteStream ? source : new ByteStream(source);\n  }\n  _createClass(MessageReader, [{\n    key: _Symbol$iterator,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var r;\n      if ((r = this.readMetadataLength()).done) {\n        return ITERATOR_DONE;\n      }\n      // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n      // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n      // pre-v0.15 message, where the first 4 bytes are the metadata length.\n      if (r.value === -1 && (r = this.readMetadataLength()).done) {\n        return ITERATOR_DONE;\n      }\n      if ((r = this.readMetadata(r.value)).done) {\n        return ITERATOR_DONE;\n      }\n      return r;\n    }\n  }, {\n    key: \"throw\",\n    value: function _throw(value) {\n      return this.source.throw(value);\n    }\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      return this.source.return(value);\n    }\n  }, {\n    key: \"readMessage\",\n    value: function readMessage(type) {\n      var r;\n      if ((r = this.next()).done) {\n        return null;\n      }\n      if (type != null && r.value.headerType !== type) {\n        throw new Error(invalidMessageType(type));\n      }\n      return r.value;\n    }\n  }, {\n    key: \"readMessageBody\",\n    value: function readMessageBody(bodyLength) {\n      if (bodyLength <= 0) {\n        return new Uint8Array(0);\n      }\n      var buf = toUint8Array(this.source.read(bodyLength));\n      if (buf.byteLength < bodyLength) {\n        throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n      }\n      // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n      // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n      return (/* 1. */buf.byteOffset % 8 === 0 && /* 2. */buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice()\n      );\n    }\n  }, {\n    key: \"readSchema\",\n    value: function readSchema() {\n      var throwIfNull = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var type = MessageHeader.Schema;\n      var message = this.readMessage(type);\n      var schema = message && message.header();\n      if (throwIfNull && !schema) {\n        throw new Error(nullMessage(type));\n      }\n      return schema;\n    }\n  }, {\n    key: \"readMetadataLength\",\n    value: function readMetadataLength() {\n      var buf = this.source.read(PADDING);\n      var bb = buf && new ByteBuffer(buf);\n      var len = bb && bb.readInt32(0) || 0;\n      return {\n        done: len === 0,\n        value: len\n      };\n    }\n  }, {\n    key: \"readMetadata\",\n    value: function readMetadata(metadataLength) {\n      var buf = this.source.read(metadataLength);\n      if (!buf) {\n        return ITERATOR_DONE;\n      }\n      if (buf.byteLength < metadataLength) {\n        throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n      }\n      return {\n        done: false,\n        value: Message.decode(buf)\n      };\n    }\n  }]);\n  return MessageReader;\n}(Symbol.iterator);\n/** @ignore */\nexport var AsyncMessageReader = /*#__PURE__*/function (_Symbol$asyncIterator) {\n  function AsyncMessageReader(source, byteLength) {\n    _classCallCheck(this, AsyncMessageReader);\n    this.source = source instanceof AsyncByteStream ? source : isFileHandle(source) ? new AsyncRandomAccessFile(source, byteLength) : new AsyncByteStream(source);\n  }\n  _createClass(AsyncMessageReader, [{\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      return this;\n    }\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var r;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.readMetadataLength();\n            case 2:\n              if (!(r = _context.sent).done) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\", ITERATOR_DONE);\n            case 4:\n              _context.t0 = r.value === -1;\n              if (!_context.t0) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 8;\n              return this.readMetadataLength();\n            case 8:\n              _context.t0 = (r = _context.sent).done;\n            case 9:\n              if (!_context.t0) {\n                _context.next = 11;\n                break;\n              }\n              return _context.abrupt(\"return\", ITERATOR_DONE);\n            case 11:\n              _context.next = 13;\n              return this.readMetadata(r.value);\n            case 13:\n              if (!(r = _context.sent).done) {\n                _context.next = 15;\n                break;\n              }\n              return _context.abrupt(\"return\", ITERATOR_DONE);\n            case 15:\n              return _context.abrupt(\"return\", r);\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function next() {\n        return _next.apply(this, arguments);\n      }\n      return next;\n    }()\n  }, {\n    key: \"throw\",\n    value: function () {\n      var _throw2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(value) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.source.throw(value);\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _throw(_x) {\n        return _throw2.apply(this, arguments);\n      }\n      return _throw;\n    }()\n  }, {\n    key: \"return\",\n    value: function () {\n      var _return2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(value) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.source.return(value);\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _return(_x2) {\n        return _return2.apply(this, arguments);\n      }\n      return _return;\n    }()\n  }, {\n    key: \"readMessage\",\n    value: function () {\n      var _readMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(type) {\n        var r;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.next();\n            case 2:\n              if (!(r = _context4.sent).done) {\n                _context4.next = 4;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 4:\n              if (!(type != null && r.value.headerType !== type)) {\n                _context4.next = 6;\n                break;\n              }\n              throw new Error(invalidMessageType(type));\n            case 6:\n              return _context4.abrupt(\"return\", r.value);\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function readMessage(_x3) {\n        return _readMessage.apply(this, arguments);\n      }\n      return readMessage;\n    }()\n  }, {\n    key: \"readMessageBody\",\n    value: function () {\n      var _readMessageBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(bodyLength) {\n        var buf;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!(bodyLength <= 0)) {\n                _context5.next = 2;\n                break;\n              }\n              return _context5.abrupt(\"return\", new Uint8Array(0));\n            case 2:\n              _context5.t0 = toUint8Array;\n              _context5.next = 5;\n              return this.source.read(bodyLength);\n            case 5:\n              _context5.t1 = _context5.sent;\n              buf = (0, _context5.t0)(_context5.t1);\n              if (!(buf.byteLength < bodyLength)) {\n                _context5.next = 9;\n                break;\n              }\n              throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n            case 9:\n              return _context5.abrupt(\"return\", /* 1. */buf.byteOffset % 8 === 0 && /* 2. */buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice());\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function readMessageBody(_x4) {\n        return _readMessageBody.apply(this, arguments);\n      }\n      return readMessageBody;\n    }()\n  }, {\n    key: \"readSchema\",\n    value: function () {\n      var _readSchema = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var throwIfNull,\n          type,\n          message,\n          schema,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              throwIfNull = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : false;\n              type = MessageHeader.Schema;\n              _context6.next = 4;\n              return this.readMessage(type);\n            case 4:\n              message = _context6.sent;\n              schema = message && message.header();\n              if (!(throwIfNull && !schema)) {\n                _context6.next = 8;\n                break;\n              }\n              throw new Error(nullMessage(type));\n            case 8:\n              return _context6.abrupt(\"return\", schema);\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function readSchema() {\n        return _readSchema.apply(this, arguments);\n      }\n      return readSchema;\n    }()\n  }, {\n    key: \"readMetadataLength\",\n    value: function () {\n      var _readMetadataLength = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var buf, bb, len;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.source.read(PADDING);\n            case 2:\n              buf = _context7.sent;\n              bb = buf && new ByteBuffer(buf);\n              len = bb && bb.readInt32(0) || 0;\n              return _context7.abrupt(\"return\", {\n                done: len === 0,\n                value: len\n              });\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function readMetadataLength() {\n        return _readMetadataLength.apply(this, arguments);\n      }\n      return readMetadataLength;\n    }()\n  }, {\n    key: \"readMetadata\",\n    value: function () {\n      var _readMetadata = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(metadataLength) {\n        var buf;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return this.source.read(metadataLength);\n            case 2:\n              buf = _context8.sent;\n              if (buf) {\n                _context8.next = 5;\n                break;\n              }\n              return _context8.abrupt(\"return\", ITERATOR_DONE);\n            case 5:\n              if (!(buf.byteLength < metadataLength)) {\n                _context8.next = 7;\n                break;\n              }\n              throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n            case 7:\n              return _context8.abrupt(\"return\", {\n                done: false,\n                value: Message.decode(buf)\n              });\n            case 8:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function readMetadata(_x5) {\n        return _readMetadata.apply(this, arguments);\n      }\n      return readMetadata;\n    }()\n  }]);\n  return AsyncMessageReader;\n}(Symbol.asyncIterator);\n/** @ignore */\nexport var JSONMessageReader = /*#__PURE__*/function (_MessageReader) {\n  _inherits(JSONMessageReader, _MessageReader);\n  var _super = _createSuper(JSONMessageReader);\n  function JSONMessageReader(source) {\n    var _this;\n    _classCallCheck(this, JSONMessageReader);\n    _this = _super.call(this, new Uint8Array(0));\n    _this._schema = false;\n    _this._body = [];\n    _this._batchIndex = 0;\n    _this._dictionaryIndex = 0;\n    _this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    return _this;\n  }\n  _createClass(JSONMessageReader, [{\n    key: \"next\",\n    value: function next() {\n      var _json = this._json;\n      if (!this._schema) {\n        this._schema = true;\n        var message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n        return {\n          done: false,\n          value: message\n        };\n      }\n      if (this._dictionaryIndex < _json.dictionaries.length) {\n        var batch = _json.dictionaries[this._dictionaryIndex++];\n        this._body = batch['data']['columns'];\n        var _message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n        return {\n          done: false,\n          value: _message\n        };\n      }\n      if (this._batchIndex < _json.batches.length) {\n        var _batch = _json.batches[this._batchIndex++];\n        this._body = _batch['columns'];\n        var _message2 = Message.fromJSON(_batch, MessageHeader.RecordBatch);\n        return {\n          done: false,\n          value: _message2\n        };\n      }\n      this._body = [];\n      return ITERATOR_DONE;\n    }\n  }, {\n    key: \"readMessageBody\",\n    value: function readMessageBody(_bodyLength) {\n      return flattenDataSources(this._body);\n      function flattenDataSources(xs) {\n        return (xs || []).reduce(function (buffers, column) {\n          return [].concat(_toConsumableArray(buffers), _toConsumableArray(column['VALIDITY'] && [column['VALIDITY']] || []), _toConsumableArray(column['TYPE'] && [column['TYPE']] || []), _toConsumableArray(column['OFFSET'] && [column['OFFSET']] || []), _toConsumableArray(column['DATA'] && [column['DATA']] || []), _toConsumableArray(flattenDataSources(column['children'])));\n        }, []);\n      }\n    }\n  }, {\n    key: \"readMessage\",\n    value: function readMessage(type) {\n      var r;\n      if ((r = this.next()).done) {\n        return null;\n      }\n      if (type != null && r.value.headerType !== type) {\n        throw new Error(invalidMessageType(type));\n      }\n      return r.value;\n    }\n  }, {\n    key: \"readSchema\",\n    value: function readSchema() {\n      var type = MessageHeader.Schema;\n      var message = this.readMessage(type);\n      var schema = message && message.header();\n      if (!message || !schema) {\n        throw new Error(nullMessage(type));\n      }\n      return schema;\n    }\n  }]);\n  return JSONMessageReader;\n}(MessageReader);\n/** @ignore */\nexport var PADDING = 4;\n/** @ignore */\nexport var MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport var MAGIC = new Uint8Array(MAGIC_STR.length);\nfor (var i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n  MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n/** @ignore */\nexport function checkForMagicArrowString(buffer) {\n  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  for (var _i = -1, n = MAGIC.length; ++_i < n;) {\n    if (MAGIC[_i] !== buffer[index + _i]) {\n      return false;\n    }\n  }\n  return true;\n}\n/** @ignore */\nexport var magicLength = MAGIC.length;\n/** @ignore */\nexport var magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport var magicX2AndPadding = magicLength * 2 + PADDING;","map":{"version":3,"names":["MessageHeader","flatbuffers","ByteBuffer","Message","isFileHandle","AsyncRandomAccessFile","toUint8Array","ByteStream","AsyncByteStream","ArrowJSON","ITERATOR_DONE","invalidMessageType","type","concat","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","MessageReader","_Symbol$iterator","source","_classCallCheck","_createClass","key","value","next","r","readMetadataLength","done","readMetadata","_throw","throw","_return","return","readMessage","headerType","Error","readMessageBody","bodyLength","Uint8Array","buf","read","byteLength","byteOffset","buffer","slice","readSchema","throwIfNull","arguments","length","undefined","Schema","message","schema","header","PADDING","bb","len","readInt32","metadataLength","decode","Symbol","iterator","AsyncMessageReader","_Symbol$asyncIterator","_next","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","sent","abrupt","t0","stop","apply","_throw2","_callee2","_callee2$","_context2","_x","_return2","_callee3","_callee3$","_context3","_x2","_readMessage","_callee4","_callee4$","_context4","_x3","_readMessageBody","_callee5","_callee5$","_context5","t1","_x4","_readSchema","_callee6","_args6","_callee6$","_context6","_readMetadataLength","_callee7","_callee7$","_context7","_readMetadata","_callee8","_callee8$","_context8","_x5","asyncIterator","JSONMessageReader","_MessageReader","_inherits","_super","_createSuper","_this","call","_schema","_body","_batchIndex","_dictionaryIndex","_json","fromJSON","dictionaries","batch","DictionaryBatch","batches","RecordBatch","_bodyLength","flattenDataSources","xs","reduce","buffers","column","_toConsumableArray","MAGIC_STR","MAGIC","i","charCodeAt","checkForMagicArrowString","index","n","magicLength","magicAndPadding","magicX2AndPadding"],"sources":["ipc/message.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}