{"ast":null,"code":"var _jsxFileName = \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { useEffect } from \"react\";\nimport Reveal from 'reveal.js';\nimport RevealMarkdown from 'reveal.js/plugin/markdown/markdown';\nimport RevealHighlight from 'reveal.js/plugin/highlight/highlight';\nimport RevealMath from 'reveal.js/plugin/math/math';\nimport RevealSearch from 'reveal.js/plugin/search/search';\nimport RevealNotes from 'reveal.js/plugin/notes/notes';\nimport RevealZoom from 'reveal.js/plugin/zoom/zoom';\nimport 'reveal.js/dist/reveal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst includedPlugins = {\n  \"RevealMarkdown\": RevealMarkdown,\n  \"RevealHighlight\": RevealHighlight,\n  \"RevealMath.KaTeX\": RevealMath.KaTeX,\n  \"RevealMath.MathJax2\": RevealMath.MathJax2,\n  \"RevealMath.MathJax3\": RevealMath.MathJax3,\n  \"RevealSearch\": RevealSearch,\n  \"RevealNotes\": RevealNotes,\n  \"RevealZoom\": RevealZoom\n};\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst RevealSlides = _ref => {\n  _s();\n  let {\n    args,\n    disabled\n  } = _ref;\n  const configStr = JSON.stringify(args[\"config\"]);\n  useEffect(() => {\n    // code to run on component mount goes here\n    import('../node_modules/reveal.js/dist/theme/' + args.theme + '.css');\n  }, [args.theme]);\n  useEffect(() => {\n    const config = JSON.parse(configStr);\n    // code to run after render goes here\n    if (args[\"allow_unsafe_html\"]) {\n      // do nothing\n    } else {\n      if ('plugins' in config) {\n        var arr = config['plugins'];\n        arr.forEach(function (moduleName, index) {\n          if (moduleName in includedPlugins) {\n            arr[index] = includedPlugins[moduleName];\n          } else {\n            arr[index] = null;\n          }\n        });\n        config['plugins'] = arr.filter(x => !!x);\n        if (!config['plugins'].includes(RevealMarkdown)) {\n          config['plugins'].push(RevealMarkdown);\n        }\n      } else {\n        config['plugins'] = [RevealMarkdown];\n      }\n    }\n    Reveal.initialize(config).then(() => {\n      // reveal.js is ready\n      Reveal.on('slidechanged', event => {\n        Streamlit.setComponentValue({\n          indexh: event.indexh,\n          indexv: event.indexv\n        });\n      });\n    });\n    return () => {\n      // code to run on component unmount goes here\n      Reveal.destroy();\n    };\n  }, [configStr, args[\"allow_unsafe_html\"]]);\n\n  /**\n  * resizeObserver observes changes in elements its given to observe and is used here\n  * to communicate to streamlit the height of the component that has changed\n  * so that streamlit can adjust the iframe containing the component accordingly.\n  */\n  const resizeObserver = new ResizeObserver(entries => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    if (args[\"height\"] === \"auto\" || typeof args[\"height\"] !== \"number\") {\n      var _entries$0$contentBox;\n      Streamlit.setFrameHeight((_entries$0$contentBox = entries[0].contentBoxSize.blockSize) !== null && _entries$0$contentBox !== void 0 ? _entries$0$contentBox : entries[0].contentRect.height);\n    } else {\n      Streamlit.setFrameHeight(args[\"height\"]);\n    }\n  });\n  const observe = divElem => {\n    divElem ? resizeObserver.observe(divElem) : resizeObserver.disconnect();\n  };\n  if (args[\"allow_unsafe_html\"]) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: observe,\n      className: \"slides\",\n      dangerouslySetInnerHTML: {\n        __html: args[\"content\"]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: observe,\n      className: \"slides\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        \"data-markdown\": \"\",\n        ...args[\"markdown_props\"],\n        children: /*#__PURE__*/_jsxDEV(\"script\", {\n          type: \"text/template\",\n          children: args[\"content\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n_s(RevealSlides, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = RevealSlides;\nexport default _c2 = withStreamlitConnection(RevealSlides);\nvar _c, _c2;\n$RefreshReg$(_c, \"RevealSlides\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","useEffect","Reveal","RevealMarkdown","RevealHighlight","RevealMath","RevealSearch","RevealNotes","RevealZoom","jsxDEV","_jsxDEV","includedPlugins","KaTeX","MathJax2","MathJax3","RevealSlides","_ref","_s","args","disabled","configStr","JSON","stringify","theme","config","parse","arr","forEach","moduleName","index","filter","x","includes","push","initialize","then","on","event","setComponentValue","indexh","indexv","destroy","resizeObserver","ResizeObserver","entries","_entries$0$contentBox","setFrameHeight","contentBoxSize","blockSize","contentRect","height","observe","divElem","disconnect","ref","className","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","children","type","_c","_c2","$RefreshReg$"],"sources":["/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx"],"sourcesContent":["import {\n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection,\n  Theme,\n} from \"streamlit-component-lib\"\nimport { useEffect } from \"react\"\n\n\nimport Reveal from 'reveal.js';\nimport RevealMarkdown from 'reveal.js/plugin/markdown/markdown';\nimport RevealHighlight from 'reveal.js/plugin/highlight/highlight';\nimport RevealMath from 'reveal.js/plugin/math/math';\nimport RevealSearch from 'reveal.js/plugin/search/search';\nimport RevealNotes from 'reveal.js/plugin/notes/notes';\nimport RevealZoom from 'reveal.js/plugin/zoom/zoom';\n\n\nimport 'reveal.js/dist/reveal.css';\n\ninterface RevealSlidesProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst includedPlugins = {\"RevealMarkdown\": RevealMarkdown, \"RevealHighlight\": RevealHighlight, \"RevealMath.KaTeX\": RevealMath.KaTeX, \"RevealMath.MathJax2\": RevealMath.MathJax2, \"RevealMath.MathJax3\": RevealMath.MathJax3, \"RevealSearch\": RevealSearch, \"RevealNotes\": RevealNotes, \"RevealZoom\": RevealZoom}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst RevealSlides = ({ args, disabled }: RevealSlidesProps) => {  \n  \n\n  const configStr = JSON.stringify(args[\"config\"])\n\n  useEffect(() => {\n    // code to run on component mount goes here\n    import('../node_modules/reveal.js/dist/theme/' + args.theme + '.css')\n  }, [args.theme]);\n\n  useEffect(() => {\n    const config = JSON.parse(configStr)\n    // code to run after render goes here\n    if (args[\"allow_unsafe_html\"]) {\n      // do nothing\n    }\n    else {\n      if ('plugins' in config){\n        var arr = config['plugins'];\n        arr.forEach(function(moduleName: string, index: number) {\n          if (moduleName in includedPlugins){\n            arr[index] = (includedPlugins as any)[moduleName];\n          }\n          else {\n            arr[index] = null;\n          }\n        });\n        config['plugins'] = arr.filter((x:any) => !!x) as any[];\n        if(!config['plugins'].includes(RevealMarkdown)){\n          config['plugins'].push(RevealMarkdown);\n        }\n      }\n      else {\n        config['plugins'] = [RevealMarkdown];\n      }\n    }\n    Reveal.initialize(config).then(() => {\n      // reveal.js is ready\n      Reveal.on( 'slidechanged', event => {\n        Streamlit.setComponentValue({indexh: (event as any).indexh, indexv: (event as any).indexv});\n      });\n    });\n\n    return () => {\n      // code to run on component unmount goes here\n      Reveal.destroy();  \n    }\n  }, [configStr, args[\"allow_unsafe_html\"]]);\n\n    /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    if (args[\"height\"] === \"auto\" || typeof args[\"height\"] !== \"number\"){\n      Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n    }\n    else {\n      Streamlit.setFrameHeight(args[\"height\"]);\n    }\n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  if (args[\"allow_unsafe_html\"]) {\n    return (\n      <div ref={observe} className=\"slides\" dangerouslySetInnerHTML={{__html: args[\"content\"]}}>\n      </div>\n    )\n  }\n  else {\n    return (\n      <div ref={observe} className=\"slides\">\n        <section data-markdown={\"\"} {...args[\"markdown_props\"]}>\n          <script type={\"text/template\"}>\n          {args[\"content\"]}\n          </script>\n        </section>\n      </div>\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(RevealSlides)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}