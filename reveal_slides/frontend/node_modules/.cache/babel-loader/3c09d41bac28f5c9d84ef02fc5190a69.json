{"ast":null,"code":"import _regeneratorRuntime from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _get from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _awaitAsyncGenerator from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport { strideForType } from './type';\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport var Builder = /*#__PURE__*/function () {\n  /**\n   * Construct a builder with the given Arrow DataType with optional null values,\n   * which will be interpreted as \"null\" when set or appended to the `Builder`.\n   * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n   */\n  function Builder(_ref2) {\n    var type = _ref2['type'],\n      nulls = _ref2['nullValues'];\n    _classCallCheck(this, Builder);\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    this.length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    this.finished = false;\n    this.type = type;\n    this.children = [];\n    this.nullValues = nulls;\n    this.stride = strideForType(type);\n    this._nulls = new BitmapBufferBuilder();\n    if (nulls && nulls.length > 0) {\n      this._isValid = createIsValidFunction(nulls);\n    }\n  }\n  /**\n   * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n   * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n   * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n   *\n   * @typeparam T The `DataType` of the `Builder` to create.\n   * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n   * @nocollapse\n   */\n  // @ts-ignore\n  _createClass(Builder, [{\n    key: \"toVector\",\n    value:\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    function toVector() {\n      return Vector.new(this.flush());\n    }\n  }, {\n    key: \"ArrayType\",\n    get: function get() {\n      return this.type.ArrayType;\n    }\n  }, {\n    key: \"nullCount\",\n    get: function get() {\n      return this._nulls.numInvalid;\n    }\n  }, {\n    key: \"numChildren\",\n    get: function get() {\n      return this.children.length;\n    }\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      var size = 0;\n      this._offsets && (size += this._offsets.byteLength);\n      this._values && (size += this._values.byteLength);\n      this._nulls && (size += this._nulls.byteLength);\n      this._typeIds && (size += this._typeIds.byteLength);\n      return this.children.reduce(function (size, child) {\n        return size + child.byteLength;\n      }, size);\n    }\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n  }, {\n    key: \"reservedLength\",\n    get: function get() {\n      return this._nulls.reservedLength;\n    }\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n  }, {\n    key: \"reservedByteLength\",\n    get: function get() {\n      var size = 0;\n      this._offsets && (size += this._offsets.reservedByteLength);\n      this._values && (size += this._values.reservedByteLength);\n      this._nulls && (size += this._nulls.reservedByteLength);\n      this._typeIds && (size += this._typeIds.reservedByteLength);\n      return this.children.reduce(function (size, child) {\n        return size + child.reservedByteLength;\n      }, size);\n    }\n  }, {\n    key: \"valueOffsets\",\n    get: function get() {\n      return this._offsets ? this._offsets.buffer : null;\n    }\n  }, {\n    key: \"values\",\n    get: function get() {\n      return this._values ? this._values.buffer : null;\n    }\n  }, {\n    key: \"nullBitmap\",\n    get: function get() {\n      return this._nulls ? this._nulls.buffer : null;\n    }\n  }, {\n    key: \"typeIds\",\n    get: function get() {\n      return this._typeIds ? this._typeIds.buffer : null;\n    }\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n  }, {\n    key: \"append\",\n    value: function append(value) {\n      return this.set(this.length, value);\n    }\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n  }, {\n    key: \"isValid\",\n    value: function isValid(value) {\n      return this._isValid(value);\n    }\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      if (this.setValid(index, this.isValid(value))) {\n        this.setValue(index, value);\n      }\n      return this;\n    }\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n  }, {\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      this._setValue(this, index, value);\n    }\n  }, {\n    key: \"setValid\",\n    value: function setValid(index, valid) {\n      this.length = this._nulls.set(index, +valid).length;\n      return valid;\n    }\n    // @ts-ignore\n  }, {\n    key: \"addChild\",\n    value: function addChild(child) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\".concat(this.numChildren);\n      throw new Error(\"Cannot append children to non-nested type \\\"\".concat(this.type, \"\\\"\"));\n    }\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n  }, {\n    key: \"getChildAt\",\n    value: function getChildAt(index) {\n      return this.children[index] || null;\n    }\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var buffers = [];\n      var values = this._values;\n      var offsets = this._offsets;\n      var typeIds = this._typeIds;\n      var length = this.length,\n        nullCount = this.nullCount;\n      if (typeIds) {\n        /* Unions */\n        buffers[BufferType.TYPE] = typeIds.flush(length);\n        // DenseUnions\n        offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n      } else if (offsets) {\n        /* Variable-width primitives (Binary, Utf8) and Lists */\n        // Binary, Utf8\n        values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n        buffers[BufferType.OFFSET] = offsets.flush(length);\n      } else if (values) {\n        /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n        buffers[BufferType.DATA] = values.flush(length);\n      }\n      nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n      var data = Data.new(this.type, 0, length, nullCount, buffers, this.children.map(function (child) {\n        return child.flush();\n      }));\n      this.clear();\n      return data;\n    }\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this.finished = true;\n      this.children.forEach(function (child) {\n        return child.finish();\n      });\n      return this;\n    }\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.length = 0;\n      this._offsets && this._offsets.clear();\n      this._values && this._values.clear();\n      this._nulls && this._nulls.clear();\n      this._typeIds && this._typeIds.clear();\n      this.children.forEach(function (child) {\n        return child.clear();\n      });\n      return this;\n    }\n  }], [{\n    key: \"new\",\n    value: function _new(options) {}\n    /** @nocollapse */\n    // @ts-ignore\n  }, {\n    key: \"throughNode\",\n    value: function throughNode(options) {\n      throw new Error(\"\\\"throughNode\\\" not available in this environment\");\n    }\n    /** @nocollapse */\n    // @ts-ignore\n  }, {\n    key: \"throughDOM\",\n    value: function throughDOM(options) {\n      throw new Error(\"\\\"throughDOM\\\" not available in this environment\");\n    }\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n  }, {\n    key: \"throughIterable\",\n    value: function throughIterable(options) {\n      return _throughIterable(options);\n    }\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n  }, {\n    key: \"throughAsyncIterable\",\n    value: function throughAsyncIterable(options) {\n      return _throughAsyncIterable(options);\n    }\n  }]);\n  return Builder;\n}();\nBuilder.prototype.length = 1;\nBuilder.prototype.stride = 1;\nBuilder.prototype.children = null;\nBuilder.prototype.finished = false;\nBuilder.prototype.nullValues = null;\nBuilder.prototype._isValid = function () {\n  return true;\n};\n/** @ignore */\nexport var FixedWidthBuilder = /*#__PURE__*/function (_Builder) {\n  _inherits(FixedWidthBuilder, _Builder);\n  var _super = _createSuper(FixedWidthBuilder);\n  function FixedWidthBuilder(opts) {\n    var _this;\n    _classCallCheck(this, FixedWidthBuilder);\n    _this = _super.call(this, opts);\n    _this._values = new DataBufferBuilder(new _this.ArrayType(0), _this.stride);\n    return _this;\n  }\n  _createClass(FixedWidthBuilder, [{\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      var values = this._values;\n      values.reserve(index - values.length + 1);\n      return _get(_getPrototypeOf(FixedWidthBuilder.prototype), \"setValue\", this).call(this, index, value);\n    }\n  }]);\n  return FixedWidthBuilder;\n}(Builder);\n/** @ignore */\nexport var VariableWidthBuilder = /*#__PURE__*/function (_Builder2) {\n  _inherits(VariableWidthBuilder, _Builder2);\n  var _super2 = _createSuper(VariableWidthBuilder);\n  function VariableWidthBuilder(opts) {\n    var _this2;\n    _classCallCheck(this, VariableWidthBuilder);\n    _this2 = _super2.call(this, opts);\n    _this2._pendingLength = 0;\n    _this2._offsets = new OffsetsBufferBuilder();\n    return _this2;\n  }\n  _createClass(VariableWidthBuilder, [{\n    key: \"setValue\",\n    value: function setValue(index, value) {\n      var pending = this._pending || (this._pending = new Map());\n      var current = pending.get(index);\n      current && (this._pendingLength -= current.length);\n      this._pendingLength += value.length;\n      pending.set(index, value);\n    }\n  }, {\n    key: \"setValid\",\n    value: function setValid(index, isValid) {\n      if (!_get(_getPrototypeOf(VariableWidthBuilder.prototype), \"setValid\", this).call(this, index, isValid)) {\n        (this._pending || (this._pending = new Map())).set(index, undefined);\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._pendingLength = 0;\n      this._pending = undefined;\n      return _get(_getPrototypeOf(VariableWidthBuilder.prototype), \"clear\", this).call(this);\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      this._flush();\n      return _get(_getPrototypeOf(VariableWidthBuilder.prototype), \"flush\", this).call(this);\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this._flush();\n      return _get(_getPrototypeOf(VariableWidthBuilder.prototype), \"finish\", this).call(this);\n    }\n  }, {\n    key: \"_flush\",\n    value: function _flush() {\n      var pending = this._pending;\n      var pendingLength = this._pendingLength;\n      this._pendingLength = 0;\n      this._pending = undefined;\n      if (pending && pending.size > 0) {\n        this._flushPending(pending, pendingLength);\n      }\n      return this;\n    }\n  }]);\n  return VariableWidthBuilder;\n}(Builder);\n/** @ignore */\nfunction _throughIterable(options) {\n  var _options$queueingStra = options['queueingStrategy'],\n    queueingStrategy = _options$queueingStra === void 0 ? 'count' : _options$queueingStra;\n  var _options$highWaterMar = options['highWaterMark'],\n    highWaterMark = _options$highWaterMar === void 0 ? queueingStrategy !== 'bytes' ? 1000 : Math.pow(2, 14) : _options$highWaterMar;\n  var sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n    var numChunks, builder, _iterator2, _step2, value;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          numChunks = 0;\n          builder = Builder.new(options);\n          _iterator2 = _createForOfIteratorHelper(source);\n          _context.prev = 3;\n          _iterator2.s();\n        case 5:\n          if ((_step2 = _iterator2.n()).done) {\n            _context.next = 14;\n            break;\n          }\n          value = _step2.value;\n          if (!(builder.append(value)[sizeProperty] >= highWaterMark)) {\n            _context.next = 12;\n            break;\n          }\n          _context.t0 = ++numChunks;\n          if (!_context.t0) {\n            _context.next = 12;\n            break;\n          }\n          _context.next = 12;\n          return builder.toVector();\n        case 12:\n          _context.next = 5;\n          break;\n        case 14:\n          _context.next = 19;\n          break;\n        case 16:\n          _context.prev = 16;\n          _context.t1 = _context[\"catch\"](3);\n          _iterator2.e(_context.t1);\n        case 19:\n          _context.prev = 19;\n          _iterator2.f();\n          return _context.finish(19);\n        case 22:\n          if (!(builder.finish().length > 0 || numChunks === 0)) {\n            _context.next = 25;\n            break;\n          }\n          _context.next = 25;\n          return builder.toVector();\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 16, 19, 22]]);\n  });\n}\n/** @ignore */\nfunction _throughAsyncIterable(options) {\n  var _options$queueingStra2 = options['queueingStrategy'],\n    queueingStrategy = _options$queueingStra2 === void 0 ? 'count' : _options$queueingStra2;\n  var _options$highWaterMar2 = options['highWaterMark'],\n    highWaterMark = _options$highWaterMar2 === void 0 ? queueingStrategy !== 'bytes' ? 1000 : Math.pow(2, 14) : _options$highWaterMar2;\n  var sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n  return /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(source) {\n      var numChunks, builder, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, value;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            numChunks = 0;\n            builder = Builder.new(options);\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 4;\n            _iterator = _asyncIterator(source);\n          case 6:\n            _context2.next = 8;\n            return _awaitAsyncGenerator(_iterator.next());\n          case 8:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 18;\n              break;\n            }\n            value = _step.value;\n            if (!(builder.append(value)[sizeProperty] >= highWaterMark)) {\n              _context2.next = 15;\n              break;\n            }\n            _context2.t0 = ++numChunks;\n            if (!_context2.t0) {\n              _context2.next = 15;\n              break;\n            }\n            _context2.next = 15;\n            return builder.toVector();\n          case 15:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 6;\n            break;\n          case 18:\n            _context2.next = 24;\n            break;\n          case 20:\n            _context2.prev = 20;\n            _context2.t1 = _context2[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context2.t1;\n          case 24:\n            _context2.prev = 24;\n            _context2.prev = 25;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 29;\n              break;\n            }\n            _context2.next = 29;\n            return _awaitAsyncGenerator(_iterator.return());\n          case 29:\n            _context2.prev = 29;\n            if (!_didIteratorError) {\n              _context2.next = 32;\n              break;\n            }\n            throw _iteratorError;\n          case 32:\n            return _context2.finish(29);\n          case 33:\n            return _context2.finish(24);\n          case 34:\n            if (!(builder.finish().length > 0 || numChunks === 0)) {\n              _context2.next = 37;\n              break;\n            }\n            _context2.next = 37;\n            return builder.toVector();\n          case 37:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[4, 20, 24, 34], [25,, 29, 33]]);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"names":["Vector","BufferType","Data","createIsValidFunction","BitmapBufferBuilder","DataBufferBuilder","OffsetsBufferBuilder","strideForType","Builder","_ref2","type","nulls","_classCallCheck","length","finished","children","nullValues","stride","_nulls","_isValid","_createClass","key","value","toVector","new","flush","get","ArrayType","numInvalid","size","_offsets","byteLength","_values","_typeIds","reduce","child","reservedLength","reservedByteLength","buffer","append","set","isValid","index","setValid","setValue","_setValue","valid","addChild","name","arguments","undefined","concat","numChildren","Error","getChildAt","buffers","values","offsets","typeIds","nullCount","TYPE","OFFSET","DATA","last","VALIDITY","data","map","clear","finish","forEach","_new","options","throughNode","throughDOM","throughIterable","throughAsyncIterable","prototype","FixedWidthBuilder","_Builder","_inherits","_super","_createSuper","opts","_this","call","reserve","_get","_getPrototypeOf","VariableWidthBuilder","_Builder2","_super2","_this2","_pendingLength","pending","_pending","Map","current","_flush","pendingLength","_flushPending","_options$queueingStra","queueingStrategy","_options$highWaterMar","highWaterMark","Math","pow","sizeProperty","_regeneratorRuntime","mark","_callee","source","numChunks","builder","_iterator2","_step2","wrap","_callee$","_context","prev","next","_createForOfIteratorHelper","s","n","done","t0","t1","e","f","stop","_options$queueingStra2","_options$highWaterMar2","_ref","_wrapAsyncGenerator","_callee2","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_callee2$","_context2","_asyncIterator","_awaitAsyncGenerator","sent","return","_x","apply"],"sources":["builder.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    // @ts-ignore\n    protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    // @ts-ignore\n    protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    // @ts-ignore\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength: number = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughAsyncIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}