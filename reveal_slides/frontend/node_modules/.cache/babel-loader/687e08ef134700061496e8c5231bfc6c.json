{"ast":null,"code":"var _jsxFileName = \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { useEffect } from \"react\";\nimport Reveal from 'reveal.js';\nimport RevealMarkdown from 'reveal.js/plugin/markdown/markdown';\nimport 'reveal.js/dist/reveal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst RevealSlides = _ref => {\n  _s();\n  let {\n    args,\n    width,\n    disabled,\n    theme\n  } = _ref;\n  useEffect(() => {\n    // code to run on component mount goes here\n    import('../node_modules/reveal.js/dist/theme/' + args[\"theme\"] + '.css');\n  }, [args[\"theme\"]]);\n  const configStr = JSON.stringify(args[\"config\"]);\n  useEffect(() => {\n    const config = JSON.parse(configStr);\n    // code to run after render goes here\n    if (args[\"allow_unsafe_html\"]) {\n      Reveal.initialize(config);\n    } else {\n      if ('plugins' in config) {\n        const arr = config['plugins'];\n        arr.forEach(function (moduleName, index) {\n          arr[index] = window[moduleName];\n        });\n        config['plugins'] = arr;\n        if (!config['plugins'].includes(RevealMarkdown)) {\n          config['plugins'].push(RevealMarkdown);\n        }\n      } else {\n        config['plugins'] = [RevealMarkdown];\n      }\n      Reveal.initialize(config);\n    }\n    return () => {\n      // code to run on component unmount goes here\n      Reveal.destroy();\n    };\n  }, [configStr, args[\"allow_unsafe_html\"]]);\n\n  /**\n  * resizeObserver observes changes in elements its given to observe and is used here\n  * to communicate to streamlit the height of the component that has changed\n  * so that streamlit can adjust the iframe containing the component accordingly.\n  */\n  const resizeObserver = new ResizeObserver(entries => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    if (args[\"height\"] === \"auto\" || typeof args[\"height\"] !== \"number\") {\n      var _entries$0$contentBox;\n      Streamlit.setFrameHeight((_entries$0$contentBox = entries[0].contentBoxSize.blockSize) !== null && _entries$0$contentBox !== void 0 ? _entries$0$contentBox : entries[0].contentRect.height);\n    } else {\n      Streamlit.setFrameHeight(args[\"height\"]);\n    }\n  });\n  const observe = divElem => {\n    divElem ? resizeObserver.observe(divElem) : resizeObserver.disconnect();\n  };\n  if (args[\"allow_unsafe_html\"]) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: observe,\n      className: \"slides\",\n      dangerouslySetInnerHTML: {\n        __html: args[\"content\"]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: observe,\n      className: \"slides\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        \"data-markdown\": \"\",\n        ...args[\"markdown_props\"],\n        children: /*#__PURE__*/_jsxDEV(\"script\", {\n          type: \"text/template\",\n          children: args[\"content\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n_s(RevealSlides, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = RevealSlides;\nexport default _c2 = withStreamlitConnection(RevealSlides);\nvar _c, _c2;\n$RefreshReg$(_c, \"RevealSlides\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","useEffect","Reveal","RevealMarkdown","jsxDEV","_jsxDEV","RevealSlides","_ref","_s","args","width","disabled","theme","configStr","JSON","stringify","config","parse","initialize","arr","forEach","moduleName","index","window","includes","push","destroy","resizeObserver","ResizeObserver","entries","_entries$0$contentBox","setFrameHeight","contentBoxSize","blockSize","contentRect","height","observe","divElem","disconnect","ref","className","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","children","type","_c","_c2","$RefreshReg$"],"sources":["/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx"],"sourcesContent":["import {\n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection,\n  Theme,\n} from \"streamlit-component-lib\"\nimport {useState, useEffect, useMemo } from \"react\"\n\n\nimport Reveal from 'reveal.js';\nimport RevealMarkdown from 'reveal.js/plugin/markdown/markdown';\nimport RevealHighlight from 'reveal.js/plugin/highlight/highlight';\nimport RevealMath from 'reveal.js/plugin/math/math';\nimport RevealSearch from 'reveal.js/plugin/search/search';\nimport RevealNotes from 'reveal.js/plugin/notes/notes';\nimport RevealZoom from 'reveal.js/plugin/zoom/zoom';\n\n\nimport 'reveal.js/dist/reveal.css';\n\ninterface RevealSlidesProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst RevealSlides = ({ args, width, disabled, theme }: RevealSlidesProps) => {  \n\n  useEffect(() => {\n    // code to run on component mount goes here\n    import('../node_modules/reveal.js/dist/theme/' + args[\"theme\"] + '.css')\n  }, [args[\"theme\"]]);\n\n  const configStr = JSON.stringify(args[\"config\"])\n\n  useEffect(() => {\n    const config = JSON.parse(configStr)\n    // code to run after render goes here\n    if (args[\"allow_unsafe_html\"]) {\n      Reveal.initialize(config);\n    }\n    else {\n      if ('plugins' in config){\n        const arr = config['plugins'];\n        arr.forEach(function(moduleName: any, index: number) {\n          arr[index] = window[moduleName];\n        });\n        config['plugins'] = arr;\n        if(!config['plugins'].includes(RevealMarkdown)){\n          config['plugins'].push(RevealMarkdown);\n        }\n      }\n      else {\n        config['plugins'] = [RevealMarkdown];\n      }\n      Reveal.initialize(config);\n    }\n\n    return () => {\n      // code to run on component unmount goes here\n      Reveal.destroy();  \n    }\n  }, [configStr, args[\"allow_unsafe_html\"]]);\n\n    /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    if (args[\"height\"] === \"auto\" || typeof args[\"height\"] !== \"number\"){\n      Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n    }\n    else {\n      Streamlit.setFrameHeight(args[\"height\"]);\n    }\n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  if (args[\"allow_unsafe_html\"]) {\n    return (\n      <div ref={observe} className=\"slides\" dangerouslySetInnerHTML={{__html: args[\"content\"]}}>\n      </div>\n    )\n  }\n  else {\n    return (\n      <div ref={observe} className=\"slides\">\n        <section data-markdown={\"\"} {...args[\"markdown_props\"]}>\n          <script type={\"text/template\"}>\n          {args[\"content\"]}\n          </script>\n        </section>\n      </div>\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(RevealSlides)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}