{"ast":null,"code":"import _toConsumableArray from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType } from './type';\nexport var Visitor = /*#__PURE__*/function () {\n  function Visitor() {\n    _classCallCheck(this, Visitor);\n  }\n  _createClass(Visitor, [{\n    key: \"visitMany\",\n    value: function visitMany(nodes) {\n      var _this = this;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return nodes.map(function (node, i) {\n        return _this.visit.apply(_this, [node].concat(_toConsumableArray(args.map(function (x) {\n          return x[i];\n        }))));\n      });\n    }\n  }, {\n    key: \"visit\",\n    value: function visit() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return this.getVisitFn(args[0], false).apply(this, args);\n    }\n  }, {\n    key: \"getVisitFn\",\n    value: function getVisitFn(node) {\n      var throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return _getVisitFn(this, node, throwIfNotFound);\n    }\n  }, {\n    key: \"visitNull\",\n    value: function visitNull(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitBool\",\n    value: function visitBool(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitInt\",\n    value: function visitInt(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitFloat\",\n    value: function visitFloat(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitUtf8\",\n    value: function visitUtf8(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitBinary\",\n    value: function visitBinary(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitFixedSizeBinary\",\n    value: function visitFixedSizeBinary(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitDate\",\n    value: function visitDate(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitTimestamp\",\n    value: function visitTimestamp(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitTime\",\n    value: function visitTime(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitDecimal\",\n    value: function visitDecimal(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitList\",\n    value: function visitList(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitStruct\",\n    value: function visitStruct(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitUnion\",\n    value: function visitUnion(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitDictionary\",\n    value: function visitDictionary(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitInterval\",\n    value: function visitInterval(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitFixedSizeList\",\n    value: function visitFixedSizeList(_node) {\n      return null;\n    }\n  }, {\n    key: \"visitMap\",\n    value: function visitMap(_node) {\n      return null;\n    }\n  }]);\n  return Visitor;\n}();\n/** @ignore */\nfunction _getVisitFn(visitor, node) {\n  var throwIfNotFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var fn = null;\n  var dtype = Type.NONE;\n  // tslint:disable\n  if (node instanceof Data) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof Vector) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof DataType) {\n    dtype = inferDType(node);\n  } else if (typeof (dtype = node) !== 'number') {\n    dtype = Type[node];\n  }\n  switch (dtype) {\n    case Type.Null:\n      fn = visitor.visitNull;\n      break;\n    case Type.Bool:\n      fn = visitor.visitBool;\n      break;\n    case Type.Int:\n      fn = visitor.visitInt;\n      break;\n    case Type.Int8:\n      fn = visitor.visitInt8 || visitor.visitInt;\n      break;\n    case Type.Int16:\n      fn = visitor.visitInt16 || visitor.visitInt;\n      break;\n    case Type.Int32:\n      fn = visitor.visitInt32 || visitor.visitInt;\n      break;\n    case Type.Int64:\n      fn = visitor.visitInt64 || visitor.visitInt;\n      break;\n    case Type.Uint8:\n      fn = visitor.visitUint8 || visitor.visitInt;\n      break;\n    case Type.Uint16:\n      fn = visitor.visitUint16 || visitor.visitInt;\n      break;\n    case Type.Uint32:\n      fn = visitor.visitUint32 || visitor.visitInt;\n      break;\n    case Type.Uint64:\n      fn = visitor.visitUint64 || visitor.visitInt;\n      break;\n    case Type.Float:\n      fn = visitor.visitFloat;\n      break;\n    case Type.Float16:\n      fn = visitor.visitFloat16 || visitor.visitFloat;\n      break;\n    case Type.Float32:\n      fn = visitor.visitFloat32 || visitor.visitFloat;\n      break;\n    case Type.Float64:\n      fn = visitor.visitFloat64 || visitor.visitFloat;\n      break;\n    case Type.Utf8:\n      fn = visitor.visitUtf8;\n      break;\n    case Type.Binary:\n      fn = visitor.visitBinary;\n      break;\n    case Type.FixedSizeBinary:\n      fn = visitor.visitFixedSizeBinary;\n      break;\n    case Type.Date:\n      fn = visitor.visitDate;\n      break;\n    case Type.DateDay:\n      fn = visitor.visitDateDay || visitor.visitDate;\n      break;\n    case Type.DateMillisecond:\n      fn = visitor.visitDateMillisecond || visitor.visitDate;\n      break;\n    case Type.Timestamp:\n      fn = visitor.visitTimestamp;\n      break;\n    case Type.TimestampSecond:\n      fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampMillisecond:\n      fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampMicrosecond:\n      fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampNanosecond:\n      fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n      break;\n    case Type.Time:\n      fn = visitor.visitTime;\n      break;\n    case Type.TimeSecond:\n      fn = visitor.visitTimeSecond || visitor.visitTime;\n      break;\n    case Type.TimeMillisecond:\n      fn = visitor.visitTimeMillisecond || visitor.visitTime;\n      break;\n    case Type.TimeMicrosecond:\n      fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n      break;\n    case Type.TimeNanosecond:\n      fn = visitor.visitTimeNanosecond || visitor.visitTime;\n      break;\n    case Type.Decimal:\n      fn = visitor.visitDecimal;\n      break;\n    case Type.List:\n      fn = visitor.visitList;\n      break;\n    case Type.Struct:\n      fn = visitor.visitStruct;\n      break;\n    case Type.Union:\n      fn = visitor.visitUnion;\n      break;\n    case Type.DenseUnion:\n      fn = visitor.visitDenseUnion || visitor.visitUnion;\n      break;\n    case Type.SparseUnion:\n      fn = visitor.visitSparseUnion || visitor.visitUnion;\n      break;\n    case Type.Dictionary:\n      fn = visitor.visitDictionary;\n      break;\n    case Type.Interval:\n      fn = visitor.visitInterval;\n      break;\n    case Type.IntervalDayTime:\n      fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n      break;\n    case Type.IntervalYearMonth:\n      fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n      break;\n    case Type.FixedSizeList:\n      fn = visitor.visitFixedSizeList;\n      break;\n    case Type.Map:\n      fn = visitor.visitMap;\n      break;\n  }\n  if (typeof fn === 'function') return fn;\n  if (!throwIfNotFound) return function () {\n    return null;\n  };\n  throw new Error(\"Unrecognized type '\".concat(Type[dtype], \"'\"));\n}\n/** @ignore */\nfunction inferDType(type) {\n  switch (type.typeId) {\n    case Type.Null:\n      return Type.Null;\n    case Type.Int:\n      var bitWidth = type.bitWidth,\n        isSigned = type.isSigned;\n      switch (bitWidth) {\n        case 8:\n          return isSigned ? Type.Int8 : Type.Uint8;\n        case 16:\n          return isSigned ? Type.Int16 : Type.Uint16;\n        case 32:\n          return isSigned ? Type.Int32 : Type.Uint32;\n        case 64:\n          return isSigned ? Type.Int64 : Type.Uint64;\n      }\n      return Type.Int;\n    case Type.Float:\n      switch (type.precision) {\n        case Precision.HALF:\n          return Type.Float16;\n        case Precision.SINGLE:\n          return Type.Float32;\n        case Precision.DOUBLE:\n          return Type.Float64;\n      }\n      return Type.Float;\n    case Type.Binary:\n      return Type.Binary;\n    case Type.Utf8:\n      return Type.Utf8;\n    case Type.Bool:\n      return Type.Bool;\n    case Type.Decimal:\n      return Type.Decimal;\n    case Type.Time:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimeSecond;\n        case TimeUnit.MILLISECOND:\n          return Type.TimeMillisecond;\n        case TimeUnit.MICROSECOND:\n          return Type.TimeMicrosecond;\n        case TimeUnit.NANOSECOND:\n          return Type.TimeNanosecond;\n      }\n      return Type.Time;\n    case Type.Timestamp:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimestampSecond;\n        case TimeUnit.MILLISECOND:\n          return Type.TimestampMillisecond;\n        case TimeUnit.MICROSECOND:\n          return Type.TimestampMicrosecond;\n        case TimeUnit.NANOSECOND:\n          return Type.TimestampNanosecond;\n      }\n      return Type.Timestamp;\n    case Type.Date:\n      switch (type.unit) {\n        case DateUnit.DAY:\n          return Type.DateDay;\n        case DateUnit.MILLISECOND:\n          return Type.DateMillisecond;\n      }\n      return Type.Date;\n    case Type.Interval:\n      switch (type.unit) {\n        case IntervalUnit.DAY_TIME:\n          return Type.IntervalDayTime;\n        case IntervalUnit.YEAR_MONTH:\n          return Type.IntervalYearMonth;\n      }\n      return Type.Interval;\n    case Type.Map:\n      return Type.Map;\n    case Type.List:\n      return Type.List;\n    case Type.Struct:\n      return Type.Struct;\n    case Type.Union:\n      switch (type.mode) {\n        case UnionMode.Dense:\n          return Type.DenseUnion;\n        case UnionMode.Sparse:\n          return Type.SparseUnion;\n      }\n      return Type.Union;\n    case Type.FixedSizeBinary:\n      return Type.FixedSizeBinary;\n    case Type.FixedSizeList:\n      return Type.FixedSizeList;\n    case Type.Dictionary:\n      return Type.Dictionary;\n  }\n  throw new Error(\"Unrecognized type '\".concat(Type[type.typeId], \"'\"));\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;","map":{"version":3,"names":["Data","Vector","Type","Precision","DateUnit","TimeUnit","IntervalUnit","UnionMode","DataType","Visitor","_classCallCheck","_createClass","key","value","visitMany","nodes","_this","_len","arguments","length","args","Array","_key","map","node","i","visit","apply","concat","_toConsumableArray","x","_len2","_key2","getVisitFn","throwIfNotFound","undefined","visitNull","_node","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitDictionary","visitInterval","visitFixedSizeList","visitMap","visitor","fn","dtype","NONE","inferDType","type","Null","Bool","Int","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","Utf8","Binary","FixedSizeBinary","Date","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","Timestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","Time","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","Decimal","List","Struct","Union","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","Interval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","FixedSizeList","Map","Error","typeId","bitWidth","isSigned","precision","HALF","SINGLE","DOUBLE","unit","SECOND","MILLISECOND","MICROSECOND","NANOSECOND","DAY","DAY_TIME","YEAR_MONTH","mode","Dense","Sparse","prototype"],"sources":["visitor.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}