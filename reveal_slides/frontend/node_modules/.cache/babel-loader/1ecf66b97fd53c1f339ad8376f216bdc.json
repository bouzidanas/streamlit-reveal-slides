{"ast":null,"code":"import _regeneratorRuntime from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType } from '../type';\nTable.prototype.countBy = function (name) {\n  return new DataFrame(this.chunks).countBy(name);\n};\nTable.prototype.scan = function (next, bind) {\n  return new DataFrame(this.chunks).scan(next, bind);\n};\nTable.prototype.scanReverse = function (next, bind) {\n  return new DataFrame(this.chunks).scanReverse(next, bind);\n};\nTable.prototype.filter = function (predicate) {\n  return new DataFrame(this.chunks).filter(predicate);\n};\nexport var DataFrame = /*#__PURE__*/function (_Table) {\n  _inherits(DataFrame, _Table);\n  var _super = _createSuper(DataFrame);\n  function DataFrame() {\n    _classCallCheck(this, DataFrame);\n    return _super.apply(this, arguments);\n  }\n  _createClass(DataFrame, [{\n    key: \"filter\",\n    value: function filter(predicate) {\n      return new FilteredDataFrame(this.chunks, predicate);\n    }\n  }, {\n    key: \"scan\",\n    value: function scan(next, bind) {\n      var batches = this.chunks,\n        numBatches = batches.length;\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n        if (bind) {\n          bind(batch);\n        }\n        // yield all indices\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          next(index, batch);\n        }\n      }\n    }\n  }, {\n    key: \"scanReverse\",\n    value: function scanReverse(next, bind) {\n      var batches = this.chunks,\n        numBatches = batches.length;\n      for (var batchIndex = numBatches; --batchIndex >= 0;) {\n        // load batches\n        var batch = batches[batchIndex];\n        if (bind) {\n          bind(batch);\n        }\n        // yield all indices\n        for (var index = batch.length; --index >= 0;) {\n          next(index, batch);\n        }\n      }\n    }\n  }, {\n    key: \"countBy\",\n    value: function countBy(name) {\n      var batches = this.chunks,\n        numBatches = batches.length;\n      var count_by = typeof name === 'string' ? new Col(name) : name;\n      // Assume that all dictionary batches are deltas, which means that the\n      // last record batch has the most complete dictionary\n      count_by.bind(batches[numBatches - 1]);\n      var vector = count_by.vector;\n      if (!DataType.isDictionary(vector.type)) {\n        throw new Error('countBy currently only supports dictionary-encoded columns');\n      }\n      var countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n      var CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n      var counts = new CountsArrayType(vector.dictionary.length);\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n        // rebind the countBy Col\n        count_by.bind(batch);\n        var keys = count_by.vector.indices;\n        // yield all indices\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          var key = keys.get(index);\n          if (key !== null) {\n            counts[key]++;\n          }\n        }\n      }\n      return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n  }]);\n  return DataFrame;\n}(Table);\n/** @ignore */\nexport var CountByResult = /*#__PURE__*/function (_Table2) {\n  _inherits(CountByResult, _Table2);\n  var _super2 = _createSuper(CountByResult);\n  function CountByResult(values, counts) {\n    _classCallCheck(this, CountByResult);\n    var schema = new Schema([new Field('values', values.type), new Field('counts', counts.type)]);\n    return _super2.call(this, new RecordBatch(schema, counts.length, [values, counts]));\n  }\n  _createClass(CountByResult, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var values = this.getColumnAt(0);\n      var counts = this.getColumnAt(1);\n      var result = {};\n      for (var i = -1; ++i < this.length;) {\n        result[values.get(i)] = counts.get(i);\n      }\n      return result;\n    }\n  }]);\n  return CountByResult;\n}(Table);\n/** @ignore */\nexport var FilteredDataFrame = /*#__PURE__*/function (_DataFrame, _Symbol$iterator) {\n  _inherits(FilteredDataFrame, _DataFrame);\n  var _super3 = _createSuper(FilteredDataFrame);\n  function FilteredDataFrame(batches, predicate) {\n    var _this;\n    _classCallCheck(this, FilteredDataFrame);\n    _this = _super3.call(this, batches);\n    _this._predicate = predicate;\n    return _this;\n  }\n  _createClass(FilteredDataFrame, [{\n    key: \"scan\",\n    value: function scan(next, bind) {\n      // inlined version of this:\n      // this.parent.scan((idx, columns) => {\n      //     if (this.predicate(idx, columns)) next(idx, columns);\n      // });\n      var batches = this._chunks;\n      var numBatches = batches.length;\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n        var predicate = this._predicate.bind(batch);\n        var isBound = false;\n        // yield all indices\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          if (predicate(index, batch)) {\n            // bind batches lazily - if predicate doesn't match anything\n            // in the batch we don't need to call bind on the batch\n            if (bind && !isBound) {\n              bind(batch);\n              isBound = true;\n            }\n            next(index, batch);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"scanReverse\",\n    value: function scanReverse(next, bind) {\n      var batches = this._chunks;\n      var numBatches = batches.length;\n      for (var batchIndex = numBatches; --batchIndex >= 0;) {\n        // load batches\n        var batch = batches[batchIndex];\n        var predicate = this._predicate.bind(batch);\n        var isBound = false;\n        // yield all indices\n        for (var index = batch.length; --index >= 0;) {\n          if (predicate(index, batch)) {\n            // bind batches lazily - if predicate doesn't match anything\n            // in the batch we don't need to call bind on the batch\n            if (bind && !isBound) {\n              bind(batch);\n              isBound = true;\n            }\n            next(index, batch);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"count\",\n    value: function count() {\n      // inlined version of this:\n      // let sum = 0;\n      // this.parent.scan((idx, columns) => {\n      //     if (this.predicate(idx, columns)) ++sum;\n      // });\n      // return sum;\n      var sum = 0;\n      var batches = this._chunks;\n      var numBatches = batches.length;\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n        var predicate = this._predicate.bind(batch);\n        // yield all indices\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          if (predicate(index, batch)) {\n            ++sum;\n          }\n        }\n      }\n      return sum;\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: /*#__PURE__*/_regeneratorRuntime().mark(function value() {\n      var batches, numBatches, batchIndex, batch, predicate, index, numRows;\n      return _regeneratorRuntime().wrap(function value$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            // inlined version of this:\n            // this.parent.scan((idx, columns) => {\n            //     if (this.predicate(idx, columns)) next(idx, columns);\n            // });\n            batches = this._chunks;\n            numBatches = batches.length;\n            batchIndex = -1;\n          case 3:\n            if (!(++batchIndex < numBatches)) {\n              _context.next = 15;\n              break;\n            }\n            // load batches\n            batch = batches[batchIndex]; // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            predicate = this._predicate.bind(batch); // yield all indices\n            index = -1, numRows = batch.length;\n          case 7:\n            if (!(++index < numRows)) {\n              _context.next = 13;\n              break;\n            }\n            if (!predicate(index, batch)) {\n              _context.next = 11;\n              break;\n            }\n            _context.next = 11;\n            return batch.get(index);\n          case 11:\n            _context.next = 7;\n            break;\n          case 13:\n            _context.next = 3;\n            break;\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"filter\",\n    value: function filter(predicate) {\n      return new FilteredDataFrame(this._chunks, this._predicate.and(predicate));\n    }\n  }, {\n    key: \"countBy\",\n    value: function countBy(name) {\n      var batches = this._chunks,\n        numBatches = batches.length;\n      var count_by = typeof name === 'string' ? new Col(name) : name;\n      // Assume that all dictionary batches are deltas, which means that the\n      // last record batch has the most complete dictionary\n      count_by.bind(batches[numBatches - 1]);\n      var vector = count_by.vector;\n      if (!DataType.isDictionary(vector.type)) {\n        throw new Error('countBy currently only supports dictionary-encoded columns');\n      }\n      var countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n      var CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n      var counts = new CountsArrayType(vector.dictionary.length);\n      for (var batchIndex = -1; ++batchIndex < numBatches;) {\n        // load batches\n        var batch = batches[batchIndex];\n        var predicate = this._predicate.bind(batch);\n        // rebind the countBy Col\n        count_by.bind(batch);\n        var keys = count_by.vector.indices;\n        // yield all indices\n        for (var index = -1, numRows = batch.length; ++index < numRows;) {\n          var key = keys.get(index);\n          if (key !== null && predicate(index, batch)) {\n            counts[key]++;\n          }\n        }\n      }\n      return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n  }]);\n  return FilteredDataFrame;\n}(DataFrame, Symbol.iterator);","map":{"version":3,"names":["Table","IntVector","Field","Schema","Col","RecordBatch","DataType","prototype","countBy","name","DataFrame","chunks","scan","next","bind","scanReverse","filter","predicate","_Table","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","FilteredDataFrame","batches","numBatches","length","batchIndex","batch","index","numRows","count_by","vector","isDictionary","type","Error","countByteLength","Math","ceil","log","CountsArrayType","Uint32Array","Uint16Array","Uint8Array","counts","dictionary","keys","indices","get","CountByResult","from","_Table2","_super2","values","schema","call","toJSON","getColumnAt","result","i","_DataFrame","_Symbol$iterator","_super3","_this","_predicate","_chunks","isBound","count","sum","_regeneratorRuntime","mark","wrap","value$","_context","prev","stop","and","Symbol","iterator"],"sources":["compute/dataframe.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}