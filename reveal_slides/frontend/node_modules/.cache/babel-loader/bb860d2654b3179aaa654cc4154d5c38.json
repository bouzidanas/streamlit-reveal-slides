{"ast":null,"code":"import _slicedToArray from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/anasbouzid/streamlit-reveal-slides/reveal_slides/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport { DataType } from '../type';\n/** @ignore */\nexport var VectorAssembler = /*#__PURE__*/function (_Visitor) {\n  _inherits(VectorAssembler, _Visitor);\n  var _super = _createSuper(VectorAssembler);\n  function VectorAssembler() {\n    var _this;\n    _classCallCheck(this, VectorAssembler);\n    _this = _super.call(this);\n    _this._byteLength = 0;\n    _this._nodes = [];\n    _this._buffers = [];\n    _this._bufferRegions = [];\n    return _this;\n  }\n  /** @nocollapse */\n  _createClass(VectorAssembler, [{\n    key: \"visit\",\n    value: function visit(vector) {\n      if (!DataType.isDictionary(vector.type)) {\n        var data = vector.data,\n          length = vector.length,\n          nullCount = vector.nullCount;\n        if (length > 2147483647) {\n          /* istanbul ignore next */\n          throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n        }\n        if (!DataType.isNull(vector.type)) {\n          addBuffer.call(this, nullCount <= 0 ? new Uint8Array(0) // placeholder validity buffer\n          : truncateBitmap(data.offset, length, data.nullBitmap));\n        }\n        this.nodes.push(new FieldNode(length, nullCount));\n      }\n      return _get(_getPrototypeOf(VectorAssembler.prototype), \"visit\", this).call(this, vector);\n    }\n  }, {\n    key: \"visitNull\",\n    value: function visitNull(_nullV) {\n      return this;\n    }\n  }, {\n    key: \"visitDictionary\",\n    value: function visitDictionary(vector) {\n      // Assemble the indices here, Dictionary assembled separately.\n      return this.visit(vector.indices);\n    }\n  }, {\n    key: \"nodes\",\n    get: function get() {\n      return this._nodes;\n    }\n  }, {\n    key: \"buffers\",\n    get: function get() {\n      return this._buffers;\n    }\n  }, {\n    key: \"byteLength\",\n    get: function get() {\n      return this._byteLength;\n    }\n  }, {\n    key: \"bufferRegions\",\n    get: function get() {\n      return this._bufferRegions;\n    }\n  }], [{\n    key: \"assemble\",\n    value: function assemble() {\n      var assembler = new VectorAssembler();\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      var vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n      var _assembler$visitMany = assembler.visitMany(vectorChildren),\n        _assembler$visitMany2 = _slicedToArray(_assembler$visitMany, 1),\n        _assembler$visitMany3 = _assembler$visitMany2[0],\n        assembleResult = _assembler$visitMany3 === void 0 ? assembler : _assembler$visitMany3;\n      return assembleResult;\n    }\n  }]);\n  return VectorAssembler;\n}(Visitor);\n/** @ignore */\nfunction addBuffer(values) {\n  var byteLength = values.byteLength + 7 & ~7; // Round up to a multiple of 8\n  this.buffers.push(values);\n  this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n  this._byteLength += byteLength;\n  return this;\n}\n/** @ignore */\nfunction assembleUnion(vector) {\n  var type = vector.type,\n    length = vector.length,\n    typeIds = vector.typeIds,\n    valueOffsets = vector.valueOffsets;\n  // All Union Vectors have a typeIds buffer\n  addBuffer.call(this, typeIds);\n  // If this is a Sparse Union, treat it like all other Nested types\n  if (type.mode === UnionMode.Sparse) {\n    return assembleNestedVector.call(this, vector);\n  } else if (type.mode === UnionMode.Dense) {\n    // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n    if (vector.offset <= 0) {\n      // If the Vector hasn't been sliced, write the existing valueOffsets\n      addBuffer.call(this, valueOffsets);\n      // We can treat this like all other Nested types\n      return assembleNestedVector.call(this, vector);\n    } else {\n      // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n      // each child vector, we need to \"rebase\" the valueOffsets for each child\n      // Union typeIds are not necessary 0-indexed\n      var maxChildTypeId = typeIds.reduce(function (x, y) {\n        return Math.max(x, y);\n      }, typeIds[0]);\n      var childLengths = new Int32Array(maxChildTypeId + 1);\n      // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n      var childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n      var shiftedOffsets = new Int32Array(length);\n      // If we have a non-zero offset, then the value offsets do not start at\n      // zero. We must a) create a new offsets array with shifted offsets and\n      // b) slice the values array accordingly\n      var unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n      for (var typeId, shift, index = -1; ++index < length;) {\n        if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n          shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n        }\n        shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n        ++childLengths[typeId];\n      }\n      addBuffer.call(this, shiftedOffsets);\n      // Slice and visit children accordingly\n      for (var child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n        if (child = vector.getChildAt(childIndex)) {\n          var _typeId = type.typeIds[childIndex];\n          var childLength = Math.min(length, childLengths[_typeId]);\n          this.visit(child.slice(childOffsets[_typeId], childLength));\n        }\n      }\n    }\n  }\n  return this;\n}\n/** @ignore */\nfunction assembleBoolVector(vector) {\n  // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n  var values;\n  if (vector.nullCount >= vector.length) {\n    // If all values are null, just insert a placeholder empty data buffer (fastest path)\n    return addBuffer.call(this, new Uint8Array(0));\n  } else if ((values = vector.values) instanceof Uint8Array) {\n    // If values is already a Uint8Array, slice the bitmap (fast path)\n    return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n  }\n  // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n  // values as bools and re-pack them into a Uint8Array. This code isn't\n  // reachable unless you're trying to manipulate the Data internals,\n  // we we're only doing this for safety.\n  /* istanbul ignore next */\n  return addBuffer.call(this, packBools(vector));\n}\n/** @ignore */\nfunction assembleFlatVector(vector) {\n  return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n/** @ignore */\nfunction assembleFlatListVector(vector) {\n  var length = vector.length,\n    values = vector.values,\n    valueOffsets = vector.valueOffsets;\n  var firstOffset = valueOffsets[0];\n  var lastOffset = valueOffsets[length];\n  var byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n  // Push in the order FlatList types read their buffers\n  addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n  addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n  return this;\n}\n/** @ignore */\nfunction assembleListVector(vector) {\n  var length = vector.length,\n    valueOffsets = vector.valueOffsets;\n  // If we have valueOffsets (MapVector, ListVector), push that buffer first\n  if (valueOffsets) {\n    addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n  }\n  // Then insert the List's values child\n  return this.visit(vector.getChildAt(0));\n}\n/** @ignore */\nfunction assembleNestedVector(vector) {\n  return this.visitMany(vector.type.children.map(function (_, i) {\n    return vector.getChildAt(i);\n  }).filter(Boolean))[0];\n}\nVectorAssembler.prototype.visitBool = assembleBoolVector;\nVectorAssembler.prototype.visitInt = assembleFlatVector;\nVectorAssembler.prototype.visitFloat = assembleFlatVector;\nVectorAssembler.prototype.visitUtf8 = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;\nVectorAssembler.prototype.visitDate = assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp = assembleFlatVector;\nVectorAssembler.prototype.visitTime = assembleFlatVector;\nVectorAssembler.prototype.visitDecimal = assembleFlatVector;\nVectorAssembler.prototype.visitList = assembleListVector;\nVectorAssembler.prototype.visitStruct = assembleNestedVector;\nVectorAssembler.prototype.visitUnion = assembleUnion;\nVectorAssembler.prototype.visitInterval = assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList = assembleListVector;\nVectorAssembler.prototype.visitMap = assembleListVector;","map":{"version":3,"names":["Visitor","UnionMode","RecordBatch","rebaseValueOffsets","packBools","truncateBitmap","selectVectorChildrenArgs","BufferRegion","FieldNode","DataType","VectorAssembler","_Visitor","_inherits","_super","_createSuper","_this","_classCallCheck","call","_byteLength","_nodes","_buffers","_bufferRegions","_createClass","key","value","visit","vector","isDictionary","type","data","length","nullCount","RangeError","isNull","addBuffer","Uint8Array","offset","nullBitmap","nodes","push","_get","_getPrototypeOf","prototype","visitNull","_nullV","visitDictionary","indices","get","assemble","assembler","_len","arguments","args","Array","_key","vectorChildren","_assembler$visitMany","visitMany","_assembler$visitMany2","_slicedToArray","_assembler$visitMany3","assembleResult","values","byteLength","buffers","bufferRegions","assembleUnion","typeIds","valueOffsets","mode","Sparse","assembleNestedVector","Dense","maxChildTypeId","reduce","x","y","Math","max","childLengths","Int32Array","childOffsets","fill","shiftedOffsets","unshiftedOffsets","typeId","shift","index","child","childIndex","numChildren","children","getChildAt","childLength","min","slice","assembleBoolVector","assembleFlatVector","subarray","stride","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","map","_","i","filter","Boolean","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitInterval","visitFixedSizeList","visitMap"],"sources":["visitor/vectorassembler.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}