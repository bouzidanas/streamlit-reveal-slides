{"ast":null,"code":"var _jsxFileName = \"/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { useEffect, useMemo } from \"react\";\nimport Reveal from 'reveal.js';\nimport RevealMarkdown from 'reveal.js/plugin/markdown/markdown';\nimport RevealHighlight from 'reveal.js/plugin/highlight/highlight';\nimport RevealMath from 'reveal.js/plugin/math/math';\nimport RevealSearch from 'reveal.js/plugin/search/search';\nimport RevealNotes from 'reveal.js/plugin/notes/notes';\nimport RevealZoom from 'reveal.js/plugin/zoom/zoom';\nimport 'reveal.js/dist/reveal.css';\nimport 'reveal.js/plugin/highlight/monokai.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst includedPlugins = {\n  \"markdown\": RevealMarkdown,\n  \"highlight\": RevealHighlight,\n  \"katex\": RevealMath.KaTeX,\n  \"mathjax2\": RevealMath.MathJax2,\n  \"mathjax3\": RevealMath.MathJax3,\n  \"search\": RevealSearch,\n  \"notes\": RevealNotes,\n  \"zoom\": RevealZoom\n};\n// const simpleCommands = {\"left\": Reveal.left, \"right\": () => {Reveal.right()}, \"up\": Reveal.up, \"down\": Reveal.down, \"prev\": Reveal.prev, \"next\": Reveal.next, \"prevFragment\": Reveal.prevFragment, \"nextFragment\": Reveal.nextFragment, \"togglePause\": Reveal.togglePause, \"toggleAutoSlide\": Reveal.toggleAutoSlide, \"toggleHelp\": Reveal.toggleHelp, \"toggleOverview\": Reveal.toggleOverview, \"shuffle\": Reveal.shuffle}\n// const commandsWithArgs = {slide: Reveal.slide, togglePause: Reveal.togglePause, toggleAutoSlide: Reveal.toggleAutoSlide, toggleHelp: Reveal.toggleHelp, toggleOverview: Reveal.toggleOverview}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst RevealSlides = _ref => {\n  _s();\n  let {\n    args,\n    disabled\n  } = _ref;\n  let configStr = JSON.stringify(args[\"config\"]);\n  let initStateStr = JSON.stringify(args[\"initial_state\"]);\n  // const commandStr = JSON.stringify(args[\"commands\"])\n\n  const setupConfig = configString => {\n    const config = JSON.parse(configStr);\n    // code to run after render goes here\n    if (args[\"allow_unsafe_html\"]) {\n      // do nothing\n    } else {\n      if ('plugins' in config) {\n        var arr = config['plugins'];\n        arr.forEach(function (moduleName, index) {\n          if (moduleName in includedPlugins) {\n            arr[index] = includedPlugins[moduleName];\n          } else {\n            arr[index] = null;\n          }\n        });\n        config['plugins'] = arr.filter(x => !!x);\n        if (!config['plugins'].includes(RevealMarkdown)) {\n          config['plugins'].push(RevealMarkdown);\n        }\n      } else {\n        config['plugins'] = [RevealMarkdown];\n      }\n    }\n    return config;\n  };\n  useMemo(() => {\n    // code to run on component mount goes here\n\n    // To do: remove or disable previously imported css. When the list of\n    // css imports exceed about 25, the page no longer updates.\n    import('../node_modules/reveal.js/dist/theme/' + args.theme + '.css');\n\n    // To do: figure out a way to get a callback after new css is applied\n    // The following code is a hack to get around the fact that the new css\n    // is not applied immediately\n    setTimeout(() => {\n      try {\n        Reveal.layout();\n      } catch (e) {\n        console.warn(\"Reveal.layout() call failed.\");\n      }\n    }, 100);\n  }, [args.theme]);\n  useEffect(() => {\n    const config = setupConfig(configStr);\n    try {\n      Reveal.destroy();\n    } catch (e) {}\n    Reveal.initialize(config).then(() => {\n      // reveal.js is ready\n\n      // For some yet to be determined reason, the highlight plugin is not initialized.\n      // Setting highlight config option highlightOnLoad to true (before passing to initialize function)\n      // does not work\n      // To Do: make sure the highlight plugin only changes the HTML involving the code once instead of many times.\n      // Possible solution is to make a change to the plugin init function.\n      let highlighter = Reveal.getPlugin('highlight');\n      if (highlighter) {\n        highlighter.init(Reveal);\n      }\n      const initState = JSON.parse(initStateStr);\n      if (Object.keys(initState).length !== 0) {\n        Reveal.setState(initState);\n      }\n\n      // Send slide position indecies back to Streamlit on initialization and on slide change\n      const currState = Reveal.getState();\n      Streamlit.setComponentValue(currState);\n      Reveal.on('slidechanged', event => {\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue({\n          indexh: event.indexh,\n          indexv: event.indexv,\n          indexf: tempState.indexf,\n          paused: tempState.paused,\n          overview: tempState.overview\n        });\n      });\n      Reveal.on('fragmentshown', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      });\n      Reveal.on('fragmenthidden', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      });\n      Reveal.on('overviewshown', event => {\n        // event.overview = the overview DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      });\n      Reveal.on('overviewhidden', event => {\n        // event.overview = the overview DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      });\n      Reveal.on('paused', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      });\n      Reveal.on('resumed', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      });\n    });\n    return () => {\n      // code to run on component unmount goes here\n      Reveal.destroy();\n    };\n  }, []);\n\n  // Reconfigure reveal.js if config changes\n  useEffect(() => {\n    const existingPlugins = Reveal.getPlugins();\n    const config = setupConfig(configStr);\n\n    // Add and register plugins that are not already loaded\n    let existingPluginsList = Object.values(existingPlugins).map(plugin => plugin.id);\n    if ('plugins' in args[\"config\"]) {\n      const plugins = args[\"config\"][\"plugins\"];\n      plugins.forEach(plugin => {\n        if (plugin && existingPluginsList.indexOf(plugin) === -1) {\n          Reveal.registerPlugin(includedPlugins[plugin]);\n        }\n      });\n\n      //// Remove plugins that are no longer in the list (does not work yet..some signs there is a bug in Reveal.Plugin)\n      // Object.values(existingPlugins as {[id: string]: Reveal.Plugin;}).forEach((plugin: any) => {\n      //   if (plugin.id && plugin.id !=='markdown' && plugins.indexOf(plugin.id) === -1){\n      //     console.log(\"destroy plugin: \" + plugin.id);\n      //     if( typeof plugin.destroy === 'function' ) {\n      //       plugin.destroy();\n      //     }\n      //   }\n      // });\n    }\n    // Reconfigure reveal.js\n    Reveal.configure(config);\n  }, [configStr, args[\"allow_unsafe_html\"]]);\n  useEffect(() => {\n    const initState = JSON.parse(initStateStr);\n    if (Reveal.isReady() && Object.keys(initState).length !== 0) {\n      Reveal.setState(initState);\n    }\n  }, [initStateStr]);\n  useEffect(() => {\n    if (Reveal.isReady()) {\n      if (disabled) {\n        Reveal.togglePause(true);\n        let viewport = Reveal.getViewportElement();\n        if (viewport) {\n          viewport.style.pointerEvents = \"none\";\n        }\n      } else {\n        Reveal.togglePause(false);\n        let viewport = Reveal.getViewportElement();\n        if (viewport) {\n          viewport.style.pointerEvents = \"auto\";\n        }\n      }\n    }\n  }, [disabled]);\n\n  //To do: add support for commands (i.e. control slides from Streamlit)\n  //-----------------\n  // useEffect(() => {\n  //   const commands = JSON.parse(commandStr)\n  //   if (Array.isArray(commands) && commands.length > 0 && Reveal.isReady()){\n  //     commands.forEach((command: any) => {\n  //       if (typeof command === \"string\" && command in simpleCommands){\n  //         (simpleCommands as any)[command]();\n  //       }\n  //       else if (Array.isArray(command) && command.length > 0 && typeof command[0] === \"string\" && command[0] in commandsWithArgs){\n  //         if (command[0] === \"slide\"){\n  //           if (command.length === 3){\n  //             Reveal.slide(command[1], command[2]);\n  //           }\n  //           else if (command.length === 4){\n  //             Reveal.slide(command[1], command[2], command[3]);\n  //           }\n  //           else {\n  //             console.warn(\"Invalid slide command: slide command array must have 3 or 4 elements.\");\n  //           }\n  //         }\n  //         else {\n  //           (commandsWithArgs as any)[command[0]](command[1]);\n  //         }\n  //       }\n  //       else {\n  //         console.warn(\"Invalid command: command must be a string or an array containing a string as its first element.\");\n  //       }\n  //     });\n  //   }\n  //   else if (!Array.isArray(args[\"commands\"])) {\n  //     console.warn(\"Invalid commands property value: commands must be an array containing at least one command.\");\n  //   }\n  // }, [commandStr]);\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver(entries => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    if (args[\"height\"] === \"auto\" || typeof args[\"height\"] !== \"number\") {\n      var _entries$0$contentBox;\n      Streamlit.setFrameHeight((_entries$0$contentBox = entries[0].contentBoxSize.blockSize) !== null && _entries$0$contentBox !== void 0 ? _entries$0$contentBox : entries[0].contentRect.height);\n      if (Reveal.isReady()) {\n        Reveal.layout();\n      }\n    } else {\n      Streamlit.setFrameHeight(args[\"height\"]);\n      if (Reveal.isReady()) {\n        Reveal.layout();\n      }\n    }\n  });\n  const observe = divElem => {\n    divElem ? resizeObserver.observe(divElem) : resizeObserver.disconnect();\n  };\n  if (args[\"allow_unsafe_html\"]) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: observe,\n      className: \"slides\",\n      dangerouslySetInnerHTML: {\n        __html: args[\"content\"]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: observe,\n      className: \"slides\",\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        \"data-markdown\": \"\",\n        ...args[\"markdown_props\"],\n        children: /*#__PURE__*/_jsxDEV(\"script\", {\n          type: \"text/template\",\n          children: args[\"content\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n_s(RevealSlides, \"diGy1jCBRKgc6zsNznpcQsy8VGI=\");\n_c = RevealSlides;\nexport default _c2 = withStreamlitConnection(RevealSlides);\nvar _c, _c2;\n$RefreshReg$(_c, \"RevealSlides\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","useEffect","useMemo","Reveal","RevealMarkdown","RevealHighlight","RevealMath","RevealSearch","RevealNotes","RevealZoom","jsxDEV","_jsxDEV","includedPlugins","KaTeX","MathJax2","MathJax3","RevealSlides","_ref","_s","args","disabled","configStr","JSON","stringify","initStateStr","setupConfig","configString","config","parse","arr","forEach","moduleName","index","filter","x","includes","push","theme","setTimeout","layout","e","console","warn","destroy","initialize","then","highlighter","getPlugin","init","initState","Object","keys","length","setState","currState","getState","setComponentValue","on","event","tempState","indexh","indexv","indexf","paused","overview","existingPlugins","getPlugins","existingPluginsList","values","map","plugin","id","plugins","indexOf","registerPlugin","configure","isReady","togglePause","viewport","getViewportElement","style","pointerEvents","resizeObserver","ResizeObserver","entries","_entries$0$contentBox","setFrameHeight","contentBoxSize","blockSize","contentRect","height","observe","divElem","disconnect","ref","className","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","children","type","_c","_c2","$RefreshReg$"],"sources":["/home/anasbouzid/streamlit/streamlit.io/streamlit-reveal-slides/reveal_slides/frontend/src/RevealSlides.tsx"],"sourcesContent":["import {\n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection,\n  Theme,\n} from \"streamlit-component-lib\"\nimport { useEffect, useMemo } from \"react\"\n\n\nimport Reveal from 'reveal.js';\nimport RevealMarkdown from 'reveal.js/plugin/markdown/markdown';\nimport RevealHighlight from 'reveal.js/plugin/highlight/highlight';\nimport RevealMath from 'reveal.js/plugin/math/math';\nimport RevealSearch from 'reveal.js/plugin/search/search';\nimport RevealNotes from 'reveal.js/plugin/notes/notes';\nimport RevealZoom from 'reveal.js/plugin/zoom/zoom';\n\n\nimport 'reveal.js/dist/reveal.css';\nimport 'reveal.js/plugin/highlight/monokai.css';\nimport { config } from \"process\";\n\ninterface RevealSlidesProps extends ComponentProps {\n  args: any\n  width: number\n  disabled: boolean\n  theme?: Theme\n}\n\nconst includedPlugins = {\"markdown\": RevealMarkdown, \"highlight\": RevealHighlight, \"katex\": RevealMath.KaTeX, \"mathjax2\": RevealMath.MathJax2, \"mathjax3\": RevealMath.MathJax3, \"search\": RevealSearch, \"notes\": RevealNotes, \"zoom\": RevealZoom}\n// const simpleCommands = {\"left\": Reveal.left, \"right\": () => {Reveal.right()}, \"up\": Reveal.up, \"down\": Reveal.down, \"prev\": Reveal.prev, \"next\": Reveal.next, \"prevFragment\": Reveal.prevFragment, \"nextFragment\": Reveal.nextFragment, \"togglePause\": Reveal.togglePause, \"toggleAutoSlide\": Reveal.toggleAutoSlide, \"toggleHelp\": Reveal.toggleHelp, \"toggleOverview\": Reveal.toggleOverview, \"shuffle\": Reveal.shuffle}\n// const commandsWithArgs = {slide: Reveal.slide, togglePause: Reveal.togglePause, toggleAutoSlide: Reveal.toggleAutoSlide, toggleHelp: Reveal.toggleHelp, toggleOverview: Reveal.toggleOverview}\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nconst RevealSlides = ({ args, disabled }: RevealSlidesProps) => {   \n\n  let configStr = JSON.stringify(args[\"config\"])\n  let initStateStr = JSON.stringify(args[\"initial_state\"])\n  // const commandStr = JSON.stringify(args[\"commands\"])\n\n  const setupConfig = (configString: string) : object => {\n    const config = JSON.parse(configStr)\n    // code to run after render goes here\n    if (args[\"allow_unsafe_html\"]) {\n      // do nothing\n    }\n    else {\n      if ('plugins' in config){\n        var arr = config['plugins'];\n        arr.forEach(function(moduleName: string, index: number) {\n          if (moduleName in includedPlugins){\n            arr[index] = (includedPlugins as any)[moduleName];\n          }\n          else {\n            arr[index] = null;\n          }\n        });\n        config['plugins'] = arr.filter((x:any) => !!x) as any[];\n        if(!config['plugins'].includes(RevealMarkdown)){\n          config['plugins'].push(RevealMarkdown);\n        }\n      }\n      else {\n        config['plugins'] = [RevealMarkdown];\n      }\n    }\n    return config;\n  }\n\n  useMemo(()=>{\n    // code to run on component mount goes here\n\n    // To do: remove or disable previously imported css. When the list of\n    // css imports exceed about 25, the page no longer updates.\n    import('../node_modules/reveal.js/dist/theme/' + args.theme + '.css')\n\n    // To do: figure out a way to get a callback after new css is applied\n    // The following code is a hack to get around the fact that the new css\n    // is not applied immediately\n    setTimeout(() => {\n      try{\n        Reveal.layout();\n      }\n      catch (e){\n        console.warn(\"Reveal.layout() call failed.\")\n      }\n    }, 100);\n\n  }, [args.theme]);\n\n  useEffect(() => {\n    const config = setupConfig(configStr)\n    \n    try {\n      Reveal.destroy();\n    }\n    catch (e) {\n    }\n    Reveal.initialize(config).then(() => {\n      // reveal.js is ready\n      \n      // For some yet to be determined reason, the highlight plugin is not initialized.\n      // Setting highlight config option highlightOnLoad to true (before passing to initialize function)\n      // does not work\n      // To Do: make sure the highlight plugin only changes the HTML involving the code once instead of many times.\n      // Possible solution is to make a change to the plugin init function.\n      let highlighter = Reveal.getPlugin('highlight') as any;\n      if (highlighter){\n        highlighter.init(Reveal);\n      }\n      \n      const initState = JSON.parse(initStateStr);\n      if(Object.keys(initState).length !== 0){\n        Reveal.setState(initState);\n      }\n\n      // Send slide position indecies back to Streamlit on initialization and on slide change\n      const currState = Reveal.getState();\n      Streamlit.setComponentValue(currState);\n      Reveal.on( 'slidechanged', event => {\n\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue({indexh: (event as any).indexh, indexv: (event as any).indexv, indexf: tempState.indexf, paused: tempState.paused, overview: tempState.overview});\n      });\n      \n      Reveal.on( 'fragmentshown', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'fragmenthidden', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'overviewshown', event => {\n        // event.overview = the overview DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'overviewhidden', event => {\n        // event.overview = the overview DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'paused', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n      Reveal.on( 'resumed', event => {\n        // event.fragment = the fragment DOM element\n        const tempState = Reveal.getState();\n        Streamlit.setComponentValue(tempState);\n      } );\n\n    });\n\n    return () => {\n      // code to run on component unmount goes here\n      Reveal.destroy();  \n    }\n  }, []);\n\n  // Reconfigure reveal.js if config changes\n  useEffect(() => {\n    const existingPlugins = Reveal.getPlugins();\n    const config = setupConfig(configStr)\n\n    // Add and register plugins that are not already loaded\n    let existingPluginsList : string[] = Object.values(existingPlugins).map((plugin: any) => plugin.id);\n    if('plugins' in args[\"config\"]){\n      const plugins = args[\"config\"][\"plugins\"];\n      (plugins as string[]).forEach((plugin: string) => {\n        if (plugin && existingPluginsList.indexOf(plugin) === -1){\n          Reveal.registerPlugin((includedPlugins as any)[plugin]);\n        }\n      });\n\n      //// Remove plugins that are no longer in the list (does not work yet..some signs there is a bug in Reveal.Plugin)\n      // Object.values(existingPlugins as {[id: string]: Reveal.Plugin;}).forEach((plugin: any) => {\n      //   if (plugin.id && plugin.id !=='markdown' && plugins.indexOf(plugin.id) === -1){\n      //     console.log(\"destroy plugin: \" + plugin.id);\n      //     if( typeof plugin.destroy === 'function' ) {\n      //       plugin.destroy();\n      //     }\n      //   }\n      // });\n    }\n    // Reconfigure reveal.js\n    Reveal.configure(config);\n  }, [configStr, args[\"allow_unsafe_html\"]]);\n\n  useEffect(() => {\n    const initState = JSON.parse(initStateStr);\n    if (Reveal.isReady() && Object.keys(initState).length !== 0){\n      Reveal.setState(initState);\n    }\n  }, [initStateStr]);\n\n  useEffect(() => {\n    if (Reveal.isReady()){\n      if (disabled){\n        Reveal.togglePause(true);\n        let viewport = Reveal.getViewportElement();\n        if (viewport){\n          viewport.style.pointerEvents = \"none\";\n        }\n      }\n      else {  \n        Reveal.togglePause(false);\n        let viewport = Reveal.getViewportElement();\n        if (viewport){\n          viewport.style.pointerEvents = \"auto\";\n        }\n      }\n    }\n  }, [disabled]);\n\n  //To do: add support for commands (i.e. control slides from Streamlit)\n  //-----------------\n  // useEffect(() => {\n  //   const commands = JSON.parse(commandStr)\n  //   if (Array.isArray(commands) && commands.length > 0 && Reveal.isReady()){\n  //     commands.forEach((command: any) => {\n  //       if (typeof command === \"string\" && command in simpleCommands){\n  //         (simpleCommands as any)[command]();\n  //       }\n  //       else if (Array.isArray(command) && command.length > 0 && typeof command[0] === \"string\" && command[0] in commandsWithArgs){\n  //         if (command[0] === \"slide\"){\n  //           if (command.length === 3){\n  //             Reveal.slide(command[1], command[2]);\n  //           }\n  //           else if (command.length === 4){\n  //             Reveal.slide(command[1], command[2], command[3]);\n  //           }\n  //           else {\n  //             console.warn(\"Invalid slide command: slide command array must have 3 or 4 elements.\");\n  //           }\n  //         }\n  //         else {\n  //           (commandsWithArgs as any)[command[0]](command[1]);\n  //         }\n  //       }\n  //       else {\n  //         console.warn(\"Invalid command: command must be a string or an array containing a string as its first element.\");\n  //       }\n  //     });\n  //   }\n  //   else if (!Array.isArray(args[\"commands\"])) {\n  //     console.warn(\"Invalid commands property value: commands must be an array containing at least one command.\");\n  //   }\n  // }, [commandStr]);\n\n  /**\n   * resizeObserver observes changes in elements its given to observe and is used here\n   * to communicate to streamlit the height of the component that has changed\n   * so that streamlit can adjust the iframe containing the component accordingly.\n   */\n  const resizeObserver = new ResizeObserver((entries: any) => {\n    // If we know that the body will always fully contain our component (without cutting it off)\n    // then we can use docuemnt.body height instead\n    if (args[\"height\"] === \"auto\" || typeof args[\"height\"] !== \"number\"){\n      Streamlit.setFrameHeight((entries[0].contentBoxSize.blockSize ?? entries[0].contentRect.height)); \n      if (Reveal.isReady()){\n        Reveal.layout();\n      }\n    }\n    else {\n      Streamlit.setFrameHeight(args[\"height\"]);\n      if (Reveal.isReady()){\n        Reveal.layout();\n      }\n    }\n    \n  })\n\n  const observe = (divElem: any) => {\n    divElem ? resizeObserver.observe(divElem as HTMLDivElement) : resizeObserver.disconnect();\n  }\n\n  if (args[\"allow_unsafe_html\"]) {\n    return (\n      <div ref={observe} className=\"slides\" dangerouslySetInnerHTML={{__html: args[\"content\"]}}>\n      </div>\n    )\n  }\n  else {\n    return (\n      <div ref={observe} className=\"slides\">\n        <section data-markdown={\"\"} {...args[\"markdown_props\"]}>\n          <script type={\"text/template\"}>\n          {args[\"content\"]}\n          </script>\n        </section>\n      </div>\n    )\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(RevealSlides)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}